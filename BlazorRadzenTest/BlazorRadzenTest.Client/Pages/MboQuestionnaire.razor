@page "/mbo"
@using BlazorRadzenTest.Client.Components
@using Radzen
@using Radzen.Blazor

<PageTitle>MBO Questionnaire</PageTitle>

<RadzenText TextStyle="TextStyle.H3" Class="mb-4">Employee MBO Questionnaire</RadzenText>

<RadzenButton Text="Submit Questionnaire" ButtonStyle="ButtonStyle.Primary" Click="@SubmitQuestionnaire" Class="mb-4" />

<RatingQuestion Title="Performance Evaluation" 
                Questions="performanceQuestions" 
                @bind-Ratings="performanceRatings"
                @bind-Comment="performanceComment" />

<TextQuestion Title="Professional Development" 
              Questions="developmentQuestions"
              @bind-Answers="developmentAnswers" />

<GoalQuestion @bind-TimeFrameFrom="goalTimeFrameFrom"
              @bind-TimeFrameTo="goalTimeFrameTo"
              @bind-GoalDescription="goalDescription"
              @bind-MeasurementVariable="measurementVariable"
              @bind-Weighting="weighting" />

@code {
    private List<string> performanceQuestions = new()
    {
        "How would you rate your overall performance this quarter?",
        "How effectively did you collaborate with your team?",
        "How well did you meet your project deadlines?"
    };

    private Dictionary<string, int> performanceRatings = new();
    private string performanceComment = string.Empty;

    private List<string> developmentQuestions = new()
    {
        "What skills would you like to develop further?",
        "What training or resources do you need to achieve your goals?",
        "How can your manager best support your professional growth?"
    };

    private Dictionary<string, string> developmentAnswers = new();

    private DateTime? goalTimeFrameFrom;
    private DateTime? goalTimeFrameTo;
    private string goalDescription = string.Empty;
    private string measurementVariable = string.Empty;
    private decimal weighting = 0;

    private void SubmitQuestionnaire()
    {
        // Here you would typically save the data to a database or API
        Console.WriteLine("Performance Ratings:");
        foreach (var rating in performanceRatings)
        {
            Console.WriteLine($"  {rating.Key}: {rating.Value}/4");
        }
        Console.WriteLine($"Performance Comment: {performanceComment}");
        
        Console.WriteLine("\nDevelopment Answers:");
        foreach (var answer in developmentAnswers)
        {
            Console.WriteLine($"  {answer.Key}: {answer.Value}");
        }
        
        Console.WriteLine($"\nGoal Details:");
        Console.WriteLine($"  Time Frame: {goalTimeFrameFrom:dd/MM/yyyy} - {goalTimeFrameTo:dd/MM/yyyy}");
        Console.WriteLine($"  Description: {goalDescription}");
        Console.WriteLine($"  Measurement: {measurementVariable}");
        Console.WriteLine($"  Weighting: {weighting}%");
        
        // Show success notification
        NotificationService.Notify(NotificationSeverity.Success, "Success", "Questionnaire submitted successfully!");
    }

    [Inject] protected NotificationService NotificationService { get; set; } = default!;
}