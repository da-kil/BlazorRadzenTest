@page "/questionnaire/{TemplateId:guid}"
@page "/questionnaire/{TemplateId:guid}/{AssignmentId:guid?}"
@using BlazorRadzenTest.Client.Models
@using BlazorRadzenTest.Client.Components
@using Radzen
@using Radzen.Blazor

<PageTitle>@(template?.Name ?? "Questionnaire")</PageTitle>

<div class="container-fluid">
    @if (template == null)
    {
        <div class="text-center p-5">
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Class="mb-3" />
            <RadzenText TextStyle="TextStyle.Body1" Class="text-muted">Loading questionnaire...</RadzenText>
        </div>
    }
    else
    {
        <RadzenCard Class="p-4">
            <div class="text-center mb-4">
                <RadzenText TextStyle="TextStyle.H3" Class="text-primary">
                    <RadzenIcon Icon="quiz" Class="me-2" />
                    @template.Name
                </RadzenText>
                @if (!string.IsNullOrWhiteSpace(template.Description))
                {
                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="text-muted">
                        @template.Description
                    </RadzenText>
                }
            </div>

            @if (template.Settings.ShowProgressBar)
            {
                <div class="progress-section mb-4">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">
                            Progress: @response.ProgressPercentage%
                        </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">
                            Section @(currentSectionIndex + 1) of @template.Sections.Count
                        </RadzenText>
                    </div>
                    <RadzenProgressBar Value="@response.ProgressPercentage" Max="100" ProgressBarStyle="ProgressBarStyle.Primary" />
                </div>
            }

            <RadzenSteps Value="@currentSectionIndex" Change="@OnSectionChanged" Class="mb-4">
                @for (int i = 0; i < template.Sections.Count; i++)
                {
                    var section = template.Sections[i];
                    var isCompleted = IsSectionCompleted(section.Id);
                    var sectionTitle = section.Title;
                    <RadzenStepsItem Text="@sectionTitle" Icon="@(isCompleted ? "check_circle" : null)" />
                }
            </RadzenSteps>

            <div class="questionnaire-content">
                @if (currentSection != null)
                {
                    <RadzenCard Class="section-card p-4">
                        <RadzenText TextStyle="TextStyle.H4" Class="text-primary mb-3">
                            @currentSection.Title
                        </RadzenText>
                        
                        @if (!string.IsNullOrWhiteSpace(currentSection.Description))
                        {
                            <RadzenText TextStyle="TextStyle.Body1" Class="text-muted mb-4">
                                @currentSection.Description
                            </RadzenText>
                        }

                        <div class="questions-container">
                            @foreach (var question in currentSection.Questions.OrderBy(q => q.Order))
                            {
                                <div class="question-wrapper mb-4">
                                    @RenderQuestion(question)
                                </div>
                            }
                        </div>
                    </RadzenCard>
                }
            </div>

            <div class="d-flex justify-content-between mt-4">
                <RadzenButton Text="Previous" 
                             ButtonStyle="ButtonStyle.Light" 
                             Icon="arrow_back"
                             Click="@PreviousSection"
                             Disabled="@(currentSectionIndex == 0)" />
                
                <div class="d-flex gap-2">
                    @if (template.Settings.AllowSaveProgress)
                    {
                        <RadzenButton Text="Save Progress" 
                                     ButtonStyle="ButtonStyle.Info" 
                                     Icon="save"
                                     Click="@SaveProgress" />
                    }
                    
                    @if (currentSectionIndex == template.Sections.Count - 1)
                    {
                        @if (template.Settings.AllowReviewBeforeSubmit)
                        {
                            <RadzenButton Text="Review & Submit" 
                                         ButtonStyle="ButtonStyle.Success" 
                                         Icon="preview"
                                         Click="@ShowReview"
                                         Disabled="@(!CanProceedFromCurrentSection())" />
                        }
                        else
                        {
                            <RadzenButton Text="Submit" 
                                         ButtonStyle="ButtonStyle.Success" 
                                         Icon="send"
                                         Click="@SubmitQuestionnaire"
                                         Disabled="@(!CanSubmit())" />
                        }
                    }
                    else
                    {
                        <RadzenButton Text="Next" 
                                     ButtonStyle="ButtonStyle.Primary" 
                                     Icon="arrow_forward"
                                     Click="@NextSection"
                                     Disabled="@(!CanProceedFromCurrentSection())" />
                    }
                </div>
            </div>
        </RadzenCard>
    }
</div>

@code {
    [Parameter] public Guid TemplateId { get; set; }
    [Parameter] public Guid? AssignmentId { get; set; }
    [Inject] protected DialogService DialogService { get; set; } = default!;
    [Inject] protected NotificationService NotificationService { get; set; } = default!;
    [Inject] protected NavigationManager NavigationManager { get; set; } = default!;

    private QuestionnaireTemplate? template;
    private QuestionnaireResponse response = new();
    private int currentSectionIndex = 0;
    private QuestionSection? currentSection => template?.Sections.OrderBy(s => s.Order).ElementAtOrDefault(currentSectionIndex);

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplate();
        InitializeResponse();
        UpdateProgress();
    }

    private async Task LoadTemplate()
    {
        // In a real application, load from database/API
        // For demo, create a sample template
        template = new QuestionnaireTemplate
        {
            Id = TemplateId,
            Name = "Employee Performance Review",
            Description = "Annual performance evaluation questionnaire",
            Settings = new QuestionnaireSettings
            {
                ShowProgressBar = true,
                AllowSaveProgress = true,
                AllowReviewBeforeSubmit = true
            },
            Sections = new List<QuestionSection>
            {
                new QuestionSection
                {
                    Id = Guid.NewGuid(),
                    Title = "Self Assessment",
                    Description = "Rate your performance in key areas",
                    Order = 0,
                    Questions = new List<QuestionItem>
                    {
                        new QuestionItem
                        {
                            Id = Guid.NewGuid(),
                            Title = "How would you rate your overall performance this year?",
                            Type = QuestionType.RatingQuestion,
                            Order = 0,
                            IsRequired = true
                        },
                        new QuestionItem
                        {
                            Id = Guid.NewGuid(),
                            Title = "What are your key accomplishments?",
                            Type = QuestionType.TextQuestion,
                            Order = 1,
                            IsRequired = true
                        }
                    }
                },
                new QuestionSection
                {
                    Id = Guid.NewGuid(),
                    Title = "Goals for Next Year",
                    Description = "Define your objectives for the upcoming year",
                    Order = 1,
                    Questions = new List<QuestionItem>
                    {
                        new QuestionItem
                        {
                            Id = Guid.NewGuid(),
                            Title = "Set your primary goal for next year",
                            Type = QuestionType.GoalQuestion,
                            Order = 0,
                            IsRequired = true
                        }
                    }
                }
            }
        };
    }

    private void InitializeResponse()
    {
        if (template == null) return;
        
        response = new QuestionnaireResponse
        {
            TemplateId = TemplateId,
            AssignmentId = AssignmentId ?? Guid.Empty,
            EmployeeId = "current-user", // Get from auth context
            Status = ResponseStatus.InProgress
        };

        // Initialize section responses
        foreach (var section in template.Sections)
        {
            response.SectionResponses[section.Id] = new SectionResponse
            {
                SectionId = section.Id,
                QuestionResponses = new Dictionary<Guid, QuestionResponse>()
            };

            // Initialize question responses
            foreach (var question in section.Questions)
            {
                response.SectionResponses[section.Id].QuestionResponses[question.Id] = new QuestionResponse
                {
                    QuestionId = question.Id,
                    QuestionType = question.Type
                };
            }
        }
    }

    private RenderFragment RenderQuestion(QuestionItem question)
    {
        var questionResponse = GetQuestionResponse(question.Id);
        
        return question.Type switch
        {
            QuestionType.RatingQuestion => RenderRatingQuestion(question, questionResponse),
            QuestionType.TextQuestion => RenderTextQuestion(question, questionResponse),
            QuestionType.GoalQuestion => RenderGoalQuestion(question, questionResponse),
            QuestionType.YesNoQuestion => RenderYesNoQuestion(question, questionResponse),
            QuestionType.DateQuestion => RenderDateQuestion(question, questionResponse),
            QuestionType.NumberQuestion => RenderNumberQuestion(question, questionResponse),
            _ => @<div class="alert alert-warning">Question type @question.Type not implemented</div>
        };
    }

    private RenderFragment RenderRatingQuestion(QuestionItem question, QuestionResponse response)
    {
        return @<div class="rating-question">
            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">
                @question.Title
                @if (question.IsRequired) { <span class="text-danger">*</span> }
            </RadzenText>
            @if (!string.IsNullOrWhiteSpace(question.Description))
            {
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-3">@question.Description</RadzenText>
            }
            <div class="d-flex align-items-center mb-3">
                <RadzenRating Value="@(response.NumericValue ?? 0)" 
                            ValueChanged="@(value => UpdateQuestionResponse(question.Id, value))"
                            Stars="4" 
                            Class="me-3" />
                <RadzenText TextStyle="TextStyle.Caption">
                    @(response.NumericValue ?? 0)/4
                </RadzenText>
            </div>
            <RadzenTextArea Value="@(response.TextValue ?? "")" 
                          ValueChanged="@(value => UpdateQuestionResponseText(question.Id, value))"
                          Placeholder="Optional comments..."
                          Rows="2"
                          Class="w-100" />
        </div>;
    }

    private RenderFragment RenderTextQuestion(QuestionItem question, QuestionResponse response)
    {
        return @<div class="text-question">
            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">
                @question.Title
                @if (question.IsRequired) { <span class="text-danger">*</span> }
            </RadzenText>
            @if (!string.IsNullOrWhiteSpace(question.Description))
            {
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-3">@question.Description</RadzenText>
            }
            <RadzenTextArea Value="@(response.TextValue ?? "")" 
                          ValueChanged="@(value => UpdateQuestionResponseText(question.Id, value))"
                          Placeholder="Enter your answer..."
                          Rows="4"
                          Class="w-100" />
        </div>;
    }

    private RenderFragment RenderGoalQuestion(QuestionItem question, QuestionResponse response)
    {
        return @<div class="goal-question">
            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">
                @question.Title
                @if (question.IsRequired) { <span class="text-danger">*</span> }
            </RadzenText>
            @if (!string.IsNullOrWhiteSpace(question.Description))
            {
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-3">@question.Description</RadzenText>
            }
            <GoalQuestion TimeFrameFrom="@GetGoalStartDate(question.Id)" TimeFrameFromChanged="@(value => SetGoalStartDate(question.Id, value))"
                         TimeFrameTo="@GetGoalEndDate(question.Id)" TimeFrameToChanged="@(value => SetGoalEndDate(question.Id, value))"
                         GoalDescription="@GetGoalDescription(question.Id)" GoalDescriptionChanged="@(value => SetGoalDescription(question.Id, value))"
                         MeasurementVariable="@GetGoalMeasurement(question.Id)" MeasurementVariableChanged="@(value => SetGoalMeasurement(question.Id, value))"
                         Weighting="@GetGoalWeighting(question.Id)" WeightingChanged="@(value => SetGoalWeighting(question.Id, value))" />
        </div>;
    }

    private RenderFragment RenderYesNoQuestion(QuestionItem question, QuestionResponse response)
    {
        return @<div class="yesno-question">
            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">
                @question.Title
                @if (question.IsRequired) { <span class="text-danger">*</span> }
            </RadzenText>
            @if (!string.IsNullOrWhiteSpace(question.Description))
            {
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-3">@question.Description</RadzenText>
            }
            <RadzenToggleButton Value="@GetBooleanValue(question.Id)" 
                              ValueChanged="@(value => SetBooleanValue(question.Id, value))"
                              Text="@(GetBooleanValue(question.Id) ? "Yes" : "No")" 
                              ButtonStyle="@(GetBooleanValue(question.Id) ? ButtonStyle.Success : ButtonStyle.Secondary)" />
        </div>;
    }

    private RenderFragment RenderDateQuestion(QuestionItem question, QuestionResponse response)
    {
        return @<div class="date-question">
            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">
                @question.Title
                @if (question.IsRequired) { <span class="text-danger">*</span> }
            </RadzenText>
            @if (!string.IsNullOrWhiteSpace(question.Description))
            {
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-3">@question.Description</RadzenText>
            }
            <RadzenDatePicker Value="@GetDateValue(question.Id)"
                            ValueChanged="@(value => SetDateValue(question.Id, value))"
                            TValue="DateTime?"
                            ShowTime="false"
                            DateFormat="dd/MM/yyyy"
                            Class="w-100" />
        </div>;
    }

    private RenderFragment RenderNumberQuestion(QuestionItem question, QuestionResponse response)
    {
        return @<div class="number-question">
            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">
                @question.Title
                @if (question.IsRequired) { <span class="text-danger">*</span> }
            </RadzenText>
            @if (!string.IsNullOrWhiteSpace(question.Description))
            {
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-3">@question.Description</RadzenText>
            }
            <RadzenNumeric Value="@GetNumericValue(question.Id)" 
                         ValueChanged="@(value => SetNumericValue(question.Id, value))"
                         TValue="int"
                         Class="w-100" />
        </div>;
    }

    // Helper methods for question responses
    private QuestionResponse GetQuestionResponse(Guid questionId)
    {
        if (currentSection == null) return new QuestionResponse { QuestionId = questionId };
        
        var sectionResponse = response.SectionResponses[currentSection.Id];
        return sectionResponse.QuestionResponses.TryGetValue(questionId, out var questionResponse) 
            ? questionResponse 
            : new QuestionResponse { QuestionId = questionId };
    }

    private void UpdateQuestionResponse(Guid questionId, int value)
    {
        var questionResponse = GetQuestionResponse(questionId);
        questionResponse.NumericValue = value;
        questionResponse.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void UpdateQuestionResponseText(Guid questionId, string value)
    {
        var questionResponse = GetQuestionResponse(questionId);
        questionResponse.TextValue = value;
        questionResponse.LastModified = DateTime.Now;
        UpdateProgress();
    }

    // Goal question helpers
    private DateTime? GetGoalStartDate(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("StartDate", out var value) == true ? (DateTime?)value : null;
    }

    private DateTime? GetGoalEndDate(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("EndDate", out var value) == true ? (DateTime?)value : null;
    }

    private string GetGoalDescription(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("Description", out var value) == true ? value.ToString() ?? "" : "";
    }

    private string GetGoalMeasurement(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("Measurement", out var value) == true ? value.ToString() ?? "" : "";
    }

    private decimal GetGoalWeighting(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("Weighting", out var value) == true ? Convert.ToDecimal(value) : 0m;
    }

    private bool GetBooleanValue(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.TextValue == "true";
    }

    private DateTime? GetDateValue(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.DateValue;
    }

    private int GetNumericValue(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.NumericValue ?? 0;
    }

    // Setter methods for goal questions
    private void SetGoalStartDate(Guid questionId, DateTime? value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        if (value.HasValue) response.ComplexValue["StartDate"] = value.Value;
        else response.ComplexValue.Remove("StartDate");
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetGoalEndDate(Guid questionId, DateTime? value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        if (value.HasValue) response.ComplexValue["EndDate"] = value.Value;
        else response.ComplexValue.Remove("EndDate");
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetGoalDescription(Guid questionId, string value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue["Description"] = value ?? "";
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetGoalMeasurement(Guid questionId, string value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue["Measurement"] = value ?? "";
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetGoalWeighting(Guid questionId, decimal value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue["Weighting"] = value;
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetBooleanValue(Guid questionId, bool value)
    {
        var response = GetQuestionResponse(questionId);
        response.TextValue = value.ToString().ToLower();
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetDateValue(Guid questionId, DateTime? value)
    {
        var response = GetQuestionResponse(questionId);
        response.DateValue = value;
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetNumericValue(Guid questionId, int value)
    {
        var response = GetQuestionResponse(questionId);
        response.NumericValue = value;
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    // Navigation methods
    private void OnSectionChanged(int newIndex)
    {
        if (newIndex < currentSectionIndex || CanProceedFromCurrentSection())
        {
            currentSectionIndex = newIndex;
            StateHasChanged();
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Warning, 
                "Complete Section", 
                "Please complete all required questions in the current section.");
        }
    }

    private void PreviousSection()
    {
        if (currentSectionIndex > 0)
        {
            currentSectionIndex--;
            StateHasChanged();
        }
    }

    private void NextSection()
    {
        if (CanProceedFromCurrentSection() && currentSectionIndex < template!.Sections.Count - 1)
        {
            currentSectionIndex++;
            UpdateProgress();
            StateHasChanged();
        }
    }

    private bool CanProceedFromCurrentSection()
    {
        if (currentSection == null || !currentSection.IsRequired) return true;
        
        var sectionResponse = response.SectionResponses[currentSection.Id];
        
        foreach (var question in currentSection.Questions.Where(q => q.IsRequired))
        {
            if (!sectionResponse.QuestionResponses.TryGetValue(question.Id, out var questionResponse))
                return false;
                
            if (!IsQuestionAnswered(question, questionResponse))
                return false;
        }
        
        return true;
    }

    private bool IsQuestionAnswered(QuestionItem question, QuestionResponse questionResponse)
    {
        return question.Type switch
        {
            QuestionType.RatingQuestion => questionResponse.NumericValue > 0,
            QuestionType.TextQuestion => !string.IsNullOrWhiteSpace(questionResponse.TextValue),
            QuestionType.GoalQuestion => !string.IsNullOrWhiteSpace(GetGoalDescription(question.Id)),
            QuestionType.YesNoQuestion => !string.IsNullOrWhiteSpace(questionResponse.TextValue),
            QuestionType.DateQuestion => questionResponse.DateValue.HasValue,
            QuestionType.NumberQuestion => questionResponse.NumericValue.HasValue,
            _ => true
        };
    }

    private bool IsSectionCompleted(Guid sectionId)
    {
        if (!response.SectionResponses.TryGetValue(sectionId, out var sectionResponse))
            return false;
            
        var section = template!.Sections.First(s => s.Id == sectionId);
        
        return section.Questions.Where(q => q.IsRequired).All(q => 
            sectionResponse.QuestionResponses.TryGetValue(q.Id, out var qr) && 
            IsQuestionAnswered(q, qr));
    }

    private void UpdateProgress()
    {
        if (template == null) return;
        
        var totalQuestions = template.Sections.SelectMany(s => s.Questions.Where(q => q.IsRequired)).Count();
        var answeredQuestions = 0;
        
        foreach (var section in template.Sections)
        {
            if (response.SectionResponses.TryGetValue(section.Id, out var sectionResponse))
            {
                answeredQuestions += section.Questions.Where(q => q.IsRequired).Count(q => 
                    sectionResponse.QuestionResponses.TryGetValue(q.Id, out var qr) && 
                    IsQuestionAnswered(q, qr));
            }
        }
        
        response.ProgressPercentage = totalQuestions > 0 ? (int)(answeredQuestions * 100.0 / totalQuestions) : 0;
    }

    private bool CanSubmit()
    {
        return template!.Sections.All(s => IsSectionCompleted(s.Id));
    }

    private async Task SaveProgress()
    {
        // TODO: Save to database
        NotificationService.Notify(NotificationSeverity.Success, "Saved", "Your progress has been saved");
    }

    private async Task ShowReview()
    {
        // TODO: Show review dialog
        NotificationService.Notify(NotificationSeverity.Info, "Review", "Review functionality would appear here");
    }

    private async Task SubmitQuestionnaire()
    {
        if (!CanSubmit())
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Incomplete", template!.Settings.IncompleteMessage);
            return;
        }

        response.Status = ResponseStatus.Completed;
        response.CompletedDate = DateTime.Now;
        
        // TODO: Submit to database
        NotificationService.Notify(NotificationSeverity.Success, "Submitted", template.Settings.SuccessMessage);
        
        // Navigate to completion page or questionnaire list
        NavigationManager.NavigateTo("/questionnaire-completed");
    }
}