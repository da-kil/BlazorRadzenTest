@using Radzen
@using Radzen.Blazor

<RadzenCard Class="mb-3">
    <RadzenText TextStyle="TextStyle.H5" Class="mb-3">@Title</RadzenText>
    
    @foreach (var question in Questions)
    {
        <div class="mb-4">
            <RadzenText TextStyle="TextStyle.Body1" Class="mb-2">@question</RadzenText>
            <div class="d-flex align-items-center mb-2">
                <RadzenRating Value="@GetRating(question)" ValueChanged="@(value => SetRating(question, value))" Stars="4" Class="me-3" />
                <RadzenText TextStyle="TextStyle.Caption">Rating: @GetRating(question)/4</RadzenText>
            </div>
        </div>
    }
    
    <div class="mt-3">
        <RadzenText TextStyle="TextStyle.Body1" Class="mb-2">Additional Comments</RadzenText>
        <RadzenTextArea @bind-Value="@Comment" Rows="3" Placeholder="Enter your comments here..." Class="w-100" />
    </div>
</RadzenCard>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public List<string> Questions { get; set; } = new();
    [Parameter] public string Comment { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> CommentChanged { get; set; }
    [Parameter] public Dictionary<string, int> Ratings { get; set; } = new();
    [Parameter] public EventCallback<Dictionary<string, int>> RatingsChanged { get; set; }

    private int GetRating(string question)
    {
        return Ratings.TryGetValue(question, out var rating) ? rating : 0;
    }

    private async Task SetRating(string question, int value)
    {
        Ratings[question] = value;
        await RatingsChanged.InvokeAsync(Ratings);
    }
}