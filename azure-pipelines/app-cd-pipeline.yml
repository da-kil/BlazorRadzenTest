# Application CD Pipeline - Deploy to AKS using Helm
# Deploys containerized applications to AKS clusters

trigger: none  # Manual or triggered by CI pipeline completion

resources:
  pipelines:
    - pipeline: ci-pipeline
      source: 'BeachBreak-CI'
      trigger:
        branches:
          include:
            - main

variables:
  - group: beachbreak-dev-vars
  - group: beachbreak-prod-vars

stages:
  - stage: DeployDev
    displayName: 'Deploy to Development'
    jobs:
      - deployment: DeployToAKS
        displayName: 'Deploy to Dev AKS'
        environment: 'beachbreak-dev'
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          kubernetesNamespace: 'beachbreak'
          acrName: 'acrbeachbreakdev'
          imageTag: '$(resources.pipeline.ci-pipeline.runID)'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: HelmInstaller@1
                  displayName: 'Install Helm'
                  inputs:
                    helmVersionToInstall: 'latest'

                - task: AzureCLI@2
                  displayName: 'Get AKS Credentials'
                  inputs:
                    azureSubscription: 'AzureServiceConnection'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az aks get-credentials \
                        --resource-group $(AKS_RG_DEV) \
                        --name $(AKS_CLUSTER_DEV) \
                        --overwrite-existing

                - task: Kubernetes@1
                  displayName: 'Create Namespace'
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscriptionEndpoint: 'AzureServiceConnection'
                    azureResourceGroup: '$(AKS_RG_DEV)'
                    kubernetesCluster: '$(AKS_CLUSTER_DEV)'
                    command: 'apply'
                    arguments: '-f - <<EOF
                      apiVersion: v1
                      kind: Namespace
                      metadata:
                        name: $(kubernetesNamespace)
                      EOF'

                - task: HelmDeploy@0
                  displayName: 'Deploy CommandApi'
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: 'AzureServiceConnection'
                    azureResourceGroup: '$(AKS_RG_DEV)'
                    kubernetesCluster: '$(AKS_CLUSTER_DEV)'
                    namespace: '$(kubernetesNamespace)'
                    command: 'upgrade'
                    chartType: 'FilePath'
                    chartPath: '$(Pipeline.Workspace)/s/helm/charts/beachbreak-commandapi'
                    releaseName: 'commandapi'
                    valueFile: '$(Pipeline.Workspace)/s/helm/charts/beachbreak-commandapi/values-dev.yaml'
                    overrideValues: |
                      image.tag=$(imageTag)
                      image.repository=$(acrName).azurecr.io/beachbreak/commandapi
                      serviceAccount.annotations."azure\.workload\.identity/client-id"=$(COMMANDAPI_IDENTITY_CLIENT_ID)
                      keyVault.tenantId=$(AZURE_TENANT_ID)
                    install: true
                    waitForExecution: true
                    arguments: '--timeout 10m --create-namespace'

                - task: HelmDeploy@0
                  displayName: 'Deploy QueryApi'
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: 'AzureServiceConnection'
                    azureResourceGroup: '$(AKS_RG_DEV)'
                    kubernetesCluster: '$(AKS_CLUSTER_DEV)'
                    namespace: '$(kubernetesNamespace)'
                    command: 'upgrade'
                    chartType: 'FilePath'
                    chartPath: '$(Pipeline.Workspace)/s/helm/charts/beachbreak-queryapi'
                    releaseName: 'queryapi'
                    valueFile: '$(Pipeline.Workspace)/s/helm/charts/beachbreak-queryapi/values-dev.yaml'
                    overrideValues: |
                      image.tag=$(imageTag)
                      image.repository=$(acrName).azurecr.io/beachbreak/queryapi
                      serviceAccount.annotations."azure\.workload\.identity/client-id"=$(QUERYAPI_IDENTITY_CLIENT_ID)
                      keyVault.tenantId=$(AZURE_TENANT_ID)
                    install: true
                    waitForExecution: true

                - task: HelmDeploy@0
                  displayName: 'Deploy Frontend'
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: 'AzureServiceConnection'
                    azureResourceGroup: '$(AKS_RG_DEV)'
                    kubernetesCluster: '$(AKS_CLUSTER_DEV)'
                    namespace: '$(kubernetesNamespace)'
                    command: 'upgrade'
                    chartType: 'FilePath'
                    chartPath: '$(Pipeline.Workspace)/s/helm/charts/beachbreak-frontend'
                    releaseName: 'frontend'
                    valueFile: '$(Pipeline.Workspace)/s/helm/charts/beachbreak-frontend/values-dev.yaml'
                    overrideValues: |
                      image.tag=$(imageTag)
                      image.repository=$(acrName).azurecr.io/beachbreak/frontend
                      serviceAccount.annotations."azure\.workload\.identity/client-id"=$(FRONTEND_IDENTITY_CLIENT_ID)
                      keyVault.tenantId=$(AZURE_TENANT_ID)
                    install: true
                    waitForExecution: true

                - task: Kubernetes@1
                  displayName: 'Check Deployment Status'
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscriptionEndpoint: 'AzureServiceConnection'
                    azureResourceGroup: '$(AKS_RG_DEV)'
                    kubernetesCluster: '$(AKS_CLUSTER_DEV)'
                    namespace: '$(kubernetesNamespace)'
                    command: 'get'
                    arguments: 'pods,svc,ingress'

  - stage: DeployProduction
    displayName: 'Deploy to Production'
    dependsOn: DeployDev
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployToProduction
        displayName: 'Deploy to Production AKS'
        environment: 'beachbreak-production'
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          kubernetesNamespace: 'beachbreak'
          acrName: 'acrbeachbreakproduction'
          imageTag: '$(resources.pipeline.ci-pipeline.runID)'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: HelmInstaller@1
                  displayName: 'Install Helm'
                  inputs:
                    helmVersionToInstall: 'latest'

                - task: AzureCLI@2
                  displayName: 'Get AKS Credentials'
                  inputs:
                    azureSubscription: 'AzureServiceConnection'
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az aks get-credentials \
                        --resource-group $(AKS_RG_PROD) \
                        --name $(AKS_CLUSTER_PROD) \
                        --overwrite-existing

                - task: HelmDeploy@0
                  displayName: 'Deploy CommandApi (Production)'
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: 'AzureServiceConnection'
                    azureResourceGroup: '$(AKS_RG_PROD)'
                    kubernetesCluster: '$(AKS_CLUSTER_PROD)'
                    namespace: '$(kubernetesNamespace)'
                    command: 'upgrade'
                    chartType: 'FilePath'
                    chartPath: '$(Pipeline.Workspace)/s/helm/charts/beachbreak-commandapi'
                    releaseName: 'commandapi'
                    valueFile: '$(Pipeline.Workspace)/s/helm/charts/beachbreak-commandapi/values-production.yaml'
                    overrideValues: |
                      image.tag=$(imageTag)
                      image.repository=$(acrName).azurecr.io/beachbreak/commandapi
                      serviceAccount.annotations."azure\.workload\.identity/client-id"=$(COMMANDAPI_IDENTITY_CLIENT_ID)
                      keyVault.tenantId=$(AZURE_TENANT_ID)
                    install: true
                    waitForExecution: true
                    arguments: '--timeout 15m --create-namespace'

                - task: HelmDeploy@0
                  displayName: 'Deploy QueryApi (Production)'
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: 'AzureServiceConnection'
                    azureResourceGroup: '$(AKS_RG_PROD)'
                    kubernetesCluster: '$(AKS_CLUSTER_PROD)'
                    namespace: '$(kubernetesNamespace)'
                    command: 'upgrade'
                    chartType: 'FilePath'
                    chartPath: '$(Pipeline.Workspace)/s/helm/charts/beachbreak-queryapi'
                    releaseName: 'queryapi'
                    valueFile: '$(Pipeline.Workspace)/s/helm/charts/beachbreak-queryapi/values-production.yaml'
                    overrideValues: |
                      image.tag=$(imageTag)
                      image.repository=$(acrName).azurecr.io/beachbreak/queryapi
                      serviceAccount.annotations."azure\.workload\.identity/client-id"=$(QUERYAPI_IDENTITY_CLIENT_ID)
                      keyVault.tenantId=$(AZURE_TENANT_ID)
                    install: true
                    waitForExecution: true

                - task: HelmDeploy@0
                  displayName: 'Deploy Frontend (Production)'
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscription: 'AzureServiceConnection'
                    azureResourceGroup: '$(AKS_RG_PROD)'
                    kubernetesCluster: '$(AKS_CLUSTER_PROD)'
                    namespace: '$(kubernetesNamespace)'
                    command: 'upgrade'
                    chartType: 'FilePath'
                    chartPath: '$(Pipeline.Workspace)/s/helm/charts/beachbreak-frontend'
                    releaseName: 'frontend'
                    valueFile: '$(Pipeline.Workspace)/s/helm/charts/beachbreak-frontend/values-production.yaml'
                    overrideValues: |
                      image.tag=$(imageTag)
                      image.repository=$(acrName).azurecr.io/beachbreak/frontend
                      serviceAccount.annotations."azure\.workload\.identity/client-id"=$(FRONTEND_IDENTITY_CLIENT_ID)
                      keyVault.tenantId=$(AZURE_TENANT_ID)
                    install: true
                    waitForExecution: true

                - task: Kubernetes@1
                  displayName: 'Verify Production Deployment'
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscriptionEndpoint: 'AzureServiceConnection'
                    azureResourceGroup: '$(AKS_RG_PROD)'
                    kubernetesCluster: '$(AKS_CLUSTER_PROD)'
                    namespace: '$(kubernetesNamespace)'
                    command: 'get'
                    arguments: 'pods,svc,ingress -o wide'
