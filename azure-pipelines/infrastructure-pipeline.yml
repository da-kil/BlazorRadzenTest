# Infrastructure Pipeline - Terraform Deployment
# Manages Azure infrastructure using Terraform

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - terraform/**
    exclude:
      - terraform/**/*.md

pr:
  branches:
    include:
      - main
  paths:
    include:
      - terraform/**

variables:
  - group: terraform-backend-dev
  - group: terraform-backend-production
  - name: terraformVersion
    value: '1.9.5'
  - name: workingDirectory
    value: '$(System.DefaultWorkingDirectory)/terraform'

stages:
  - stage: ValidateDev
    displayName: 'Validate Dev Infrastructure'
    jobs:
      - job: TerraformValidate
        displayName: 'Terraform Validate & Plan (Dev)'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init (Dev)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(workingDirectory)/environments/dev'
              backendServiceArm: 'AzureServiceConnection'
              backendAzureRmResourceGroupName: '$(TF_STATE_RG_DEV)'
              backendAzureRmStorageAccountName: '$(TF_STATE_SA_DEV)'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'dev/beachbreak.terraform.tfstate'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Validate (Dev)'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(workingDirectory)/environments/dev'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan (Dev)'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(workingDirectory)/environments/dev'
              environmentServiceNameAzureRM: 'AzureServiceConnection'
              publishPlanResults: 'terraform-plan-dev'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Terraform Plan'
            inputs:
              targetPath: '$(workingDirectory)/environments/dev'
              artifact: 'terraform-plan-dev'
              publishLocation: 'pipeline'

  - stage: ApplyDev
    displayName: 'Deploy Dev Infrastructure'
    dependsOn: ValidateDev
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployInfrastructure
        displayName: 'Apply Terraform (Dev)'
        environment: 'dev-infrastructure'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifact: 'terraform-plan-dev'
                    path: '$(Pipeline.Workspace)/terraform-dev'

                - task: TerraformInstaller@1
                  displayName: 'Install Terraform'
                  inputs:
                    terraformVersion: $(terraformVersion)

                - task: TerraformTaskV4@4
                  displayName: 'Terraform Init (Dev)'
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-dev'
                    backendServiceArm: 'AzureServiceConnection'
                    backendAzureRmResourceGroupName: '$(TF_STATE_RG_DEV)'
                    backendAzureRmStorageAccountName: '$(TF_STATE_SA_DEV)'
                    backendAzureRmContainerName: 'tfstate'
                    backendAzureRmKey: 'dev/beachbreak.terraform.tfstate'

                - task: TerraformTaskV4@4
                  displayName: 'Terraform Apply (Dev)'
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-dev'
                    environmentServiceNameAzureRM: 'AzureServiceConnection'
                    commandOptions: '-auto-approve'

                - task: TerraformTaskV4@4
                  displayName: 'Terraform Output (Dev)'
                  inputs:
                    provider: 'azurerm'
                    command: 'output'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-dev'
                    environmentServiceNameAzureRM: 'AzureServiceConnection'

  - stage: ValidateProduction
    displayName: 'Validate Production Infrastructure'
    dependsOn: ApplyDev
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - job: TerraformValidate
        displayName: 'Terraform Validate & Plan (Production)'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@1
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(terraformVersion)

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init (Production)'
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(workingDirectory)/environments/production'
              backendServiceArm: 'AzureServiceConnection'
              backendAzureRmResourceGroupName: '$(TF_STATE_RG_PROD)'
              backendAzureRmStorageAccountName: '$(TF_STATE_SA_PROD)'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'production/beachbreak.terraform.tfstate'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan (Production)'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(workingDirectory)/environments/production'
              environmentServiceNameAzureRM: 'AzureServiceConnection'
              publishPlanResults: 'terraform-plan-production'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Terraform Plan'
            inputs:
              targetPath: '$(workingDirectory)/environments/production'
              artifact: 'terraform-plan-production'
              publishLocation: 'pipeline'

  - stage: ApplyProduction
    displayName: 'Deploy Production Infrastructure'
    dependsOn: ValidateProduction
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployInfrastructure
        displayName: 'Apply Terraform (Production)'
        environment: 'production-infrastructure'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                    artifact: 'terraform-plan-production'
                    path: '$(Pipeline.Workspace)/terraform-production'

                - task: TerraformInstaller@1
                  displayName: 'Install Terraform'
                  inputs:
                    terraformVersion: $(terraformVersion)

                - task: TerraformTaskV4@4
                  displayName: 'Terraform Init (Production)'
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-production'
                    backendServiceArm: 'AzureServiceConnection'
                    backendAzureRmResourceGroupName: '$(TF_STATE_RG_PROD)'
                    backendAzureRmStorageAccountName: '$(TF_STATE_SA_PROD)'
                    backendAzureRmContainerName: 'tfstate'
                    backendAzureRmKey: 'production/beachbreak.terraform.tfstate'

                - task: TerraformTaskV4@4
                  displayName: 'Terraform Apply (Production)'
                  inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-production'
                    environmentServiceNameAzureRM: 'AzureServiceConnection'
                    commandOptions: '-auto-approve'

                - task: TerraformTaskV4@4
                  displayName: 'Terraform Output (Production)'
                  inputs:
                    provider: 'azurerm'
                    command: 'output'
                    workingDirectory: '$(Pipeline.Workspace)/terraform-production'
                    environmentServiceNameAzureRM: 'AzureServiceConnection'
