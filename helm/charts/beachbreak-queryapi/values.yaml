# Default values for beachbreak-queryapi
replicaCount: 3

image:
  repository: acrbeachbreakdev.azurecr.io/beachbreak/queryapi
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations:
    azure.workload.identity/client-id: ""  # Populated by deployment
  name: "queryapi"

podAnnotations: {}

podLabels:
  app: queryapi
  component: backend
  tier: api

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false

service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  annotations: {}

ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "200"  # Higher for read-heavy
  hosts:
    - host: queryapi.beachbreak-dev.ti8m.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: queryapi-tls
      hosts:
        - queryapi.beachbreak-dev.ti8m.com

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 250m
    memory: 512Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 15
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Liveness probe configuration
livenessProbe:
  httpGet:
    path: /health/live
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Readiness probe configuration
readinessProbe:
  httpGet:
    path: /health/ready
    port: 8080
  initialDelaySeconds: 15
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Startup probe configuration
startupProbe:
  httpGet:
    path: /health/startup
    port: 8080
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 30

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Node affinity
nodeSelector:
  nodepool-type: application

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - queryapi
          topologyKey: kubernetes.io/hostname

# Environment variables
env:
  - name: ASPNETCORE_ENVIRONMENT
    value: "Production"
  - name: ASPNETCORE_URLS
    value: "http://+:8080"

# Azure Key Vault integration
keyVault:
  enabled: true
  name: "kv-beachbreak-dev"
  tenantId: ""  # Populated by deployment
  secrets:
    - secretName: PostgreSQL-ReadModels-ConnectionString
      envVarName: ConnectionStrings__ReadModels
    - secretName: ApplicationInsights-ConnectionString
      envVarName: ApplicationInsights__ConnectionString

# Application Insights
applicationInsights:
  enabled: true

# PostgreSQL configuration
postgresql:
  enabled: true
  # Connection string comes from Key Vault

# Network Policy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: beachbreak
      - podSelector:
          matchLabels:
            app: frontend
  egress:
    - to:
      - namespaceSelector: {}
      ports:
      - protocol: TCP
        port: 443  # HTTPS
      - protocol: TCP
        port: 5432  # PostgreSQL
