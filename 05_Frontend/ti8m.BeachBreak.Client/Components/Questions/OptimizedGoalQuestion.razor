@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Components.Shared
@inherits OptimizedComponentBase

<RadzenCard Class="goal-achievement-question">
    <RadzenText TextStyle="TextStyle.H5" Class="text-primary mb-3">
        <RadzenIcon Icon="track_changes" Class="me-2" />
        @Question.Title
        @if (Question.IsRequired) { <span class="text-danger">*</span> }
    </RadzenText>

    @if (!string.IsNullOrWhiteSpace(Question.Description))
    {
        <RadzenText TextStyle="TextStyle.Body1" Class="mb-4">@Question.Description</RadzenText>
    }

    <RadzenCard Class="goal-card mb-3 p-3 border">
        <div class="d-flex justify-content-between align-items-start mb-3">
            <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold">
                Goal Assessment
            </RadzenText>
        </div>

        <div class="mb-3">
            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Goal Description</RadzenText>
            @if (!IsReadOnly)
            {
                <RadzenTextArea Value="@GetGoalDescription()"
                              ValueChanged="@SetGoalDescription"
                              Placeholder="Describe the goal that was set..."
                              Rows="3"
                              Class="w-100"
                              Disabled="@IsReadOnly" />
            }
            else if (!string.IsNullOrEmpty(GetGoalDescription()))
            {
                <div class="readonly-text p-3 bg-light rounded">
                    @GetGoalDescription()
                </div>
            }
        </div>

        <RadzenRow Gap="1rem">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Achievement Percentage</RadzenText>
                <div class="d-flex align-items-center">
                    @if (!IsReadOnly)
                    {
                        <RadzenNumeric TValue="int"
                                     Value="@GetGoalAchievementPercentage()"
                                     ValueChanged="@SetGoalAchievementPercentage"
                                     Min="0"
                                     Max="100"
                                     Step="5"
                                     Format="0"
                                     Class="flex-grow-1 me-2"
                                     Disabled="@IsReadOnly" />
                    }
                    else
                    {
                        <div class="readonly-percentage p-2 bg-light rounded flex-grow-1 me-2">
                            @GetGoalAchievementPercentage()
                        </div>
                    }
                    <RadzenText TextStyle="TextStyle.Body1">%</RadzenText>
                </div>
                <RadzenProgressBar Value="@GetGoalAchievementPercentage()"
                                 Max="100"
                                 Class="mt-2"
                                 ProgressBarStyle="@GetProgressStyle(GetGoalAchievementPercentage())" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Achievement Status</RadzenText>
                <div class="status-indicator p-2 rounded" style="@GetStatusStyle(GetGoalAchievementPercentage())">
                    <RadzenIcon Icon="@GetStatusIcon(GetGoalAchievementPercentage())" Class="me-2" />
                    <RadzenText TextStyle="TextStyle.Body2" Class="fw-bold">
                        @GetStatusText(GetGoalAchievementPercentage())
                    </RadzenText>
                </div>
            </RadzenColumn>
        </RadzenRow>

        <div class="mt-3">
            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Reasoning/Justification</RadzenText>
            @if (!IsReadOnly)
            {
                <RadzenTextArea Value="@GetGoalJustification()"
                              ValueChanged="@SetGoalJustification"
                              Placeholder="Explain your achievement percentage. What factors contributed to your success or challenges?"
                              Rows="4"
                              Class="w-100"
                              Disabled="@IsReadOnly" />
            }
            else if (!string.IsNullOrEmpty(GetGoalJustification()))
            {
                <div class="readonly-text p-3 bg-light rounded">
                    @GetGoalJustification()
                </div>
            }
        </div>
    </RadzenCard>
</RadzenCard>

@code {
    [Parameter, EditorRequired] public QuestionItem Question { get; set; } = default!;
    [Parameter, EditorRequired] public QuestionResponse Response { get; set; } = default!;
    [Parameter] public EventCallback<QuestionResponse> OnResponseChanged { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;

    protected override bool HasStateChanged()
    {
        return HasParameterChanged(nameof(Response.ComplexValue), Response.ComplexValue?.Count ?? 0);
    }

    private string GetGoalDescription()
    {
        return Response.ComplexValue?.TryGetValue("Description", out var value) == true
            ? value.ToString() ?? ""
            : "";
    }

    private int GetGoalAchievementPercentage()
    {
        return Response.ComplexValue?.TryGetValue("AchievementPercentage", out var value) == true
            ? Convert.ToInt32(value)
            : 0;
    }

    private string GetGoalJustification()
    {
        return Response.ComplexValue?.TryGetValue("Justification", out var value) == true
            ? value.ToString() ?? ""
            : "";
    }

    private async Task SetGoalDescription(string value)
    {
        if (IsReadOnly) return;

        Response.ComplexValue ??= new Dictionary<string, object>();
        Response.ComplexValue["Description"] = value ?? "";
        Response.LastModified = DateTime.Now;

        await NotifyStateChangedDebounced(300);
        await NotifyResponseChanged();
    }

    private async Task SetGoalAchievementPercentage(int value)
    {
        if (IsReadOnly) return;

        Response.ComplexValue ??= new Dictionary<string, object>();
        Response.ComplexValue["AchievementPercentage"] = Math.Clamp(value, 0, 100);
        Response.LastModified = DateTime.Now;

        await NotifyResponseChanged();
    }

    private async Task SetGoalJustification(string value)
    {
        if (IsReadOnly) return;

        Response.ComplexValue ??= new Dictionary<string, object>();
        Response.ComplexValue["Justification"] = value ?? "";
        Response.LastModified = DateTime.Now;

        await NotifyStateChangedDebounced(300);
        await NotifyResponseChanged();
    }

    private async Task NotifyResponseChanged()
    {
        if (OnResponseChanged.HasDelegate)
        {
            await OnResponseChanged.InvokeAsync(Response);
        }
    }

    private ProgressBarStyle GetProgressStyle(int percentage)
    {
        return percentage switch
        {
            >= 90 => ProgressBarStyle.Success,
            >= 70 => ProgressBarStyle.Info,
            >= 50 => ProgressBarStyle.Warning,
            _ => ProgressBarStyle.Danger
        };
    }

    private string GetStatusStyle(int percentage)
    {
        return percentage switch
        {
            >= 90 => "background-color: var(--light-green, #d4edda); border: 1px solid var(--success-color, #28a745); color: var(--dark-green, #155724);",
            >= 70 => "background-color: var(--light-blue, #d1ecf1); border: 1px solid var(--info-color, #17a2b8); color: var(--dark-blue, #0c5460);",
            >= 50 => "background-color: var(--light-yellow, #fff3cd); border: 1px solid var(--warning-color, #ffc107); color: var(--dark-yellow, #856404);",
            _ => "background-color: var(--light-red, #f8d7da); border: 1px solid var(--danger-color, #dc3545); color: var(--dark-red, #721c24);"
        };
    }

    private string GetStatusIcon(int percentage)
    {
        return percentage switch
        {
            >= 90 => "check_circle",
            >= 70 => "task_alt",
            >= 50 => "warning",
            _ => "error"
        };
    }

    private string GetStatusText(int percentage)
    {
        return percentage switch
        {
            >= 90 => "Excellent Achievement",
            >= 70 => "Good Achievement",
            >= 50 => "Partial Achievement",
            _ => "Below Expectations"
        };
    }
}

<style>
.goal-card {
    transition: all 0.2s ease;
    border-color: var(--border-light, #e2e8f0) !important;
}

.goal-card:hover {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
}

.status-indicator {
    border-radius: 6px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem;
    transition: all 0.2s ease;
}

.readonly-text {
    white-space: pre-wrap;
    word-wrap: break-word;
    line-height: 1.6;
    min-height: 60px;
}

.readonly-percentage {
    text-align: center;
    font-weight: 600;
    line-height: 2;
}

/* Performance optimization */
.goal-card[data-updating="true"] {
    opacity: 0.8;
}

/* Progress bar animations */
.rz-progressbar {
    transition: all 0.3s ease;
}
</style>