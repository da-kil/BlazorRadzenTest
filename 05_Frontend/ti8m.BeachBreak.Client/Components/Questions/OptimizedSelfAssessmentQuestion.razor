@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Components.Shared
@inherits OptimizedComponentBase

<RadzenCard Class="self-assessment-question">
    <RadzenText TextStyle="TextStyle.H5" Class="text-primary mb-3">
        <RadzenIcon Icon="self_improvement" Class="me-2" />
        @Question.Title
        @if (Question.IsRequired) { <span class="text-danger">*</span> }
    </RadzenText>

    @if (!string.IsNullOrWhiteSpace(Question.Description))
    {
        <RadzenText TextStyle="TextStyle.Body1" Class="mb-4">@Question.Description</RadzenText>
    }

    <RadzenAlert AlertStyle="AlertStyle.Info" Class="mb-4" ShowIcon="true">
        <RadzenText TextStyle="TextStyle.Body2">
            <strong>Rating Scale:</strong> @GetRatingScaleDescription()
        </RadzenText>
    </RadzenAlert>

    <div class="competencies-container">
        @if (!competencies.Any())
        {
            <RadzenAlert AlertStyle="AlertStyle.Warning" Variant="Variant.Flat" Class="mb-3">
                <RadzenText TextStyle="TextStyle.Body2">
                    <strong>Configuration Error:</strong> No competencies are defined for this question. Please check the question configuration.
                </RadzenText>
            </RadzenAlert>
        }
        else
        {
            @foreach (var competency in competencies)
            {
                var competencyKey = competency.Key;
                var currentRating = GetCompetencyRating(competencyKey);
                var currentComment = GetCompetencyComment(competencyKey);
                var ratingText = GetRatingText(currentRating);

                <div class="competency-card mb-3 p-3 border rounded" @key="@competencyKey">
                    <RadzenRow>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold mb-2">
                                @competency.Title
                            </RadzenText>
                            <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-2">
                                @competency.Description
                            </RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4" Class="text-end">
                            <div class="rating-section">
                                <RadzenText TextStyle="TextStyle.Caption" Class="mb-1">Rate your satisfaction:</RadzenText>
                                <RadzenRating Value="@currentRating"
                                            ValueChanged="@((int value) => SetCompetencyRating(competencyKey, value))"
                                            Stars="@ratingScale"
                                            Disabled="@IsReadOnly"
                                            Class="mb-2" />
                                <RadzenText TextStyle="TextStyle.Caption" Class="text-primary">
                                    @ratingText
                                </RadzenText>
                            </div>
                        </RadzenColumn>
                    </RadzenRow>

                    @if (!IsReadOnly)
                    {
                        <RadzenTextArea Value="@currentComment"
                                      ValueChanged="@((string value) => SetCompetencyComment(competencyKey, value))"
                                      Placeholder="Optional: Add your comments here..."
                                      Rows="2"
                                      Class="w-100 mt-2"
                                      Disabled="@IsReadOnly" />
                    }
                    else if (!string.IsNullOrEmpty(currentComment))
                    {
                        <div class="mt-2 p-2 bg-light rounded">
                            <small class="text-muted d-block mb-1">Comment:</small>
                            <span>@currentComment</span>
                        </div>
                    }
                </div>
            }
        }
    </div>
</RadzenCard>

@code {
    [Parameter, EditorRequired] public QuestionItem Question { get; set; } = default!;
    [Parameter, EditorRequired] public QuestionResponse Response { get; set; } = default!;
    [Parameter] public EventCallback<QuestionResponse> OnResponseChanged { get; set; }
    [Parameter] public bool IsReadOnly { get; set; } = false;

    private List<CompetencyDefinition> competencies = new();
    private int ratingScale = 4;
    private string scaleLowLabel = "Poor";
    private string scaleHighLabel = "Excellent";

    protected override void OnInitialized()
    {
        // Always load configuration on initialization
        // This ensures the component works correctly when used in dialogs or other contexts
        // where parameter change detection might not work as expected
        LoadConfiguration();

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (HasParameterChanged(nameof(Question), Question))
        {
            LoadConfiguration();
        }
    }

    private void LoadConfiguration()
    {
        competencies = GetCompetenciesFromConfiguration();
        ratingScale = GetRatingScaleFromConfiguration();
        scaleLowLabel = GetScaleLowLabelFromConfiguration();
        scaleHighLabel = GetScaleHighLabelFromConfiguration();
    }

    protected override bool HasStateChanged()
    {
        return HasParameterChanged(nameof(Response.ComplexValue), Response.ComplexValue?.Count ?? 0) ||
               HasParameterChanged(nameof(competencies), competencies.Count);
    }

    private List<CompetencyDefinition> GetCompetenciesFromConfiguration()
    {
        if (Question.Configuration?.ContainsKey("Competencies") != true)
        {
            return new List<CompetencyDefinition>();
        }

        var competenciesValue = Question.Configuration["Competencies"];

        // Handle direct List<CompetencyDefinition>
        if (competenciesValue is List<CompetencyDefinition> comps)
        {
            return comps;
        }

        // Handle JsonElement (from API deserialization)
        if (competenciesValue is System.Text.Json.JsonElement jsonElement)
        {
            try
            {
                var options = new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    Converters = { new System.Text.Json.Serialization.JsonStringEnumConverter() }
                };

                var competencies = System.Text.Json.JsonSerializer.Deserialize<List<CompetencyDefinition>>(
                    jsonElement.GetRawText(),
                    options
                );

                if (competencies != null && competencies.Any())
                {
                    return competencies;
                }
            }
            catch { /* Skip deserialization errors */ }
        }

        // Handle IEnumerable<object> or other list types
        if (competenciesValue is IEnumerable<object> enumerable)
        {
            var result = new List<CompetencyDefinition>();
            foreach (var item in enumerable)
            {
                if (item is CompetencyDefinition compDef)
                {
                    result.Add(compDef);
                }
                else if (item is System.Text.Json.JsonElement itemJson)
                {
                    try
                    {
                        var deserializedComp = System.Text.Json.JsonSerializer.Deserialize<CompetencyDefinition>(
                            itemJson.GetRawText(),
                            new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }
                        );
                        if (deserializedComp != null) result.Add(deserializedComp);
                    }
                    catch { /* Skip invalid items */ }
                }
            }
            if (result.Any()) return result;
        }

        return new List<CompetencyDefinition>();
    }

    private int GetRatingScaleFromConfiguration()
    {
        if (Question.Configuration?.ContainsKey("RatingScale") == true &&
            int.TryParse(Question.Configuration["RatingScale"].ToString(), out int scale))
        {
            return scale;
        }
        return 4;
    }

    private string GetScaleLowLabelFromConfiguration()
    {
        return Question.Configuration?.TryGetValue("ScaleLowLabel", out var value) == true
            ? value.ToString() ?? "Poor"
            : "Poor";
    }

    private string GetScaleHighLabelFromConfiguration()
    {
        return Question.Configuration?.TryGetValue("ScaleHighLabel", out var value) == true
            ? value.ToString() ?? "Excellent"
            : "Excellent";
    }

    private string GetRatingScaleDescription()
    {
        return $"1 ({scaleLowLabel}) - {ratingScale} ({scaleHighLabel})";
    }

    private int GetCompetencyRating(string competencyKey)
    {
        if (Response.ComplexValue?.TryGetValue($"rating_{competencyKey}", out var value) == true)
        {
            // Handle JsonElement from API deserialization
            if (value is System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.Number
                    ? jsonElement.GetInt32()
                    : 0;
            }

            // Handle direct int value
            return Convert.ToInt32(value);
        }

        return 0;
    }

    private string GetCompetencyComment(string competencyKey)
    {
        if (Response.ComplexValue?.TryGetValue($"comment_{competencyKey}", out var value) == true)
        {
            // Handle JsonElement from API deserialization
            if (value is System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.ValueKind == System.Text.Json.JsonValueKind.String
                    ? jsonElement.GetString() ?? ""
                    : "";
            }

            // Handle direct string value
            return value.ToString() ?? "";
        }

        return "";
    }

    private async Task SetCompetencyRating(string competencyKey, int value)
    {
        if (IsReadOnly) return;

        Response.ComplexValue ??= new Dictionary<string, object>();
        Response.ComplexValue[$"rating_{competencyKey}"] = value;
        Response.LastModified = DateTime.Now;

        await NotifyResponseChanged();
    }

    private async Task SetCompetencyComment(string competencyKey, string value)
    {
        if (IsReadOnly) return;

        Response.ComplexValue ??= new Dictionary<string, object>();
        Response.ComplexValue[$"comment_{competencyKey}"] = value ?? "";
        Response.LastModified = DateTime.Now;

        // Debounce text input changes
        await NotifyStateChangedDebounced(300);
        await NotifyResponseChanged();
    }

    private async Task NotifyResponseChanged()
    {
        if (OnResponseChanged.HasDelegate)
        {
            await OnResponseChanged.InvokeAsync(Response);
        }
    }

    private string GetRatingText(int rating)
    {
        if (rating == 0) return "Not rated";

        var percentage = (double)rating / ratingScale;
        return percentage switch
        {
            >= 0.75 => scaleHighLabel,
            >= 0.5 => "Good",
            >= 0.25 => "Fair",
            _ => scaleLowLabel
        };
    }
}

<style>
.competency-card {
    transition: all 0.2s ease;
    border-color: var(--border-light, #e2e8f0) !important;
}

.competency-card:hover {
    border-color: var(--primary-color, #2563eb) !important;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.rating-section {
    min-width: 200px;
}

/* Optimize re-renders by hiding rating animations */
.competency-card[data-updating="true"] .rating-section {
    opacity: 0.7;
}
</style>