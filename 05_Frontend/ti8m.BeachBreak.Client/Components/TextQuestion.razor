@using Radzen
@using Radzen.Blazor
@implements IDisposable

<style>
    .text-question-section {
        --primary-color: #2563eb;
        --text-color: #374151;
        --text-muted: #6b7280;
        --border-light: #f3f4f6;
        --focus-ring: rgba(37, 99, 235, 0.1);

        margin-bottom: 3rem;
    }

    .section-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--text-color);
        margin: 0 0 2rem 0;
        letter-spacing: -0.025em;
    }

    .questions-list {
        display: flex;
        flex-direction: column;
        gap: 2.5rem;
    }

    .question-block {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .question-label {
        font-size: 1rem;
        font-weight: 500;
        color: var(--text-color);
        line-height: 1.5;
        counter-increment: question;
    }

    .question-label::before {
        content: counter(question) ". ";
        color: var(--primary-color);
        font-weight: 600;
    }

    .answer-field {
        border: 1px solid var(--border-light);
        border-radius: 4px;
        padding: 0.875rem;
        font-size: 0.95rem;
        line-height: 1.6;
        background: white;
        transition: border-color 0.15s ease;
        resize: vertical;
        min-height: 100px;
        font-family: inherit;
    }

    .answer-field:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px var(--focus-ring);
        outline: none;
    }

    .answer-field:not(:placeholder-shown) {
        border-color: var(--primary-color);
    }

    .answer-field::placeholder {
        color: var(--text-muted);
    }

    .auto-save-status {
        position: fixed;
        top: 1rem;
        right: 1rem;
        background: #059669;
        color: white;
        padding: 0.375rem 0.75rem;
        border-radius: 4px;
        font-size: 0.875rem;
        font-weight: 500;
        opacity: 0;
        transform: translateY(-8px);
        transition: all 0.2s ease;
        z-index: 1000;
    }

    .auto-save-status.visible {
        opacity: 1;
        transform: translateY(0);
    }

    .questions-list {
        counter-reset: question;
    }

    @@media (max-width: 768px) {
        .section-title {
            font-size: 1.25rem;
            margin-bottom: 1.5rem;
        }

        .questions-list {
            gap: 2rem;
        }

        .answer-field {
            padding: 0.75rem;
            min-height: 80px;
        }
    }
</style>

<div class="text-question-section">
    <div class="auto-save-status @(ShowAutoSave ? "visible" : "")">
        Saved
    </div>

    <h2 class="section-title">@Title</h2>

    <div class="questions-list">
        @for (int i = 0; i < Questions.Count; i++)
        {
            var questionIndex = i;
            var question = Questions[questionIndex];
            var answer = GetAnswer(question);

            <div class="question-block">
                <label class="question-label">@question</label>
                <RadzenTextArea Value="@answer"
                              ValueChanged="@(value => UpdateAnswerWithSave(question, value))"
                              Placeholder="Your response..."
                              Class="answer-field" />
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public List<string> Questions { get; set; } = new();
    [Parameter] public Dictionary<string, string> Answers { get; set; } = new();
    [Parameter] public EventCallback<Dictionary<string, string>> AnswersChanged { get; set; }

    private bool ShowAutoSave = false;
    private Timer? autoSaveTimer;

    private string GetAnswer(string question)
    {
        return Answers.TryGetValue(question, out var answer) ? answer : string.Empty;
    }

    private async Task UpdateAnswer(string question, string value)
    {
        Answers[question] = value ?? string.Empty;
        await AnswersChanged.InvokeAsync(Answers);
    }

    private async Task UpdateAnswerWithSave(string question, string value)
    {
        await UpdateAnswer(question, value);
        ShowAutoSaveIndicator();
    }

    private void ShowAutoSaveIndicator()
    {
        ShowAutoSave = true;
        StateHasChanged();

        // Clear existing timer
        autoSaveTimer?.Dispose();

        // Set new timer to hide indicator after 2 seconds
        autoSaveTimer = new Timer(_ => {
            ShowAutoSave = false;
            InvokeAsync(StateHasChanged);
        }, null, 2000, Timeout.Infinite);
    }

    public void Dispose()
    {
        autoSaveTimer?.Dispose();
    }
}