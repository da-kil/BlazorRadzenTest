@using Radzen
@using Radzen.Blazor
@implements IDisposable

<style>
    .text-question-card {
        --primary-color: #007bff;
        --border-color: #e9ecef;
        --hover-bg: #f8f9fa;
        --text-muted: #6c757d;
        --focus-color: rgba(0, 123, 255, 0.25);

        border-radius: 1rem;
        background: white;
        border: 1px solid var(--border-color);
        transition: all 0.2s ease-in-out;
        position: relative;
        overflow: hidden;
    }

    .text-question-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 3px;
        background: linear-gradient(90deg, var(--primary-color), #20c997);
    }

    .text-question-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    }

    .card-header {
        background: linear-gradient(135deg, #fafafa 0%, #f5f5f5 100%);
        padding: 1.5rem;
        border-bottom: 1px solid var(--border-color);
    }

    .question-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--rz-text-color);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .questions-container {
        padding: 1.5rem;
    }

    .question-item {
        background: #fafafa;
        border-radius: 0.75rem;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        border: 1px solid var(--border-color);
        transition: all 0.15s ease-in-out;
    }

    .question-item:hover {
        background: #f0f0f0;
        border-color: var(--primary-color);
    }

    .question-text {
        font-weight: 500;
        color: var(--rz-text-color);
        margin-bottom: 1rem;
        line-height: 1.5;
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
    }

    .question-number {
        background: var(--primary-color);
        color: white;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
        font-weight: 600;
        flex-shrink: 0;
        margin-top: 2px;
    }

    .answer-textarea {
        border: 2px solid var(--border-color);
        border-radius: 0.5rem;
        padding: 1rem;
        font-size: 0.95rem;
        line-height: 1.6;
        transition: all 0.15s ease-in-out;
        resize: vertical;
        min-height: 120px;
    }

    .answer-textarea:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.2rem var(--focus-color);
        outline: none;
    }

    .answer-textarea:not(:placeholder-shown) {
        border-color: #28a745;
        background: rgba(40, 167, 69, 0.02);
    }

    .char-counter {
        text-align: right;
        font-size: 0.75rem;
        color: var(--text-muted);
        margin-top: 0.5rem;
    }

    .auto-save-indicator {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: #28a745;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 1rem;
        font-size: 0.7rem;
        font-weight: 500;
        opacity: 0;
        transform: translateY(-10px);
        transition: all 0.3s ease-in-out;
    }

    .auto-save-indicator.show {
        opacity: 1;
        transform: translateY(0);
    }

    .progress-indicator {
        background: #e9ecef;
        height: 6px;
        border-radius: 3px;
        margin: 1rem 1.5rem 0;
        overflow: hidden;
    }

    .progress-bar {
        height: 100%;
        background: linear-gradient(90deg, var(--primary-color), #28a745);
        border-radius: 3px;
        transition: width 0.3s ease-in-out;
    }

    @@media (max-width: 768px) {
        .question-item {
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .questions-container {
            padding: 1rem;
        }

        .card-header {
            padding: 1rem;
        }
    }
</style>

<div class="text-question-card mb-4">
    <div class="auto-save-indicator @(ShowAutoSave ? "show" : "")">
        <RadzenIcon Icon="check_circle" Style="font-size: 0.7rem;" /> Auto-saved
    </div>

    <div class="card-header">
        <h3 class="question-title">
            <RadzenIcon Icon="psychology" Style="color: var(--primary-color);" />
            @Title
        </h3>
    </div>

    <div class="questions-container">
        @for (int i = 0; i < Questions.Count; i++)
        {
            var questionIndex = i;
            var question = Questions[questionIndex];
            var answer = GetAnswer(question);

            <div class="question-item">
                <div class="question-text">
                    <div class="question-number">@(questionIndex + 1)</div>
                    <div>@question</div>
                </div>
                <RadzenTextArea Value="@answer"
                              ValueChanged="@(value => UpdateAnswerWithSave(question, value))"
                              Rows="6"
                              Placeholder="Share your thoughts and provide detailed answers here..."
                              Class="w-100 answer-textarea" />
                <div class="char-counter">
                    @(answer?.Length ?? 0) characters
                </div>
            </div>
        }
    </div>

    @if (Questions.Count > 0)
    {
        var completedAnswers = Answers.Count(a => !string.IsNullOrWhiteSpace(a.Value));
        var progressPercentage = (double)completedAnswers / Questions.Count * 100;

        <div class="progress-indicator">
            <div class="progress-bar" style="width: @(progressPercentage)%"></div>
        </div>
    }
</div>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public List<string> Questions { get; set; } = new();
    [Parameter] public Dictionary<string, string> Answers { get; set; } = new();
    [Parameter] public EventCallback<Dictionary<string, string>> AnswersChanged { get; set; }

    private bool ShowAutoSave = false;
    private Timer? autoSaveTimer;

    private string GetAnswer(string question)
    {
        return Answers.TryGetValue(question, out var answer) ? answer : string.Empty;
    }

    private async Task UpdateAnswer(string question, string value)
    {
        Answers[question] = value ?? string.Empty;
        await AnswersChanged.InvokeAsync(Answers);
    }

    private async Task UpdateAnswerWithSave(string question, string value)
    {
        await UpdateAnswer(question, value);
        ShowAutoSaveIndicator();
    }

    private void ShowAutoSaveIndicator()
    {
        ShowAutoSave = true;
        StateHasChanged();

        // Clear existing timer
        autoSaveTimer?.Dispose();

        // Set new timer to hide indicator after 2 seconds
        autoSaveTimer = new Timer(_ => {
            ShowAutoSave = false;
            InvokeAsync(StateHasChanged);
        }, null, 2000, Timeout.Infinite);
    }

    public void Dispose()
    {
        autoSaveTimer?.Dispose();
    }
}