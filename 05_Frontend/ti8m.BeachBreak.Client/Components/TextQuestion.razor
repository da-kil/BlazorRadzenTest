@using Radzen
@using Radzen.Blazor
@inherits ti8m.BeachBreak.Client.Components.Shared.AutoSaveComponentBase

<style>
    .text-question-section {
        margin-bottom: 3rem;
    }

    .section-title {
        font-size: var(--font-size-2xl);
        font-weight: var(--font-weight-bold);
        color: var(--text-color);
        margin: 0 0 var(--spacing-2xl) 0;
        letter-spacing: -0.025em;
    }

    .questions-list {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-2xl);
    }

    .question-block {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-md);
    }

    .question-label {
        font-size: var(--font-size-base);
        font-weight: var(--font-weight-medium);
        color: var(--text-color);
        line-height: var(--line-height-normal);
        counter-increment: question;
    }

    .question-label::before {
        content: counter(question) ". ";
        color: var(--primary-color);
        font-weight: 600;
    }

    .answer-field {
        border: var(--input-border-width) solid var(--border-light);
        border-radius: var(--input-border-radius);
        padding: var(--input-padding);
        font-size: var(--font-size-sm);
        line-height: var(--line-height-relaxed);
        background: var(--background-color);
        transition: var(--transition-fast);
        resize: vertical;
        min-height: 100px;
        font-family: var(--font-family-base);
    }

    .answer-field:focus {
        border-color: var(--focus-border);
        box-shadow: 0 0 0 3px var(--focus-ring);
        outline: none;
    }

    .answer-field:not(:placeholder-shown) {
        border-color: var(--primary-color);
    }

    .answer-field::placeholder {
        color: var(--text-muted);
    }


    .questions-list {
        counter-reset: question;
    }

    @@media (max-width: 768px) {
        .section-title {
            font-size: var(--font-size-xl);
            margin-bottom: var(--spacing-lg);
        }

        .questions-list {
            gap: 2rem;
        }

        .answer-field {
            padding: 0.75rem;
            min-height: 80px;
        }
    }

    .auto-save-indicator {
        position: fixed;
        top: var(--spacing-md);
        right: var(--spacing-md);
        background: var(--success-color);
        color: white;
        padding: var(--spacing-sm) var(--spacing-md);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-lg);
        font-size: var(--font-size-sm);
        font-weight: var(--font-weight-medium);
        display: flex;
        align-items: center;
        gap: var(--spacing-xs);
        z-index: var(--z-notification);
        animation: fadeInOut 2s ease-in-out;
    }

    @@keyframes fadeInOut {
        0% {
            opacity: 0;
            transform: translateX(100%);
        }
        10%, 85% {
            opacity: 1;
            transform: translateX(0);
        }
        100% {
            opacity: 0;
            transform: translateX(100%);
        }
    }
</style>

@if (ShowAutoSave)
{
    <div class="auto-save-indicator">
        <RadzenIcon Icon="cloud_done" />
        <span>Auto-saved</span>
    </div>
}

<div class="text-question-section">
    <h2 class="section-title">@Title</h2>

    <div class="questions-list">
        @for (int i = 0; i < Questions.Count; i++)
        {
            var questionIndex = i;
            var question = Questions[questionIndex];
            var answer = GetAnswer(question);

            <div class="question-block">
                <label class="question-label">@question</label>
                <RadzenTextArea Value="@answer"
                              ValueChanged="@(value => UpdateAnswerWithAutoSave(question, value))"
                              Placeholder="Your response..."
                              Class="answer-field" />
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public List<string> Questions { get; set; } = new();
    [Parameter] public Dictionary<string, string> Answers { get; set; } = new();
    [Parameter] public EventCallback<Dictionary<string, string>> AnswersChanged { get; set; }

    private string GetAnswer(string question)
    {
        return Answers.TryGetValue(question, out var answer) ? answer : string.Empty;
    }

    private async Task UpdateAnswer(string question, string value)
    {
        Answers[question] = value ?? string.Empty;
        await AnswersChanged.InvokeAsync(Answers);
    }

    private async Task UpdateAnswerWithAutoSave(string question, string value)
    {
        await UpdateAnswer(question, value);
        ShowAutoSaveIndicator();
    }
}