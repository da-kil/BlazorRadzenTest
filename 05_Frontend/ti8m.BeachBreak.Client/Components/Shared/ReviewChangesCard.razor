@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Models.Dto
@using ti8m.BeachBreak.Client.Services

<style>
    .review-changes-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        border: 1px solid #e9ecef;
        margin-top: 1.5rem;
    }

    .card-header {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 1rem;
        padding-bottom: 0.75rem;
        border-bottom: 2px solid #f8f9fa;
    }

    .card-icon {
        width: 40px;
        height: 40px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
        color: white;
        background: linear-gradient(135deg, #ff9a56, #ff6a88);
    }

    .changes-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .change-item {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 1rem;
        border-left: 4px solid #ff9a56;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .change-item:hover {
        transform: translateX(4px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .change-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 0.75rem;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .change-title {
        font-weight: 600;
        color: #212529;
        font-size: 0.95rem;
    }

    .change-meta {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        color: #6c757d;
    }

    .change-body {
        display: grid;
        gap: 0.5rem;
    }

    .value-change {
        background: white;
        border-radius: 6px;
        padding: 0.75rem;
        border: 1px solid #dee2e6;
    }

    .value-label {
        font-size: 0.75rem;
        font-weight: 600;
        color: #6c757d;
        text-transform: uppercase;
        margin-bottom: 0.25rem;
    }

    .value-content {
        font-family: 'Courier New', monospace;
        color: #212529;
        word-break: break-word;
    }

    .old-value {
        text-decoration: line-through;
        opacity: 0.7;
    }

    .new-value {
        color: #198754;
        font-weight: 500;
    }

    .empty-state {
        text-align: center;
        padding: 2rem;
        color: #6c757d;
    }

    .empty-state-icon {
        font-size: 3rem;
        opacity: 0.3;
        margin-bottom: 1rem;
    }

    .loading-state {
        text-align: center;
        padding: 2rem;
    }

    .section-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
        padding: 0.25rem 0.75rem;
        background: rgba(255, 154, 86, 0.1);
        color: #ff9a56;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .role-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
        padding: 0.25rem 0.75rem;
        background: rgba(102, 126, 234, 0.1);
        color: #667eea;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 600;
    }
</style>

@if (IsVisible)
{
    <div class="review-changes-card">
        <div class="card-header">
            <div class="card-icon">
                <RadzenIcon Icon="history" />
            </div>
            <RadzenText TextStyle="TextStyle.H6" Class="mb-0">Review Changes History</RadzenText>
            @if (reviewChanges.Count > 0)
            {
                <RadzenBadge Text="@reviewChanges.Count.ToString()" BadgeStyle="BadgeStyle.Danger" Class="ms-auto" />
            }
        </div>

        @if (isLoading)
        {
            <div class="loading-state">
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Medium" />
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mt-2">Loading review changes...</RadzenText>
            </div>
        }
        else if (reviewChanges.Count == 0)
        {
            <div class="empty-state">
                <div class="empty-state-icon">
                    <RadzenIcon Icon="history" />
                </div>
                <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">No Changes Made</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">
                    No edits were made during the review meeting for this assignment.
                </RadzenText>
            </div>
        }
        else
        {
            <div class="changes-list">
                @foreach (var change in reviewChanges.OrderByDescending(c => c.ChangedAt))
                {
                    <div class="change-item">
                        <div class="change-header">
                            <div>
                                <div class="change-title">@change.QuestionTitle</div>
                                <div class="change-meta">
                                    <span class="section-badge">
                                        <RadzenIcon Icon="folder" Style="font-size: 0.875rem;" />
                                        @change.SectionTitle
                                    </span>
                                    <span class="role-badge">
                                        <RadzenIcon Icon="person" Style="font-size: 0.875rem;" />
                                        @change.OriginalCompletionRole
                                    </span>
                                </div>
                            </div>
                            <div class="change-meta">
                                <RadzenIcon Icon="person" Style="font-size: 0.875rem;" />
                                <span>@change.ChangedBy</span>
                                <RadzenIcon Icon="schedule" Style="font-size: 0.875rem;" />
                                <span>@change.ChangedAt.ToString("MMM dd, HH:mm")</span>
                            </div>
                        </div>

                        <div class="change-body">
                            @if (!string.IsNullOrEmpty(change.OldValue))
                            {
                                <div class="value-change">
                                    <div class="value-label">Previous Answer</div>
                                    <div class="value-content old-value">@change.OldValue</div>
                                </div>
                            }

                            <div class="value-change">
                                <div class="value-label">New Answer</div>
                                <div class="value-content new-value">@change.NewValue</div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    [Parameter] public Guid AssignmentId { get; set; }
    [Parameter] public WorkflowState WorkflowState { get; set; }
    [Inject] private IQuestionnaireAssignmentService AssignmentService { get; set; } = default!;

    private List<ReviewChangeDto> reviewChanges = new();
    private bool isLoading = false;

    // Only show the component if the assignment has been through review
    private bool IsVisible => WorkflowState == WorkflowState.EmployeeReviewConfirmed ||
                              WorkflowState == WorkflowState.ManagerReviewConfirmed ||
                              WorkflowState == WorkflowState.Finalized;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && AssignmentId != Guid.Empty)
        {
            await LoadReviewChangesAsync();
        }
    }

    private async Task LoadReviewChangesAsync()
    {
        try
        {
            isLoading = true;
            reviewChanges = await AssignmentService.GetReviewChangesAsync(AssignmentId);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading review changes: {ex.Message}");
            reviewChanges = new List<ReviewChangeDto>();
        }
        finally
        {
            isLoading = false;
        }
    }
}
