@using Radzen
@using Radzen.Blazor

<RadzenFieldset>
    <HeaderTemplate>
        <RadzenIcon Icon="calendar_today" Class="me-2" />
        <span class="fw-bold">Timeframe</span>
    </HeaderTemplate>
    <ChildContent>
        <RadzenRow Gap="1rem">
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenLabel Text="Start Date*" Component="timeframeFrom" Class="fw-bold mb-1" />
                <RadzenDatePicker Value="@TimeframeFrom"
                                ValueChanged="@((DateTime? value) => OnTimeframeFromChanged(value))"
                                Name="timeframeFrom"
                                DateFormat="dd.MM.yyyy"
                                Class="w-100"
                                ShowTime="false" />
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenLabel Text="End Date*" Component="timeframeTo" Class="fw-bold mb-1" />
                <RadzenDatePicker Value="@TimeframeTo"
                                ValueChanged="@((DateTime? value) => OnTimeframeToChanged(value))"
                                Name="timeframeTo"
                                DateFormat="dd.MM.yyyy"
                                Class="w-100"
                                ShowTime="false" />
            </RadzenColumn>
        </RadzenRow>
    </ChildContent>
</RadzenFieldset>

@code {
    /// <summary>
    /// Start date of the goal timeframe.
    /// </summary>
    [Parameter]
    public DateTime? TimeframeFrom { get; set; }

    /// <summary>
    /// Event callback when start date changes.
    /// </summary>
    [Parameter]
    public EventCallback<DateTime?> TimeframeFromChanged { get; set; }

    /// <summary>
    /// End date of the goal timeframe.
    /// </summary>
    [Parameter]
    public DateTime? TimeframeTo { get; set; }

    /// <summary>
    /// Event callback when end date changes.
    /// </summary>
    [Parameter]
    public EventCallback<DateTime?> TimeframeToChanged { get; set; }

    private async Task OnTimeframeFromChanged(DateTime? value)
    {
        TimeframeFrom = value;
        await TimeframeFromChanged.InvokeAsync(value);
    }

    private async Task OnTimeframeToChanged(DateTime? value)
    {
        TimeframeTo = value;
        await TimeframeToChanged.InvokeAsync(value);
    }
}
