@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@inject IQuestionnaireAssignmentService AssignmentService
@inject NotificationService NotificationService

<div class="workflow-action-buttons">
    @if (Assignment != null)
    {
        <div class="button-group">
            @if (IsEmployee && WorkflowStateHelper.CanEmployeeSubmit(Assignment))
            {
                <RadzenButton Text="Submit Questionnaire"
                              Icon="send"
                              ButtonStyle="ButtonStyle.Success"
                              Click="@SubmitEmployeeQuestionnaire"
                              Disabled="@isProcessing" />
            }

            @if (IsManager && WorkflowStateHelper.CanManagerSubmit(Assignment))
            {
                <RadzenButton Text="Submit Questionnaire"
                              Icon="send"
                              ButtonStyle="ButtonStyle.Success"
                              Click="@SubmitManagerQuestionnaire"
                              Disabled="@isProcessing" />
            }

            @if (IsManager && WorkflowStateHelper.CanInitiateReview(Assignment))
            {
                <RadzenButton Text="Initiate Review Meeting"
                              Icon="rate_review"
                              ButtonStyle="ButtonStyle.Primary"
                              Click="@InitiateReview"
                              Disabled="@isProcessing" />
            }

            @if (IsEmployee && WorkflowStateHelper.CanEmployeeConfirmReview(Assignment))
            {
                <RadzenButton Text="Confirm Review"
                              Icon="verified"
                              ButtonStyle="ButtonStyle.Success"
                              Click="@ConfirmEmployeeReview"
                              Disabled="@isProcessing" />
            }

            @if (IsManager && WorkflowStateHelper.CanManagerConfirmReview(Assignment))
            {
                <RadzenButton Text="Confirm Review"
                              Icon="verified"
                              ButtonStyle="ButtonStyle.Success"
                              Click="@ConfirmManagerReview"
                              Disabled="@isProcessing" />
            }

            @if (IsManager && WorkflowStateHelper.CanManagerFinalize(Assignment))
            {
                <RadzenButton Text="Finalize Questionnaire"
                              Icon="lock"
                              ButtonStyle="ButtonStyle.Warning"
                              Click="@FinalizeQuestionnaire"
                              Disabled="@isProcessing" />
            }
        </div>
    }
</div>

<style>
    .workflow-action-buttons {
        padding: 16px;
        background: #f8f9fa;
        border-radius: 8px;
        margin: 16px 0;
    }

    .button-group {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }
</style>

@code {
    [Parameter]
    public QuestionnaireAssignment? Assignment { get; set; }

    [Parameter]
    public bool IsEmployee { get; set; }

    [Parameter]
    public bool IsManager { get; set; }

    [Parameter]
    public string UserName { get; set; } = string.Empty;

    [Parameter]
    public EventCallback OnActionCompleted { get; set; }

    private bool isProcessing = false;

    private async Task SubmitEmployeeQuestionnaire()
    {
        if (Assignment == null) return;

        isProcessing = true;
        try
        {
            var success = await AssignmentService.SubmitEmployeeQuestionnaireAsync(Assignment.Id, UserName);
            if (success)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Employee questionnaire submitted successfully",
                    Duration = 4000
                });
                await OnActionCompleted.InvokeAsync();
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Failed to submit questionnaire",
                    Duration = 4000
                });
            }
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task SubmitManagerQuestionnaire()
    {
        if (Assignment == null) return;

        isProcessing = true;
        try
        {
            var success = await AssignmentService.SubmitManagerQuestionnaireAsync(Assignment.Id, UserName);
            if (success)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Manager questionnaire submitted successfully",
                    Duration = 4000
                });
                await OnActionCompleted.InvokeAsync();
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Failed to submit questionnaire",
                    Duration = 4000
                });
            }
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task InitiateReview()
    {
        if (Assignment == null) return;

        isProcessing = true;
        try
        {
            var success = await AssignmentService.InitiateReviewAsync(Assignment.Id, UserName);
            if (success)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Performance review initiated",
                    Duration = 4000
                });
                await OnActionCompleted.InvokeAsync();
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Failed to initiate review",
                    Duration = 4000
                });
            }
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task ConfirmEmployeeReview()
    {
        if (Assignment == null) return;

        isProcessing = true;
        try
        {
            var success = await AssignmentService.ConfirmEmployeeReviewAsync(Assignment.Id, UserName);
            if (success)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Review confirmed by employee",
                    Duration = 4000
                });
                await OnActionCompleted.InvokeAsync();
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Failed to confirm review",
                    Duration = 4000
                });
            }
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task ConfirmManagerReview()
    {
        if (Assignment == null) return;

        isProcessing = true;
        try
        {
            var success = await AssignmentService.ConfirmManagerReviewAsync(Assignment.Id, UserName);
            if (success)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Review confirmed by manager",
                    Duration = 4000
                });
                await OnActionCompleted.InvokeAsync();
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Failed to confirm review",
                    Duration = 4000
                });
            }
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task FinalizeQuestionnaire()
    {
        if (Assignment == null) return;

        isProcessing = true;
        try
        {
            var success = await AssignmentService.FinalizeQuestionnaireAsync(Assignment.Id, UserName);
            if (success)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = "Questionnaire finalized and locked",
                    Duration = 4000
                });
                await OnActionCompleted.InvokeAsync();
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Failed to finalize questionnaire",
                    Duration = 4000
                });
            }
        }
        finally
        {
            isProcessing = false;
        }
    }
}
