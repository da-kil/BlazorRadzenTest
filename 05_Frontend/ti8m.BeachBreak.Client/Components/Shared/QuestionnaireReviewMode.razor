@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Models.Dto
@using ti8m.BeachBreak.Client.Components.Dialogs
@using Microsoft.AspNetCore.Components.Authorization
@inject IQuestionnaireTemplateService TemplateService
@inject IQuestionnaireResponseService ResponseService
@inject IQuestionnaireAssignmentService AssignmentService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<link href="css/questionnaire-unified.css" rel="stylesheet" />

<div class="container-fluid questionnaire-unified-container">
    @if (isLoading)
    {
        <div class="text-center p-5">
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Class="mb-3" />
            <RadzenText TextStyle="TextStyle.Body1" Class="text-muted">Loading review data...</RadzenText>
        </div>
    }
    else if (template == null || response == null)
    {
        <RadzenAlert AlertStyle="AlertStyle.Danger" Variant="Variant.Flat">
            <RadzenText TextStyle="TextStyle.Body1">Unable to load questionnaire data for review.</RadzenText>
        </RadzenAlert>
    }
    else
    {
        <RadzenCard Class="questionnaire-main-card p-4">
            <!-- Header Section - Matches DynamicQuestionnaire -->
            <div class="questionnaire-header text-center mb-4">
                <RadzenText TextStyle="TextStyle.H3" Class="questionnaire-title text-primary">
                    <RadzenIcon Icon="rate_review" Class="me-2" />
                    Review Meeting: @template.Name
                </RadzenText>
                @if (!string.IsNullOrWhiteSpace(template.Description))
                {
                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="questionnaire-subtitle text-muted">
                        @template.Description
                    </RadzenText>
                }
                <div class="questionnaire-info-banner">
                    <RadzenIcon Icon="info" />
                    <div>
                        <strong>Employee:</strong> @Assignment.EmployeeName &nbsp;|&nbsp;
                        You can view and edit all answers during this review meeting. All changes are tracked.
                    </div>
                </div>
            </div>

            <!-- Section Counter - Matches DynamicQuestionnaire -->
            <div class="section-counter mb-4">
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted text-end">
                    Section @(currentSectionIndex + 1) of @template.Sections.Count
                </RadzenText>
            </div>

            <!-- Steps Navigation - Matches DynamicQuestionnaire -->
            <RadzenSteps Value="@currentSectionIndex" Change="@OnSectionChanged" Class="mb-4" ShowStepsButtons="false">
                @for (int i = 0; i < template.Sections.Count; i++)
                {
                    var sectionItem = template.Sections.OrderBy(s => s.Order).Skip(i).FirstOrDefault();
                    if (sectionItem != null)
                    {
                        <RadzenStepsItem Text="@sectionItem.Title" />
                    }
                }
            </RadzenSteps>

            <!-- Current Section Content - Matches DynamicQuestionnaire structure -->
            <div class="questionnaire-content">
                @if (currentSection != null)
                {
                    <RadzenCard Class="section-card p-4">
                        <div class="section-card-header">
                            <div class="section-title-container flex-grow-1">
                                <RadzenText TextStyle="TextStyle.H4" Class="section-title text-primary mb-2">
                                    @currentSection.Title
                                </RadzenText>
                                @if (!string.IsNullOrWhiteSpace(currentSection.Description))
                                {
                                    <RadzenText TextStyle="TextStyle.Body1" Class="section-description text-muted">
                                        @currentSection.Description
                                    </RadzenText>
                                }
                            </div>
                            <div class="completion-role-badge @GetRoleClass(currentSection.CompletionRole)">
                                <RadzenIcon Icon="@GetRoleIcon(currentSection.CompletionRole)" />
                                @currentSection.CompletionRole.ToString()
                            </div>
                        </div>

                        <!-- Questions Container - Matches DynamicQuestionnaire -->
                        <div class="questions-container">
                            @foreach (var question in currentSection.Questions.OrderBy(q => q.Order))
                            {
                                <div class="question-wrapper mb-4">
                                    <div class="question-title">
                                        @question.Title
                                        @if (question.IsRequired)
                                        {
                                            <span class="text-danger">*</span>
                                        }
                                    </div>

                                    @if (!string.IsNullOrWhiteSpace(question.Description))
                                    {
                                        <div class="question-description">@question.Description</div>
                                    }

                                    <div class="review-question-container">
                                        @if (currentSection.CompletionRole == CompletionRole.Both)
                                        {
                                            <!-- Side-by-side view for Both sections -->
                                            <div class="side-by-side-view">
                                                <!-- Employee Answer -->
                                                <div class="answer-column employee">
                                                    <div class="answer-header">
                                                        <span class="answer-label">
                                                            <RadzenIcon Icon="person" Style="font-size: 1rem;" />
                                                            Employee's Answer
                                                        </span>
                                                    </div>
                                                    <div class="answer-content">
                                                        <div class="answer-value">
                                                            @RenderAnswerValue(question, CompletionRole.Employee)
                                                        </div>
                                                    </div>
                                                    <div class="answer-actions">
                                                        <RadzenButton Text="Copy to Manager →"
                                                                     ButtonStyle="ButtonStyle.Light"
                                                                     Icon="content_copy"
                                                                     Size="ButtonSize.Small"
                                                                     Click="@(() => CopyAnswer(question, CompletionRole.Employee, CompletionRole.Manager))"
                                                                     Class="copy-button" />
                                                        <RadzenButton Text="Edit"
                                                                     ButtonStyle="ButtonStyle.Primary"
                                                                     Icon="edit"
                                                                     Size="ButtonSize.Small"
                                                                     Click="@(() => EditAnswer(question, CompletionRole.Employee))" />
                                                    </div>
                                                </div>

                                                <!-- Manager Answer -->
                                                <div class="answer-column manager">
                                                    <div class="answer-header">
                                                        <span class="answer-label">
                                                            <RadzenIcon Icon="supervisor_account" Style="font-size: 1rem;" />
                                                            Manager's Answer
                                                        </span>
                                                    </div>
                                                    <div class="answer-content">
                                                        <div class="answer-value">
                                                            @RenderAnswerValue(question, CompletionRole.Manager)
                                                        </div>
                                                    </div>
                                                    <div class="answer-actions">
                                                        <RadzenButton Text="← Copy to Employee"
                                                                     ButtonStyle="ButtonStyle.Light"
                                                                     Icon="content_copy"
                                                                     Size="ButtonSize.Small"
                                                                     Click="@(() => CopyAnswer(question, CompletionRole.Manager, CompletionRole.Employee))"
                                                                     Class="copy-button" />
                                                        <RadzenButton Text="Edit"
                                                                     ButtonStyle="ButtonStyle.Primary"
                                                                     Icon="edit"
                                                                     Size="ButtonSize.Small"
                                                                     Click="@(() => EditAnswer(question, CompletionRole.Manager))" />
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <!-- Single column view for Employee or Manager only sections -->
                                            <div class="single-answer-view">
                                                <div class="answer-header">
                                                    <span class="answer-label">
                                                        <RadzenIcon Icon="@GetRoleIcon(currentSection.CompletionRole)" Style="font-size: 1rem;" />
                                                        @currentSection.CompletionRole's Answer
                                                    </span>
                                                </div>
                                                <div class="answer-content">
                                                    <div class="answer-value">
                                                        @RenderAnswerValue(question, currentSection.CompletionRole)
                                                    </div>
                                                </div>
                                                <div class="answer-actions">
                                                    <RadzenButton Text="Edit Answer"
                                                                 ButtonStyle="ButtonStyle.Primary"
                                                                 Icon="edit"
                                                                 Size="ButtonSize.Medium"
                                                                 Click="@(() => EditAnswer(question, currentSection.CompletionRole))" />
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </RadzenCard>
                }
            </div>

            <!-- Navigation Footer - Matches DynamicQuestionnaire -->
            <div class="navigation-footer d-flex justify-content-between mt-4">
                <RadzenButton Text="Previous"
                             ButtonStyle="ButtonStyle.Light"
                             Icon="arrow_back"
                             Click="@PreviousSection"
                             Disabled="@(currentSectionIndex == 0)" />

                <div class="navigation-actions d-flex gap-2">
                    @if (currentSectionIndex < template.Sections.Count - 1)
                    {
                        <RadzenButton Text="Next"
                                     ButtonStyle="ButtonStyle.Primary"
                                     Icon="arrow_forward"
                                     Click="@NextSection" />
                    }
                    else
                    {
                        <RadzenButton Text="Finish Review Meeting"
                                     ButtonStyle="ButtonStyle.Success"
                                     Icon="check_circle"
                                     Click="@FinishReview" />
                    }
                </div>
            </div>
        </RadzenCard>
    }
</div>

@code {
    [Parameter, EditorRequired] public QuestionnaireAssignment Assignment { get; set; } = null!;
    [Parameter] public EventCallback OnReviewFinished { get; set; }

    private QuestionnaireTemplate? template;
    private QuestionnaireResponse? response;
    private int currentSectionIndex = 0;
    private bool isLoading = true;
    private string currentManagerName = string.Empty;

    private QuestionSection? currentSection => template?.Sections.OrderBy(s => s.Order).Skip(currentSectionIndex).FirstOrDefault();

    protected override async Task OnInitializedAsync()
    {
        await LoadReviewData();
    }

    private async Task LoadReviewData()
    {
        try
        {
            isLoading = true;

            // Get current manager name
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            currentManagerName = authState.User.Identity?.Name ?? "Unknown Manager";

            // Load template
            template = await TemplateService.GetTemplateByIdAsync(Assignment.TemplateId);

            // Load response (contains both employee and manager answers)
            response = await ResponseService.GetResponseByAssignmentIdAsync(Assignment.Id);

            if (template == null || response == null)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to load review data");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to load review data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnSectionChanged(int newIndex)
    {
        if (newIndex >= 0 && newIndex < (template?.Sections.Count ?? 0))
        {
            currentSectionIndex = newIndex;
            StateHasChanged();
        }
    }

    private RenderFragment RenderAnswerValue(QuestionItem question, CompletionRole role)
    {
        var answer = GetAnswer(currentSection!.Id, question.Id, role);

        if (answer == null)
        {
            return @<span class="empty-answer">No answer provided</span>;
        }

        // Handle different question types
        return question.Type switch
        {
            QuestionType.TextQuestion => RenderTextAnswer(answer),
            QuestionType.Assessment => RenderAssessmentAnswer(answer, question),
            QuestionType.GoalAchievement => RenderGoalAnswer(answer),
            _ => @<span>@answer.ToString()</span>
        };
    }

    private RenderFragment RenderTextAnswer(object answer)
    {
        // Handle complex value (dictionary with text sections)
        if (answer is Dictionary<string, object> complexValue)
        {
            var textSections = GetTextSectionsFromQuestion(currentSection!.Questions.FirstOrDefault(q => q.Type == QuestionType.TextQuestion));

            return @<div>
                @foreach (var kvp in complexValue.Where(k => k.Key.StartsWith("text_")).OrderBy(k => k.Key))
                {
                    var textSectionKey = kvp.Key.Replace("text_", "");

                    // Get text value, handle JsonElement
                    string textValue = "";
                    if (kvp.Value is System.Text.Json.JsonElement jsonElement && jsonElement.ValueKind == System.Text.Json.JsonValueKind.String)
                    {
                        textValue = jsonElement.GetString() ?? "";
                    }
                    else
                    {
                        textValue = kvp.Value?.ToString() ?? "";
                    }

                    // Get text section title - match by order
                    var textSection = textSections.FirstOrDefault(ts => ts.Order.ToString() == textSectionKey);
                    var sectionTitle = textSection?.Title ?? textSectionKey;

                    <div class="question-item-card">
                        <div class="question-item-title">
                            @sectionTitle
                            @if (textSection?.IsRequired == true)
                            {
                                <span class="text-danger">*</span>
                            }
                        </div>
                        @if (!string.IsNullOrWhiteSpace(textSection?.Description))
                        {
                            <div class="question-item-description">@textSection.Description</div>
                        }
                        <div class="question-answer-box">
                            @if (!string.IsNullOrWhiteSpace(textValue))
                            {
                                @textValue
                            }
                            else
                            {
                                <span class="text-muted fst-italic">No answer provided</span>
                            }
                        </div>
                    </div>
                }
            </div>;
        }

        // Handle simple text value
        var text = answer?.ToString() ?? "";
        return @<div style="white-space: pre-wrap;">@text</div>;
    }

    private List<TextSection> GetTextSectionsFromQuestion(QuestionItem? question)
    {
        if (question?.Configuration?.ContainsKey("TextSections") != true)
        {
            return new List<TextSection>();
        }

        var textSectionsValue = question.Configuration["TextSections"];

        // Handle direct List<TextSection>
        if (textSectionsValue is List<TextSection> sections)
        {
            return sections;
        }

        // Handle JsonElement (from API deserialization)
        if (textSectionsValue is System.Text.Json.JsonElement jsonElement)
        {
            try
            {
                var options = new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };

                var textSections = System.Text.Json.JsonSerializer.Deserialize<List<TextSection>>(
                    jsonElement.GetRawText(),
                    options
                );

                return textSections ?? new List<TextSection>();
            }
            catch { /* Skip deserialization errors */ }
        }

        return new List<TextSection>();
    }

    private RenderFragment RenderAssessmentAnswer(object answer, QuestionItem question)
    {
        if (answer is not Dictionary<string, object> complexValue)
        {
            return @<span class="empty-answer">No ratings provided</span>;
        }

        // Get competency definitions from question configuration
        var competencies = GetCompetenciesFromQuestion(question);
        var ratingScale = GetRatingScaleFromQuestion(question);

        return @<div>
            @foreach (var kvp in complexValue.Where(k => k.Key.StartsWith("rating_")))
            {
                var competencyKey = kvp.Key.Replace("rating_", "");

                // Get rating value, handle JsonElement
                int ratingValue = 0;
                if (kvp.Value is System.Text.Json.JsonElement jsonElement && jsonElement.ValueKind == System.Text.Json.JsonValueKind.Number)
                {
                    ratingValue = jsonElement.GetInt32();
                }
                else if (kvp.Value != null)
                {
                    int.TryParse(kvp.Value.ToString(), out ratingValue);
                }

                // Get comment
                var commentKey = $"comment_{competencyKey}";
                var comment = "";
                if (complexValue.ContainsKey(commentKey))
                {
                    var commentValue = complexValue[commentKey];
                    if (commentValue is System.Text.Json.JsonElement commentJson && commentJson.ValueKind == System.Text.Json.JsonValueKind.String)
                    {
                        comment = commentJson.GetString() ?? "";
                    }
                    else
                    {
                        comment = commentValue?.ToString() ?? "";
                    }
                }

                // Get competency details
                var competency = competencies.FirstOrDefault(c => c.Key == competencyKey);
                var competencyTitle = competency?.Title ?? competencyKey;
                var competencyDescription = competency?.Description ?? "";

                <div class="question-item-card">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <div class="flex-grow-1">
                            <div class="question-item-title">@competencyTitle</div>
                            @if (!string.IsNullOrWhiteSpace(competencyDescription))
                            {
                                <div class="question-item-description">@competencyDescription</div>
                            }
                        </div>
                        <div class="text-end ms-3">
                            <div class="text-muted small mb-1">Rating:</div>
                            <RadzenRating Value="@ratingValue" Stars="@ratingScale" ReadOnly="true" />
                        </div>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(comment))
                    {
                        <div class="question-answer-box mt-2">
                            @comment
                        </div>
                    }
                </div>
            }
        </div>;
    }

    private List<CompetencyDefinition> GetCompetenciesFromQuestion(QuestionItem question)
    {
        if (question.Configuration?.ContainsKey("Competencies") != true)
        {
            return new List<CompetencyDefinition>();
        }

        var competenciesValue = question.Configuration["Competencies"];

        // Handle direct List<CompetencyDefinition>
        if (competenciesValue is List<CompetencyDefinition> comps)
        {
            return comps;
        }

        // Handle JsonElement (from API deserialization)
        if (competenciesValue is System.Text.Json.JsonElement jsonElement)
        {
            try
            {
                var options = new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    Converters = { new System.Text.Json.Serialization.JsonStringEnumConverter() }
                };

                var competencies = System.Text.Json.JsonSerializer.Deserialize<List<CompetencyDefinition>>(
                    jsonElement.GetRawText(),
                    options
                );

                return competencies ?? new List<CompetencyDefinition>();
            }
            catch { /* Skip deserialization errors */ }
        }

        return new List<CompetencyDefinition>();
    }

    private int GetRatingScaleFromQuestion(QuestionItem question)
    {
        if (question.Configuration?.ContainsKey("RatingScale") == true &&
            int.TryParse(question.Configuration["RatingScale"].ToString(), out int scale))
        {
            return scale;
        }
        return 4;
    }

    private RenderFragment RenderGoalAnswer(object answer)
    {
        if (answer is not Dictionary<string, object> complexValue)
        {
            return @<span class="empty-answer">No goal information provided</span>;
        }

        return @<div class="question-item-card">
            @if (complexValue.ContainsKey("Description"))
            {
                <div class="mb-3">
                    <div class="question-item-title">Goal Description</div>
                    <div class="question-answer-box">
                        @complexValue["Description"]?.ToString()
                    </div>
                </div>
            }
            @if (complexValue.ContainsKey("AchievementPercentage"))
            {
                <div class="mb-3">
                    <div class="question-item-title">Achievement Percentage</div>
                    <div class="question-answer-box">
                        @complexValue["AchievementPercentage"]?.ToString()%
                    </div>
                </div>
            }
            @if (complexValue.ContainsKey("Justification"))
            {
                <div class="mb-3">
                    <div class="question-item-title">Justification</div>
                    <div class="question-answer-box">
                        @complexValue["Justification"]?.ToString()
                    </div>
                </div>
            }
        </div>;
    }

    private object? GetAnswer(Guid sectionId, Guid questionId, CompletionRole role)
    {
        if (response?.SectionResponses == null)
            return null;

        if (!response.SectionResponses.TryGetValue(sectionId, out var sectionResponse))
            return null;

        // Use role-based responses structure
        var roleKey = role.ToString();

        if (sectionResponse.RoleResponses != null &&
            sectionResponse.RoleResponses.TryGetValue(roleKey, out var roleQuestions))
        {
            if (roleQuestions.TryGetValue(questionId, out var questionResponse))
            {
                // Return whatever value is available (could be TextValue, NumericValue, or ComplexValue)
                if (!string.IsNullOrEmpty(questionResponse.TextValue))
                    return questionResponse.TextValue;

                if (questionResponse.NumericValue.HasValue)
                    return questionResponse.NumericValue.Value;

                if (questionResponse.ComplexValue != null && questionResponse.ComplexValue.Count > 0)
                    return questionResponse.ComplexValue;

                return questionResponse.Value;
            }
        }

        return null;
    }

    private async Task EditAnswer(QuestionItem question, CompletionRole originalRole)
    {
        var currentAnswer = GetAnswer(currentSection!.Id, question.Id, originalRole);

        var result = await DialogService.OpenAsync<EditAnswerDialog>(
            $"Edit Answer: {currentSection!.Title}",
            new Dictionary<string, object>
            {
                { "Question", question },
                { "CurrentAnswer", currentAnswer },
                { "CompletionRole", originalRole },
                { "SectionTitle", currentSection.Title }
            },
            new DialogOptions { Width = "900px", Height = "600px", Resizable = true, Draggable = true }
        );

        if (result is QuestionResponse questionResponse)
        {
            await SaveEditedAnswer(currentSection.Id, originalRole, questionResponse);
        }
    }

    private async Task SaveEditedAnswer(Guid sectionId, CompletionRole originalRole, QuestionResponse questionResponse)
    {
        try
        {
            // Serialize the complete QuestionResponse to JSON
            string answerJson = System.Text.Json.JsonSerializer.Serialize(questionResponse);

            var success = await AssignmentService.EditAnswerDuringReviewAsync(
                Assignment.Id,
                sectionId,
                questionResponse.QuestionId,
                originalRole,
                answerJson,
                currentManagerName
            );

            if (success)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Saved", "Answer updated successfully");

                // Reload response to show updated answer
                await LoadReviewData();
                StateHasChanged();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to save answer");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to save answer: {ex.Message}");
        }
    }

    private async Task CopyAnswer(QuestionItem question, CompletionRole fromRole, CompletionRole toRole)
    {
        var sourceAnswer = GetAnswer(currentSection!.Id, question.Id, fromRole);
        if (sourceAnswer == null)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Nothing to Copy", "Source answer is empty");
            return;
        }

        var confirmed = await DialogService.Confirm(
            $"Copy answer from {fromRole} to {toRole}?",
            "Confirm Copy",
            new ConfirmOptions { OkButtonText = "Yes, Copy", CancelButtonText = "Cancel" }
        );

        if (confirmed == true)
        {
            // Build QuestionResponse from source answer
            var questionResponse = new QuestionResponse
            {
                QuestionId = question.Id,
                QuestionType = question.Type,
                LastModified = DateTime.Now
            };

            // Populate appropriate field based on question type
            if (sourceAnswer is Dictionary<string, object> complexAnswer)
            {
                questionResponse.ComplexValue = complexAnswer;
            }
            else if (sourceAnswer is string textAnswer)
            {
                questionResponse.TextValue = textAnswer;
            }
            else if (sourceAnswer is int or long or double or decimal)
            {
                questionResponse.NumericValue = Convert.ToInt32(sourceAnswer);
            }
            else
            {
                questionResponse.Value = sourceAnswer;
            }

            await SaveEditedAnswer(currentSection.Id, toRole, questionResponse);
        }
    }

    private void PreviousSection()
    {
        if (currentSectionIndex > 0)
        {
            currentSectionIndex--;
            StateHasChanged();
        }
    }

    private void NextSection()
    {
        if (template != null && currentSectionIndex < template.Sections.Count - 1)
        {
            currentSectionIndex++;
            StateHasChanged();
        }
    }

    private async Task FinishReview()
    {
        var confirmed = await DialogService.Confirm(
            "Are you sure you want to finish this review meeting? The employee will be able to review the outcome.",
            "Finish Review",
            new ConfirmOptions { OkButtonText = "Yes, Finish", CancelButtonText = "Continue Reviewing" }
        );

        if (confirmed == true)
        {
            if (OnReviewFinished.HasDelegate)
            {
                await OnReviewFinished.InvokeAsync();
            }
        }
    }

    private string GetRoleClass(CompletionRole role)
    {
        return role switch
        {
            CompletionRole.Employee => "role-employee",
            CompletionRole.Manager => "role-manager",
            CompletionRole.Both => "role-both",
            _ => ""
        };
    }

    private string GetRoleIcon(CompletionRole role)
    {
        return role switch
        {
            CompletionRole.Employee => "person",
            CompletionRole.Manager => "supervisor_account",
            CompletionRole.Both => "groups",
            _ => "help"
        };
    }
}
