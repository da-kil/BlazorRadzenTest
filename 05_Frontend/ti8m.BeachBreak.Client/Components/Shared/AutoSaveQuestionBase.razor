@typeparam TModel
@implements IDisposable

@if (ShowAutoSave)
{
    <div class="auto-save-indicator">
        <RadzenIcon Icon="cloud_done" />
        <span>Auto-saved</span>
    </div>
}

@ChildContent

@code {
    [Parameter] public RenderFragment ChildContent { get; set; } = default!;
    [Parameter] public TModel Model { get; set; } = default!;
    [Parameter] public EventCallback<TModel> ModelChanged { get; set; }
    [Parameter] public int AutoSaveDelayMs { get; set; } = 2000;

    protected bool ShowAutoSave = false;
    private System.Threading.Timer? autoSaveTimer;

    /// <summary>
    /// Updates the model and triggers auto-save indicator
    /// </summary>
    protected async Task UpdateModelWithAutoSave(TModel updatedModel)
    {
        Model = updatedModel;
        await ModelChanged.InvokeAsync(Model);
        ShowAutoSaveIndicator();
    }

    /// <summary>
    /// Updates a specific property and triggers auto-save indicator
    /// </summary>
    protected async Task UpdatePropertyWithAutoSave<TValue>(TValue value, EventCallback<TValue> valueChanged)
    {
        await valueChanged.InvokeAsync(value);
        ShowAutoSaveIndicator();
    }

    /// <summary>
    /// Shows the auto-save indicator and hides it after the specified delay
    /// </summary>
    protected void ShowAutoSaveIndicator()
    {
        ShowAutoSave = true;
        StateHasChanged();

        // Clear existing timer
        autoSaveTimer?.Dispose();

        // Set new timer to hide indicator after specified delay
        autoSaveTimer = new System.Threading.Timer(_ => {
            ShowAutoSave = false;
            InvokeAsync(StateHasChanged);
        }, null, AutoSaveDelayMs, Timeout.Infinite);
    }

    /// <summary>
    /// Manual trigger for auto-save indicator (for custom scenarios)
    /// </summary>
    protected void TriggerAutoSave()
    {
        ShowAutoSaveIndicator();
    }

    public void Dispose()
    {
        autoSaveTimer?.Dispose();
    }
}

<style>
    .auto-save-indicator {
        position: fixed;
        top: 1rem;
        right: 1rem;
        background: var(--success-color, #10b981);
        color: white;
        padding: var(--spacing-sm, 0.5rem) var(--spacing-md, 1rem);
        border-radius: var(--radius-lg, 0.5rem);
        box-shadow: var(--shadow-lg, 0 10px 15px -3px rgba(0, 0, 0, 0.1));
        font-size: var(--font-size-sm, 0.875rem);
        font-weight: var(--font-weight-medium, 500);
        display: flex;
        align-items: center;
        gap: var(--spacing-xs, 0.25rem);
        z-index: var(--z-notification, 1040);
        animation: fadeInOut 2s ease-in-out;
    }

    .auto-save-indicator .rz-icon {
        font-size: 1rem;
    }

    @@keyframes fadeInOut {
        0% {
            opacity: 0;
            transform: translateX(100%);
        }
        10%, 85% {
            opacity: 1;
            transform: translateX(0);
        }
        100% {
            opacity: 0;
            transform: translateX(100%);
        }
    }

    /* Legacy support for components not yet using CSS variables */
    .auto-save-indicator {
        --success-color: #10b981;
        --spacing-sm: 0.5rem;
        --spacing-md: 1rem;
        --spacing-xs: 0.25rem;
        --radius-lg: 0.5rem;
        --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        --font-size-sm: 0.875rem;
        --font-weight-medium: 500;
        --z-notification: 1040;
    }
</style>