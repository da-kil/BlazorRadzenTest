@using Radzen
@using Radzen.Blazor
@typeparam TModel
@inherits ti8m.BeachBreak.Client.Components.Shared.BasePageComponent

<CustomModal @bind-IsVisible="@IsVisible"
             TModel="TModel"
             Width="@Width"
             Height="@Height"
             MinWidth="@MinWidth"
             MaxWidth="@MaxWidth"
             MaxHeight="@MaxHeight"
             CloseOnOverlayClick="false"
             ShowCloseIcon="false"
             ShowForm="false"
             ShowDefaultActions="false">
    <Content>
        <div class="tabbed-dialog-container" style="@($"min-width: {MinWidth}; max-width: {MaxWidth}; max-height: {MaxHeight}")">
        <!-- Header -->
        @if (!string.IsNullOrWhiteSpace(Title))
        {
            <div class="tabbed-hero">
                <div class="hero-content">
                    <div class="d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center">
                            @if (!string.IsNullOrWhiteSpace(HeaderIcon))
                            {
                                <RadzenIcon Icon="@HeaderIcon" Size="3rem" Class="text-white me-3" />
                            }
                            <div>
                                <RadzenText TextStyle="TextStyle.H3" Class="text-white fw-bold mb-1">@Title</RadzenText>
                                @if (!string.IsNullOrWhiteSpace(Subtitle))
                                {
                                    <RadzenText TextStyle="TextStyle.Body1" Class="text-white-75">@Subtitle</RadzenText>
                                }
                            </div>
                        </div>
                        @if (HeaderActions != null)
                        {
                            <div class="header-actions">
                                @HeaderActions
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <!-- Body -->
        <div class="tabbed-body">
            <div class="tabbed-tabs">
                <!-- Tab Headers -->
                <div class="tab-headers">
                    @for (int i = 0; i < Tabs.Count; i++)
                    {
                        var tab = Tabs[i];
                        var index = i;
                        var isActive = i == ActiveTabIndex;

                        <button class="tab-header @(isActive ? "active" : "")"
                                @onclick="@(() => SetActiveTab(index))"
                                disabled="@tab.IsDisabled">
                            @if (!string.IsNullOrWhiteSpace(tab.Icon))
                            {
                                <div class="tab-icon">
                                    <RadzenIcon Icon="@tab.Icon" />
                                </div>
                            }
                            <span>@tab.Title</span>
                            @if (tab.HasBadge)
                            {
                                <RadzenBadge BadgeStyle="@tab.BadgeStyle" Text="@tab.BadgeText" Class="ms-2" />
                            }
                        </button>
                    }
                </div>

                <!-- Tab Content -->
                <div class="tab-content">
                    @for (int i = 0; i < Tabs.Count; i++)
                    {
                        var tab = Tabs[i];
                        var isActive = i == ActiveTabIndex;

                        <div class="tab-pane @(isActive ? "active" : "")" style="display: @(isActive ? "block" : "none")">
                            @if (ShowForm && Model != null && tab.RequiresValidation)
                            {
                                <EditForm Model="@Model" OnValidSubmit="@OnValidSubmit">
                                    <DataAnnotationsValidator />
                                    @tab.Content
                                    @if (tab.ShowValidationSummary)
                                    {
                                        <ValidationSummary />
                                    }
                                </EditForm>
                            }
                            else
                            {
                                @tab.Content
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Footer -->
        @if (ShowFooter)
        {
            <div class="tabbed-footer">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        @if (ShowCancelButton)
                        {
                            <RadzenButton Text="@CancelButtonText" ButtonStyle="ButtonStyle.Light"
                                         Click="@(() => OnCancel.InvokeAsync(Model))" Size="ButtonSize.Medium" />
                        }
                        @if (FooterStartActions != null)
                        {
                            @FooterStartActions
                        }
                    </div>

                    <div class="d-flex gap-2">
                        @if (FooterEndActions != null)
                        {
                            @FooterEndActions
                        }
                        @if (ShowSaveButton)
                        {
                            <RadzenButton Text="@SaveButtonText" ButtonStyle="ButtonStyle.Success"
                                         Icon="save" Click="@(() => OnSave.InvokeAsync(Model))"
                                         Size="ButtonSize.Medium" />
                        }
                    </div>
                </div>
            </div>
        }
    </div>
    </Content>
</CustomModal>

@code {
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string HeaderIcon { get; set; } = "";
    [Parameter] public List<DialogTab> Tabs { get; set; } = new();
    [Parameter] public int ActiveTabIndex { get; set; } = 0;
    [Parameter] public TModel? Model { get; set; }

    [Parameter] public string Width { get; set; } = "1000px";
    [Parameter] public string Height { get; set; } = "auto";
    [Parameter] public string MinWidth { get; set; } = "800px";
    [Parameter] public string MaxWidth { get; set; } = "1200px";
    [Parameter] public string MaxHeight { get; set; } = "90vh";
    [Parameter] public bool Resizable { get; set; } = true;

    [Parameter] public bool ShowForm { get; set; } = false;
    [Parameter] public bool ShowFooter { get; set; } = true;
    [Parameter] public bool ShowCancelButton { get; set; } = true;
    [Parameter] public bool ShowSaveButton { get; set; } = true;
    [Parameter] public string CancelButtonText { get; set; } = "Cancel";
    [Parameter] public string SaveButtonText { get; set; } = "Save";

    [Parameter] public RenderFragment? HeaderActions { get; set; }
    [Parameter] public RenderFragment? FooterStartActions { get; set; }
    [Parameter] public RenderFragment? FooterEndActions { get; set; }

    [Parameter] public EventCallback<TModel?> OnCancel { get; set; }
    [Parameter] public EventCallback<TModel?> OnSave { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback<int> OnTabChanged { get; set; }

    public bool IsVisible { get; set; } = false;

    public class DialogTab
    {
        public string Title { get; set; } = "";
        public string Icon { get; set; } = "";
        public RenderFragment Content { get; set; } = default!;
        public bool IsDisabled { get; set; } = false;
        public bool RequiresValidation { get; set; } = false;
        public bool ShowValidationSummary { get; set; } = false;
        public bool HasBadge { get; set; } = false;
        public string BadgeText { get; set; } = "";
        public BadgeStyle BadgeStyle { get; set; } = BadgeStyle.Primary;
    }

    public async Task ShowAsync(TModel? model = default)
    {
        Model = model;
        ActiveTabIndex = 0;
        IsVisible = true;
        StateHasChanged();
    }

    public async Task HideAsync()
    {
        IsVisible = false;
        StateHasChanged();
    }

    private async Task SetActiveTab(int index)
    {
        if (index >= 0 && index < Tabs.Count && !Tabs[index].IsDisabled)
        {
            ActiveTabIndex = index;
            await OnTabChanged.InvokeAsync(index);
            StateHasChanged();
        }
    }

    public void SetTabBadge(int tabIndex, string text, BadgeStyle style = BadgeStyle.Primary)
    {
        if (tabIndex >= 0 && tabIndex < Tabs.Count)
        {
            var tab = Tabs[tabIndex];
            tab.HasBadge = !string.IsNullOrWhiteSpace(text);
            tab.BadgeText = text;
            tab.BadgeStyle = style;
            StateHasChanged();
        }
    }

    public void SetTabDisabled(int tabIndex, bool disabled)
    {
        if (tabIndex >= 0 && tabIndex < Tabs.Count)
        {
            Tabs[tabIndex].IsDisabled = disabled;
            StateHasChanged();
        }
    }
}