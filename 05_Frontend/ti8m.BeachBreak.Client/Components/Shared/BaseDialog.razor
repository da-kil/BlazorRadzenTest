@typeparam TModel

<CustomModal @bind-IsVisible="@IsVisible"
             TModel="TModel"
             Title="@Title"
             Width="@Width"
             Height="@Height"
             AdditionalStyle="@AdditionalStyle"
             ShowCloseIcon="@ShowCloseIcon"
             Model="@Model"
             ShowForm="@ShowForm"
             ValidationComponent="@ValidationComponent"
             ShowDefaultActions="@ShowDefaultActions"
             CancelText="@CancelText"
             SubmitText="@SubmitText"
             CancelButtonStyle="@CancelButtonStyle"
             SubmitButtonStyle="@SubmitButtonStyle"
             IsProcessing="@IsProcessing"
             OnSubmit="@OnSubmit"
             OnCancel="@OnCancel"
             OnClose="@OnCancel"
             OnValidSubmit="@OnValidSubmit"
             OnInvalidSubmit="@OnInvalidSubmit">
    <Content>
        @Content
    </Content>
    <ActionsContent>
        @ActionsContent
    </ActionsContent>
</CustomModal>

@code {
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string Width { get; set; } = "600px";
    [Parameter] public string Height { get; set; } = "auto";
    [Parameter] public string AdditionalStyle { get; set; } = string.Empty;
    [Parameter] public bool ShowCloseIcon { get; set; } = true;

    [Parameter] public TModel? Model { get; set; }
    [Parameter] public bool ShowForm { get; set; } = true;
    [Parameter] public RenderFragment? ValidationComponent { get; set; }
    [Parameter] public RenderFragment Content { get; set; } = default!;
    [Parameter] public RenderFragment? ActionsContent { get; set; }

    [Parameter] public bool ShowDefaultActions { get; set; } = true;
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public string SubmitText { get; set; } = "Save";
    [Parameter] public ButtonStyle CancelButtonStyle { get; set; } = ButtonStyle.Secondary;
    [Parameter] public ButtonStyle SubmitButtonStyle { get; set; } = ButtonStyle.Primary;

    [Parameter] public bool IsProcessing { get; set; } = false;
    [Parameter] public EventCallback<bool> IsProcessingChanged { get; set; }

    [Parameter] public EventCallback<TModel> OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<TModel> OnValidSubmit { get; set; }
    [Parameter] public EventCallback<EditContext> OnInvalidSubmit { get; set; }

    public async Task ShowAsync()
    {
        IsVisible = true;
        await IsVisibleChanged.InvokeAsync(IsVisible);
        StateHasChanged();
    }

    public async Task HideAsync()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
        StateHasChanged();
    }
}