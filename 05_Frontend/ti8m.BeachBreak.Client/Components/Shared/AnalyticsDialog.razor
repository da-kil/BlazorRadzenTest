@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.Components
@typeparam TModel
@inherits ti8m.BeachBreak.Client.Components.Shared.BasePageComponent

<CustomModal @bind-IsVisible="@IsVisible"
             TModel="TModel"
             Width="@Width"
             Height="@Height"
             MinWidth="@MinWidth"
             MaxWidth="@MaxWidth"
             MaxHeight="@MaxHeight"
             CloseOnOverlayClick="@CloseOnOverlayClick"
             ShowCloseIcon="false"
             ShowForm="false"
             ShowDefaultActions="false">
    <Content>
        <div class="analytics-dialog" style="@($"min-width: {MinWidth}; max-width: {MaxWidth}; max-height: {MaxHeight}")">
        <!-- Header -->
        <div class="dialog-header mb-4">
            <div class="d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center">
                    @if (!string.IsNullOrWhiteSpace(HeaderIcon))
                    {
                        <div class="analytics-icon-large me-3">
                            <RadzenIcon Icon="@HeaderIcon" Size="3rem" Class="text-primary" />
                        </div>
                    }
                    <div>
                        <RadzenText TextStyle="TextStyle.H4" Class="mb-1 fw-bold">@Title</RadzenText>
                        @if (!string.IsNullOrWhiteSpace(Subtitle))
                        {
                            <RadzenText TextStyle="TextStyle.Subtitle1" Class="text-muted mb-1">@Subtitle</RadzenText>
                        }
                        @if (!string.IsNullOrWhiteSpace(Description))
                        {
                            <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">@Description</RadzenText>
                        }
                    </div>
                </div>
                <div class="analytics-status">
                    @if (StatusBadges != null)
                    {
                        @StatusBadges
                    }
                </div>
            </div>
        </div>

        <!-- Stats Overview -->
        @if (StatsCards.Any())
        {
            <div class="row mb-4">
                @foreach (var stat in StatsCards)
                {
                    <div class="col-lg-3 col-md-6 col-12 mb-3">
                        <RadzenCard Class="@($"text-center stats-card {stat.CssClass}")">
                            <RadzenIcon Icon="@stat.Icon" Size="2rem" Class="@($"{stat.IconClass} mb-2")" />
                            <RadzenText TextStyle="TextStyle.H4" Class="mb-1">@stat.Value</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">@stat.Label</RadzenText>
                        </RadzenCard>
                    </div>
                }
            </div>
        }

        <!-- Main Content -->
        @if (ContentSections.Any())
        {
            @foreach (var contentSection in ContentSections)
            {
                <RadzenCard Class="@($"mb-4 {contentSection.CssClass}")">
                    @if (!string.IsNullOrWhiteSpace(contentSection.Title))
                    {
                        <div class="section-header mb-3">
                            @if (!string.IsNullOrWhiteSpace(contentSection.Icon))
                            {
                                <RadzenIcon Icon="@contentSection.Icon" Class="@($"me-2 {contentSection.IconClass}")" />
                            }
                            <RadzenText TextStyle="TextStyle.H6">@contentSection.Title</RadzenText>
                        </div>
                    }
                    @contentSection.Content
                </RadzenCard>
            }
        }
        else if (MainContent != null)
        {
            @MainContent
        }

        <!-- Footer Actions -->
        @if (ShowFooter)
        {
            <div class="analytics-footer mt-4">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        @if (FooterStartActions != null)
                        {
                            @FooterStartActions
                        }
                    </div>
                    <div class="d-flex gap-2">
                        @if (FooterEndActions != null)
                        {
                            @FooterEndActions
                        }
                        @if (ShowCloseButton)
                        {
                            <RadzenButton Text="@CloseButtonText" ButtonStyle="ButtonStyle.Light"
                                         Click="@HideAsync" Size="ButtonSize.Medium" />
                        }
                    </div>
                </div>
            </div>
        }
    </div>
    </Content>
</CustomModal>

@code {
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string Description { get; set; } = "";
    [Parameter] public string HeaderIcon { get; set; } = "";
    [Parameter] public TModel? Model { get; set; }

    [Parameter] public string Width { get; set; } = "1100px";
    [Parameter] public string Height { get; set; } = "auto";
    [Parameter] public string MinWidth { get; set; } = "900px";
    [Parameter] public string MaxWidth { get; set; } = "1400px";
    [Parameter] public string MaxHeight { get; set; } = "90vh";
    [Parameter] public bool Resizable { get; set; } = true;
    [Parameter] public bool CloseOnOverlayClick { get; set; } = true;

    [Parameter] public List<AnalyticsStatsCard> StatsCards { get; set; } = new();
    [Parameter] public List<AnalyticsContentSection> ContentSections { get; set; } = new();

    [Parameter] public RenderFragment? StatusBadges { get; set; }
    [Parameter] public RenderFragment? MainContent { get; set; }
    [Parameter] public RenderFragment? FooterStartActions { get; set; }
    [Parameter] public RenderFragment? FooterEndActions { get; set; }

    [Parameter] public bool ShowFooter { get; set; } = true;
    [Parameter] public bool ShowCloseButton { get; set; } = true;
    [Parameter] public string CloseButtonText { get; set; } = "Close";

    [Parameter] public EventCallback<TModel?> OnClose { get; set; }

    public bool IsVisible { get; set; } = false;

    public class AnalyticsStatsCard
    {
        public string Label { get; set; } = "";
        public string Value { get; set; } = "";
        public string Icon { get; set; } = "";
        public string IconClass { get; set; } = "";
        public string CssClass { get; set; } = "";
    }

    public class AnalyticsContentSection
    {
        public string Title { get; set; } = "";
        public string Icon { get; set; } = "";
        public string IconClass { get; set; } = "";
        public string CssClass { get; set; } = "";
        public RenderFragment Content { get; set; } = default!;
    }

    public async Task ShowAsync(TModel? model = default)
    {
        Model = model;
        IsVisible = true;
        StateHasChanged();
    }

    public async Task HideAsync()
    {
        IsVisible = false;
        await OnClose.InvokeAsync(Model);
        StateHasChanged();
    }

    public void UpdateStats(List<AnalyticsStatsCard> stats)
    {
        StatsCards = stats;
        StateHasChanged();
    }

    public void UpdateContent(List<AnalyticsContentSection> sections)
    {
        ContentSections = sections;
        StateHasChanged();
    }
}