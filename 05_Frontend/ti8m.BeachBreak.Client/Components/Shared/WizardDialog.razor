@using Radzen
@using Radzen.Blazor
@typeparam TModel
@inherits ti8m.BeachBreak.Client.Components.Shared.BasePageComponent

<CustomModal @bind-IsVisible="@IsVisible"
             TModel="TModel"
             Width="@Width"
             Height="@Height"
             MinWidth="@MinWidth"
             MaxWidth="@MaxWidth"
             MaxHeight="@MaxHeight"
             CloseOnOverlayClick="false"
             ShowCloseIcon="false"
             ShowForm="false"
             ShowDefaultActions="false">
    <Content>
        <div class="wizard-dialog" style="@($"min-width: {MinWidth}; max-width: {MaxWidth}; max-height: {MaxHeight}")">
        <!-- Header -->
        @if (!string.IsNullOrWhiteSpace(Title))
        {
            <div class="wizard-header">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="d-flex align-items-center">
                        @if (!string.IsNullOrWhiteSpace(HeaderIcon))
                        {
                            <RadzenIcon Icon="@HeaderIcon" Size="2.5rem" Class="text-white me-3" />
                        }
                        <div>
                            <RadzenText TextStyle="TextStyle.H3" Class="text-white fw-bold mb-1">@Title</RadzenText>
                            @if (!string.IsNullOrWhiteSpace(Subtitle))
                            {
                                <RadzenText TextStyle="TextStyle.Body1" Class="text-white-50">@Subtitle</RadzenText>
                            }
                        </div>
                    </div>
                    <div class="wizard-progress">
                        <RadzenText TextStyle="TextStyle.Body2" Class="text-white-75 mb-1">
                            Step @(CurrentStepIndex + 1) of @Steps.Count
                        </RadzenText>
                        <RadzenProgressBar Value="@GetProgressPercentage()" Max="100"
                                          ProgressBarStyle="ProgressBarStyle.Light" />
                    </div>
                </div>
            </div>
        }

        <!-- Steps Content -->
        <div class="wizard-content">
            @for (int i = 0; i < Steps.Count; i++)
            {
                var step = Steps[i];
                var isActive = i == CurrentStepIndex;
                var isCompleted = i < CurrentStepIndex;

                <div class="wizard-step @(isActive ? "active" : "") @(isCompleted ? "completed" : "")"
                     style="display: @(isActive ? "block" : "none")">

                    <div class="step-header">
                        <div class="step-icon">
                            <RadzenIcon Icon="@(isCompleted ? "check_circle" : step.Icon)" />
                        </div>
                        <div>
                            <RadzenText TextStyle="TextStyle.H6" Class="mb-1">@step.Title</RadzenText>
                            @if (!string.IsNullOrWhiteSpace(step.Description))
                            {
                                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">@step.Description</RadzenText>
                            }
                        </div>
                    </div>

                    <div class="step-content">
                        @step.Content
                    </div>
                </div>
            }
        </div>

        <!-- Footer -->
        <div class="wizard-footer">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    @if (ShowCancelButton)
                    {
                        <RadzenButton Text="@CancelButtonText" ButtonStyle="ButtonStyle.Light"
                                     Click="@(() => OnCancel.InvokeAsync(Model))" Size="ButtonSize.Medium" />
                    }
                </div>

                <div class="d-flex gap-2">
                    @if (CurrentStepIndex > 0)
                    {
                        <RadzenButton Text="@PreviousButtonText" ButtonStyle="ButtonStyle.Secondary"
                                     Icon="navigate_before" Click="@GoToPreviousStep"
                                     Size="ButtonSize.Medium" />
                    }

                    @if (CurrentStepIndex < Steps.Count - 1)
                    {
                        <RadzenButton Text="@NextButtonText" ButtonStyle="ButtonStyle.Primary"
                                     Icon="navigate_next" IconPosition="IconPosition.Right"
                                     Click="@GoToNextStep" Disabled="@(!CanProceedToNextStep())"
                                     Size="ButtonSize.Medium" />
                    }
                    else
                    {
                        <RadzenButton Text="@CompleteButtonText" ButtonStyle="ButtonStyle.Success"
                                     Icon="check_circle" IconPosition="IconPosition.Right"
                                     Click="@(() => OnComplete.InvokeAsync(Model))" Disabled="@(!CanComplete())"
                                     Size="ButtonSize.Medium" />
                    }
                </div>
            </div>
        </div>
    </div>
    </Content>
</CustomModal>

@code {
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Subtitle { get; set; } = "";
    [Parameter] public string HeaderIcon { get; set; } = "";
    [Parameter] public List<WizardStep> Steps { get; set; } = new();
    [Parameter] public int CurrentStepIndex { get; set; } = 0;
    [Parameter] public TModel? Model { get; set; }

    [Parameter] public string Width { get; set; } = "900px";
    [Parameter] public string Height { get; set; } = "auto";
    [Parameter] public string MinWidth { get; set; } = "800px";
    [Parameter] public string MaxWidth { get; set; } = "1200px";
    [Parameter] public string MaxHeight { get; set; } = "90vh";
    [Parameter] public bool Resizable { get; set; } = true;

    [Parameter] public bool ShowCancelButton { get; set; } = true;
    [Parameter] public string CancelButtonText { get; set; } = "Cancel";
    [Parameter] public string PreviousButtonText { get; set; } = "Previous";
    [Parameter] public string NextButtonText { get; set; } = "Next";
    [Parameter] public string CompleteButtonText { get; set; } = "Complete";

    [Parameter] public EventCallback<TModel?> OnCancel { get; set; }
    [Parameter] public EventCallback<TModel?> OnComplete { get; set; }
    [Parameter] public EventCallback<int> OnStepChanged { get; set; }
    [Parameter] public Func<int, bool>? CanProceedToStep { get; set; }
    [Parameter] public Func<bool>? CanComplete { get; set; }

    public bool IsVisible { get; set; } = false;

    public class WizardStep
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Icon { get; set; } = "circle";
        public RenderFragment Content { get; set; } = default!;
        public bool IsValid { get; set; } = true;
    }

    public async Task ShowAsync(TModel? model = default)
    {
        Model = model;
        CurrentStepIndex = 0;
        IsVisible = true;
        StateHasChanged();
    }

    public async Task HideAsync()
    {
        IsVisible = false;
        StateHasChanged();
    }

    private double GetProgressPercentage()
    {
        if (Steps.Count == 0) return 0;
        return ((double)(CurrentStepIndex + 1) / Steps.Count) * 100;
    }

    private async Task GoToNextStep()
    {
        if (CurrentStepIndex < Steps.Count - 1 && CanProceedToNextStep())
        {
            CurrentStepIndex++;
            await OnStepChanged.InvokeAsync(CurrentStepIndex);
            StateHasChanged();
        }
    }

    private async Task GoToPreviousStep()
    {
        if (CurrentStepIndex > 0)
        {
            CurrentStepIndex--;
            await OnStepChanged.InvokeAsync(CurrentStepIndex);
            StateHasChanged();
        }
    }

    private bool CanProceedToNextStep()
    {
        if (CanProceedToStep != null)
            return CanProceedToStep(CurrentStepIndex);

        return CurrentStepIndex < Steps.Count && Steps[CurrentStepIndex].IsValid;
    }

    public async Task SetStepValidity(int stepIndex, bool isValid)
    {
        if (stepIndex >= 0 && stepIndex < Steps.Count)
        {
            Steps[stepIndex].IsValid = isValid;
            StateHasChanged();
        }
    }
}