@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Services.Enhanced
@inherits OptimizedComponentBase

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <RadzenCard Class="mb-4">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <RadzenText TextStyle="TextStyle.H3" Class="text-primary mb-1">
                            <RadzenIcon Icon="@Configuration.PageIcon" Class="me-2" />
                            @Configuration.PageTitle
                        </RadzenText>
                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="text-muted">
                            @Configuration.PageDescription
                        </RadzenText>
                    </div>
                    <div class="d-flex align-items-center gap-3">
                        <RadzenBadge BadgeStyle="@GetOverallStatusBadge()" Text="@GetOverallStatusText()" Class="px-3 py-2" />
                        @foreach (var action in Configuration.Actions)
                        {
                            @if (action.IsVisible)
                            {
                                <RadzenButton Text="@action.Text"
                                             Icon="@action.Icon"
                                             ButtonStyle="@GetButtonStyle(action.ButtonStyle)"
                                             Click="@(() => HandleActionClick(action))"
                                             Size="ButtonSize.Medium" />
                            }
                        }
                    </div>
                </div>

                <!-- Stats Cards -->
                <StatsCardGrid Stats="@GetStatsCards()" Columns="@Configuration.StatsConfig.Columns" />

                <!-- Filters -->
                @if (Configuration.Filters.Any(f => f.IsVisible))
                {
                    <RadzenCard Class="mb-4">
                        <div class="row align-items-center">
                            @foreach (var filter in Configuration.Filters.Where(f => f.IsVisible))
                            {
                                <div class="col-md-3">
                                    @RenderFilter(filter)
                                </div>
                            }
                        </div>
                    </RadzenCard>
                }

                <!-- Tab Content -->
                <RadzenTabs @bind-SelectedIndex="selectedTabIndex">
                    <Tabs>
                        @foreach (var tab in Configuration.Tabs.Where(t => t.IsVisible))
                        {
                            <RadzenTabsItem Text="@tab.Title">
                                @RenderTabContent(tab)
                            </RadzenTabsItem>
                        }
                    </Tabs>
                </RadzenTabs>
            </RadzenCard>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public QuestionnairePageConfiguration Configuration { get; set; } = default!;
    [Parameter, EditorRequired] public IQuestionnaireDataService DataService { get; set; } = default!;
    [Parameter] public EventCallback<QuestionnaireAssignment> OnStartQuestionnaire { get; set; }

    private List<QuestionnaireAssignment> allAssignments = new();
    private List<EmployeeDto> employees = new();
    private object? additionalData = null;

    // Lazy loading state
    private int currentPage = 1;
    private const int pageSize = 20;
    private bool hasMoreData = true;
    private bool isLoadingMore = false;

    // Filter values
    private string searchFilter = "";
    private Guid? categoryFilter = null;
    private string statusFilter = "";
    private string departmentFilter = "";

    private int selectedTabIndex = 0;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override bool HasStateChanged()
    {
        return HasParameterChanged(nameof(allAssignments), allAssignments.Count) ||
               HasParameterChanged(nameof(isLoading), isLoading) ||
               HasParameterChanged(nameof(isLoadingMore), isLoadingMore) ||
               HasParameterChanged(nameof(selectedTabIndex), selectedTabIndex);
    }

    private async Task LoadData()
    {
        isLoading = true;
        NotifyStateChanged();

        try
        {
            await ExecuteSafelyAsync(async () =>
            {
                // Load initial page of data using lazy loading
                var pagedResult = await PerformanceOptimizer.LazyLoader.LoadPagedDataAsync(
                    async (page, size) => await GetAssignmentsPaginated(page, size),
                    1,
                    pageSize,
                    async () => await GetAssignmentsTotalCount()
                );

                if (pagedResult.IsSuccess)
                {
                    allAssignments = pagedResult.Data;
                    hasMoreData = pagedResult.HasNextPage;
                    currentPage = 1;
                }

                // Load other data in parallel
                // Note: Templates are now denormalized in assignments, no need to fetch separately
                var employeesTask = DataService.GetEmployeesAsync();
                var additionalDataTask = DataService.GetAdditionalDataAsync();

                await Task.WhenAll(employeesTask, additionalDataTask);

                employees = employeesTask.Result;
                additionalData = additionalDataTask.Result;
            }, "LoadData");
        }
        finally
        {
            isLoading = false;
            NotifyStateChanged();
        }
    }

    private List<StatsCardGrid.StatCard> GetStatsCards()
    {
        return Configuration.StatsConfig.StatCards.Select(config => new StatsCardGrid.StatCard
        {
            Label = config.Label,
            Value = config.ValueCalculator().ToString() ?? "0",
            Icon = config.Icon,
            IconClass = config.IconClass,
            CssClass = config.CssClass
        }).ToList();
    }

    private RenderFragment RenderFilter(QuestionnairePageFilter filter) => __builder =>
    {
        <RadzenText TextStyle="TextStyle.Body2" Class="mb-2">@filter.Label</RadzenText>

        @switch (filter.Type)
        {
            case QuestionnaireFilterType.Search:
                <RadzenTextBox @bind-Value="searchFilter"
                              Placeholder="Search..."
                              Class="w-100"
                              oninput="@(() => ApplyFilters())" />
                break;

            case QuestionnaireFilterType.Category:
                <RadzenDropDown @bind-Value="categoryFilter"
                               Data="@filter.CategoryOptions"
                               TextProperty="NameEn"
                               ValueProperty="Id"
                               Change="@ApplyFilters"
                               Placeholder="All Categories"
                               AllowClear="true"
                               Class="w-100" />
                break;

            case QuestionnaireFilterType.Status:
                <RadzenDropDown @bind-Value="statusFilter"
                               Data="@filter.Options"
                               Change="@ApplyFilters"
                               Placeholder="All Status"
                               Class="w-100" />
                break;

            case QuestionnaireFilterType.Department:
                <RadzenDropDown @bind-Value="departmentFilter"
                               Data="@filter.Options"
                               Change="@ApplyFilters"
                               Placeholder="All Departments"
                               AllowClear="true"
                               AllowFiltering="true"
                               Class="w-100" />
                break;

            case QuestionnaireFilterType.DateRange:
                <div class="d-flex gap-2">
                    <RadzenDatePicker TValue="DateTime?" Class="w-50" Placeholder="From" />
                    <RadzenDatePicker TValue="DateTime?" Class="w-50" Placeholder="To" />
                </div>
                break;
        }
    };

    private RenderFragment RenderTabContent(QuestionnairePageTab tab) => __builder =>
    {
        @switch (tab.Type)
        {
            case QuestionnaireTabType.Current:
                @RenderQuestionnaireList(GetCurrentAssignments())
                break;

            case QuestionnaireTabType.Upcoming:
                @RenderQuestionnaireList(GetUpcomingAssignments())
                break;

            case QuestionnaireTabType.Completed:
                @RenderQuestionnaireList(GetCompletedAssignments())
                break;

            case QuestionnaireTabType.Overdue:
                @RenderQuestionnaireList(GetOverdueAssignments())
                break;

            case QuestionnaireTabType.TeamView:
                @RenderTeamView()
                break;

            case QuestionnaireTabType.Analytics:
                @RenderAnalyticsView()
                break;

            default:
                <div class="text-center p-5">
                    <RadzenText TextStyle="TextStyle.Body1" Class="text-muted">Content for @tab.Title is not yet implemented.</RadzenText>
                </div>
                break;
        }
    };

    private RenderFragment RenderQuestionnaireList(List<QuestionnaireAssignment> assignments) => __builder =>
    {
        @if (isLoading)
        {
            <div class="text-center p-5">
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
                <RadzenText TextStyle="TextStyle.Body1" Class="text-muted mt-3">Loading questionnaires...</RadzenText>
            </div>
        }
        else if (!assignments.Any())
        {
            <div class="text-center p-5">
                <RadzenIcon Icon="quiz" Size="4rem" Class="text-muted mb-3" />
                <RadzenText TextStyle="TextStyle.H5" Class="text-muted mb-2">No questionnaires found</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Class="text-muted">No questionnaires match your current filters.</RadzenText>
            </div>
        }
        else
        {
            <!-- Use VirtualizedQuestionnaireList for high-performance rendering -->
            <VirtualizedQuestionnaireList AllAssignments="@allAssignments"
                                        ContainerHeight="600px"
                                        OnItemClick="@((assignment) => NavigateToQuestionnaire(assignment))"
                                        DataLoader="@GetAssignmentsPaginated"
                                        ItemTemplate="@RenderQuestionnaireCard" />
        }
    };

    private RenderFragment<QuestionnaireAssignment> RenderQuestionnaireCard => assignment => __builder =>
    {
        <RadzenCard Class="@($"questionnaire-card {GetCardCssClass(assignment)}")">
            <div class="d-flex justify-content-between align-items-start mb-3">
                <div class="flex-grow-1">
                    <RadzenText TextStyle="TextStyle.H6" Class="mb-1">@GetTemplateName(assignment)</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">@assignment.AssignedBy</RadzenText>
                </div>
                <RadzenBadge Text="@assignment.Status.ToString()"
                            BadgeStyle="@GetStatusBadgeStyle(assignment.Status)" />
            </div>

            @if (assignment.DueDate.HasValue)
            {
                <div class="mb-3">
                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                        <RadzenIcon Icon="event" Class="me-1" />
                        Due: @assignment.DueDate.Value.ToString("MMM dd, yyyy")
                    </RadzenText>
                </div>
            }

            <div class="questionnaire-actions">
                @if (Configuration.PageType == QuestionnairePageType.Employee)
                {
                    @if (assignment.Status == AssignmentStatus.Assigned || assignment.Status == AssignmentStatus.InProgress)
                    {
                        <RadzenButton Text="@(assignment.Status == AssignmentStatus.InProgress ? "Continue" : "Start")"
                                     ButtonStyle="ButtonStyle.Primary"
                                     Size="ButtonSize.Small"
                                     Click="@(() => NavigateToQuestionnaire(assignment))" />
                    }
                    else if (assignment.Status == AssignmentStatus.Completed)
                    {
                        <RadzenButton Text="View Results"
                                     ButtonStyle="ButtonStyle.Light"
                                     Size="ButtonSize.Small"
                                     Click="@(() => ViewResults(assignment))" />
                    }
                }
                else
                {
                    <RadzenButton Text="View Details"
                                 ButtonStyle="ButtonStyle.Light"
                                 Size="ButtonSize.Small"
                                 Click="@(() => ViewAssignmentDetails(assignment))" />
                }
            </div>
        </RadzenCard>
    };

    private RenderFragment RenderTeamView() => __builder =>
    {
        <div class="text-center p-5">
            <RadzenText TextStyle="TextStyle.Body1" Class="text-muted">Team view implementation would go here.</RadzenText>
        </div>
    };

    private RenderFragment RenderAnalyticsView() => __builder =>
    {
        <div class="text-center p-5">
            <RadzenText TextStyle="TextStyle.Body1" Class="text-muted">Analytics view implementation would go here.</RadzenText>
        </div>
    };

    // Filter and data manipulation methods
    private List<QuestionnaireAssignment> GetCurrentAssignments()
    {
        var baseAssignments = allAssignments.Where(a =>
            a.Status == AssignmentStatus.Assigned || a.Status == AssignmentStatus.InProgress).ToList();
        return ApplyFilteringToAssignments(baseAssignments);
    }

    private List<QuestionnaireAssignment> GetUpcomingAssignments()
    {
        var baseAssignments = allAssignments.Where(a =>
            a.Status == AssignmentStatus.Assigned &&
            a.AssignedDate > DateTime.Now.AddDays(-1)).ToList();
        return ApplyFilteringToAssignments(baseAssignments);
    }

    private List<QuestionnaireAssignment> GetCompletedAssignments()
    {
        var baseAssignments = allAssignments.Where(a => a.Status == AssignmentStatus.Completed).ToList();
        return ApplyFilteringToAssignments(baseAssignments);
    }

    private List<QuestionnaireAssignment> GetOverdueAssignments()
    {
        var baseAssignments = allAssignments.Where(a =>
            a.DueDate.HasValue &&
            a.DueDate.Value < DateTime.Now &&
            a.Status != AssignmentStatus.Completed).ToList();
        return ApplyFilteringToAssignments(baseAssignments);
    }

    // UI Helper methods
    private string GetCardCssClass(QuestionnaireAssignment assignment)
    {
        if (assignment.DueDate.HasValue && assignment.DueDate.Value < DateTime.Now && assignment.Status != AssignmentStatus.Completed)
            return "overdue-card";

        return assignment.Status switch
        {
            AssignmentStatus.InProgress => "inprogress-card",
            AssignmentStatus.Completed => "completed-card",
            _ => "assigned-card"
        };
    }

    private BadgeStyle GetStatusBadgeStyle(AssignmentStatus status)
    {
        return status switch
        {
            AssignmentStatus.Assigned => BadgeStyle.Secondary,
            AssignmentStatus.InProgress => BadgeStyle.Info,
            AssignmentStatus.Completed => BadgeStyle.Success,
            _ => BadgeStyle.Light
        };
    }

    private ButtonStyle GetButtonStyle(string buttonStyle)
    {
        return buttonStyle switch
        {
            "ButtonStyle.Primary" => ButtonStyle.Primary,
            "ButtonStyle.Info" => ButtonStyle.Info,
            "ButtonStyle.Light" => ButtonStyle.Light,
            _ => ButtonStyle.Light
        };
    }

    private BadgeStyle GetOverallStatusBadge()
    {
        var overdueCount = GetOverdueAssignments().Count;
        return overdueCount > 0 ? BadgeStyle.Danger : BadgeStyle.Success;
    }

    private string GetOverallStatusText()
    {
        var overdueCount = GetOverdueAssignments().Count;
        return overdueCount > 0 ? $"{overdueCount} Overdue" : "On Track";
    }

    // Event handlers
    private async Task HandleActionClick(QuestionnairePageAction action)
    {
        if (action.OnClick != null)
        {
            await action.OnClick.Invoke();
        }
        else
        {
            // Default implementations
            switch (action.Id)
            {
                case "refresh":
                    await LoadData();
                    break;
                case "export":
                    ShowInfo("Export functionality would be implemented here");
                    break;
                case "analytics":
                    ShowInfo("Analytics dashboard would be implemented here");
                    break;
            }
        }
    }

    private async Task LoadMoreData()
    {
        if (isLoadingMore || !hasMoreData) return;

        isLoadingMore = true;
        NotifyStateChanged();

        try
        {
            await ExecuteSafelyAsync(async () =>
            {
                var pagedResult = await PerformanceOptimizer.LazyLoader.LoadPagedDataAsync(
                    async (page, size) => await GetAssignmentsPaginated(page, size),
                    currentPage + 1,
                    pageSize,
                    async () => await GetAssignmentsTotalCount()
                );

                if (pagedResult.IsSuccess)
                {
                    allAssignments.AddRange(pagedResult.Data);
                    hasMoreData = pagedResult.HasNextPage;
                    currentPage++;
                }
            }, "LoadMoreData");
        }
        finally
        {
            isLoadingMore = false;
            NotifyStateChanged();
        }
    }

    private void ApplyFilters()
    {
        // Debounce filter application to avoid excessive API calls
        NotifyStateChangedDebounced(300);
    }

    private List<QuestionnaireAssignment> ApplyFilteringToAssignments(List<QuestionnaireAssignment> assignments)
    {
        var filteredAssignments = assignments.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchFilter))
        {
            filteredAssignments = filteredAssignments.Where(a =>
                a.EmployeeName.Contains(searchFilter, StringComparison.OrdinalIgnoreCase) ||
                GetTemplateName(a).Contains(searchFilter, StringComparison.OrdinalIgnoreCase));
        }

        // Apply department filter (organization-based)
        if (!string.IsNullOrEmpty(departmentFilter))
        {
            // Parse the selected organization from "Number - Name" format
            var selectedOrgNumber = ExtractOrganizationNumber(departmentFilter);
            if (selectedOrgNumber.HasValue)
            {
                // Get employee IDs that belong to the selected organization
                var employeeIdsInOrganization = employees
                    .Where(e => e.OrganizationNumber == selectedOrgNumber.Value)
                    .Select(e => e.Id)
                    .ToHashSet();

                filteredAssignments = filteredAssignments.Where(a =>
                    employeeIdsInOrganization.Contains(a.EmployeeId));
            }
        }

        // Apply status filter
        if (!string.IsNullOrEmpty(statusFilter) && statusFilter != "All")
        {
            if (Enum.TryParse<AssignmentStatus>(statusFilter.Replace(" ", ""), out var status))
            {
                filteredAssignments = filteredAssignments.Where(a => a.Status == status);
            }
            else if (statusFilter == "Pending")
            {
                filteredAssignments = filteredAssignments.Where(a =>
                    a.Status == AssignmentStatus.Assigned || a.Status == AssignmentStatus.InProgress);
            }
            else if (statusFilter == "Overdue")
            {
                filteredAssignments = filteredAssignments.Where(a =>
                    a.DueDate.HasValue && a.DueDate.Value < DateTime.Now && a.Status != AssignmentStatus.Completed);
            }
        }

        // Apply category filter
        if (categoryFilter.HasValue)
        {
            // Filter by questionnaire template category (using denormalized data)
            filteredAssignments = filteredAssignments.Where(a =>
                a.TemplateCategoryId == categoryFilter.Value);
        }

        return filteredAssignments.ToList();
    }

    private int? ExtractOrganizationNumber(string organizationFilter)
    {
        // Parse organization number from "Number - Name" format
        var dashIndex = organizationFilter.IndexOf(" - ");
        if (dashIndex > 0)
        {
            var numberPart = organizationFilter.Substring(0, dashIndex);
            if (int.TryParse(numberPart, out var orgNumber))
            {
                return orgNumber;
            }
        }
        return null;
    }


    private async Task NavigateToQuestionnaire(QuestionnaireAssignment assignment)
    {
        if (OnStartQuestionnaire.HasDelegate)
        {
            await OnStartQuestionnaire.InvokeAsync(assignment);
        }
        else
        {
            NavigateToPage($"/my-questionnaires/{assignment.TemplateId}");
        }
    }

    private async Task ViewResults(QuestionnaireAssignment assignment)
    {
        ShowInfo("Results view would be implemented here");
    }

    private async Task ViewAssignmentDetails(QuestionnaireAssignment assignment)
    {
        ShowInfo("Assignment details would be implemented here");
    }

    private string GetTemplateName(QuestionnaireAssignment assignment)
    {
        // Use denormalized template name from assignment
        return assignment.TemplateName;
    }

    // Helper methods that were in BasePageComponent
    private void NavigateToPage(string url)
    {
        // Navigation would be implemented here
        Console.WriteLine($"Navigating to: {url}");
    }

    private void ShowInfo(string message)
    {
        // Info notification would be implemented here
        Console.WriteLine($"Info: {message}");
    }

    private async Task<List<QuestionnaireAssignment>> GetAssignmentsPaginated(int page, int size)
    {
        // Simulate paginated data loading
        var assignments = await DataService.GetAssignmentsAsync();
        return assignments.Skip((page - 1) * size).Take(size).ToList();
    }

    private async Task<int> GetAssignmentsTotalCount()
    {
        // Simulate total count
        var assignments = await DataService.GetAssignmentsAsync();
        return assignments.Count;
    }
}