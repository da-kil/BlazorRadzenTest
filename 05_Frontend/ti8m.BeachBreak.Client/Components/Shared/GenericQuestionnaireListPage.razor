@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Services.Enhanced
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@inherits OptimizedComponentBase

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <RadzenCard Class="mb-4">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <RadzenText TextStyle="TextStyle.H3" Class="text-primary mb-1">
                            <RadzenIcon Icon="@Configuration.PageIcon" Class="me-2" />
                            @Configuration.PageTitle
                        </RadzenText>
                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="text-muted">
                            @Configuration.PageDescription
                        </RadzenText>
                    </div>
                    <div class="d-flex align-items-center gap-3">
                        <RadzenBadge BadgeStyle="@GetOverallStatusBadge()" Text="@GetOverallStatusText()" Class="px-3 py-2" />
                        @foreach (var action in Configuration.Actions)
                        {
                            @if (action.IsVisible)
                            {
                                <RadzenButton Text="@action.Text"
                                             Icon="@action.Icon"
                                             ButtonStyle="@GetButtonStyle(action.ButtonStyle)"
                                             Click="@(() => HandleActionClick(action))"
                                             Size="ButtonSize.Medium" />
                            }
                        }
                    </div>
                </div>

                <!-- Stats Cards -->
                <StatsCardGrid Stats="@GetStatsCards()" Columns="@Configuration.StatsConfig.Columns" />

                <!-- Filters -->
                @if (Configuration.Filters.Any(f => f.IsVisible))
                {
                    <RadzenCard Class="mb-4">
                        <div class="row align-items-center">
                            @foreach (var filter in Configuration.Filters.Where(f => f.IsVisible))
                            {
                                <div class="col-md-3">
                                    @RenderFilter(filter)
                                </div>
                            }
                        </div>
                    </RadzenCard>
                }

                <!-- Tab Content -->
                <RadzenTabs @bind-SelectedIndex="selectedTabIndex">
                    <Tabs>
                        @foreach (var tab in Configuration.Tabs.Where(t => t.IsVisible))
                        {
                            <RadzenTabsItem Text="@tab.Title">
                                @RenderTabContent(tab)
                            </RadzenTabsItem>
                        }
                    </Tabs>
                </RadzenTabs>
            </RadzenCard>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public QuestionnairePageConfiguration Configuration { get; set; } = default!;
    [Parameter, EditorRequired] public IQuestionnaireDataService DataService { get; set; } = default!;
    [Parameter] public EventCallback<QuestionnaireAssignment> OnStartQuestionnaire { get; set; }
    [Parameter] public Func<Guid, bool>? HasProgressChecker { get; set; }

    private List<QuestionnaireAssignment> allAssignments = new();
    private List<EmployeeDto> employees = new();
    private object? additionalData = null;

    // Lazy loading state
    private int currentPage = 1;
    private const int pageSize = 20;
    private bool hasMoreData = true;
    private bool isLoadingMore = false;

    // Filter values
    private string searchFilter = "";
    private Guid? categoryFilter = null;
    private Guid? templateFilter = null;
    private string statusFilter = "";
    private string departmentFilter = "";

    private int selectedTabIndex = 0;
    private bool isLoading = false;

    // Team view specific state
    private string teamMemberSortBy = "Name";
    private readonly List<string> teamSortOptions = new() { "Name", "Progress", "Overdue", "Assignments" };
    private List<EmployeeDto> filteredTeamMembers = new();
    private Dictionary<Guid, List<QuestionnaireAssignment>> memberAssignmentsCache = new();

    // Questionnaire view specific state
    private string questionnaireSortBy = "Name";
    private readonly List<string> questionnaireSortOptions = new() { "Name", "Completion", "Overdue", "Assignments" };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override bool HasStateChanged()
    {
        // For filteredTeamMembers, track the actual list to detect order changes during sorting
        // (tracking count alone won't detect sort order changes)
        var filteredMembersIdentity = filteredTeamMembers.Count > 0
            ? string.Join(",", filteredTeamMembers.Select(m => m.Id))
            : "";

        return HasParameterChanged(nameof(allAssignments), allAssignments.Count) ||
               HasParameterChanged(nameof(isLoading), isLoading) ||
               HasParameterChanged(nameof(isLoadingMore), isLoadingMore) ||
               HasParameterChanged(nameof(selectedTabIndex), selectedTabIndex) ||
               HasParameterChanged(nameof(filteredTeamMembers), filteredMembersIdentity) ||
               HasParameterChanged(nameof(statusFilter), statusFilter) ||
               HasParameterChanged(nameof(templateFilter), templateFilter?.ToString() ?? "") ||
               HasParameterChanged(nameof(teamMemberSortBy), teamMemberSortBy) ||
               HasParameterChanged(nameof(memberAssignmentsCache), memberAssignmentsCache.Count);
    }

    private async Task LoadData()
    {
        // For employee view, data is already pre-categorized and passed via Configuration
        // No need to reload from API - this prevents overwriting the correct categorization
        if (Configuration != null && Configuration.PageType == QuestionnairePageType.Employee)
        {
            // Just populate allAssignments for backward compatibility with filters
            // Combine all categorized lists
            allAssignments = Configuration.CurrentAssignments
                .Concat(Configuration.UpcomingAssignments)
                .Concat(Configuration.CompletedAssignments)
                .Concat(Configuration.OverdueAssignments)
                .Distinct()
                .ToList();

            return;
        }

        // For Manager/HR views, load data from API as before
        isLoading = true;
        NotifyStateChanged();

        try
        {
            await ExecuteSafelyAsync(async () =>
            {
                // Load initial page of data using lazy loading
                var pagedResult = await PerformanceOptimizer.LazyLoader.LoadPagedDataAsync(
                    async (page, size) => await GetAssignmentsPaginated(page, size),
                    1,
                    pageSize,
                    async () => await GetAssignmentsTotalCount()
                );

                if (pagedResult.IsSuccess)
                {
                    allAssignments = pagedResult.Data;
                    hasMoreData = pagedResult.HasNextPage;
                    currentPage = 1;
                }

                // Load other data in parallel
                // Note: Templates are now denormalized in assignments, no need to fetch separately
                var employeesTask = DataService.GetEmployeesAsync();
                var additionalDataTask = DataService.GetAdditionalDataAsync();

                await Task.WhenAll(employeesTask, additionalDataTask);

                employees = employeesTask.Result;
                additionalData = additionalDataTask.Result;

                // Initialize filtered lists after data is loaded
                UpdateFilteredTeamMembers();
            }, "LoadData");
        }
        finally
        {
            isLoading = false;
            NotifyStateChanged();
        }
    }

    private List<StatsCardGrid.StatCard> GetStatsCards()
    {
        return Configuration.StatsConfig.StatCards.Select(config => new StatsCardGrid.StatCard
        {
            Label = config.Label,
            Value = config.ValueCalculator().ToString() ?? "0",
            Icon = config.Icon,
            IconClass = config.IconClass,
            CssClass = config.CssClass
        }).ToList();
    }

    private RenderFragment RenderFilter(QuestionnairePageFilter filter) => __builder =>
    {
        <RadzenText TextStyle="TextStyle.Body2" Class="mb-2">@filter.Label</RadzenText>

        @switch (filter.Type)
        {
            case QuestionnaireFilterType.Search:
                <RadzenTextBox @bind-Value="searchFilter"
                              Placeholder="Search..."
                              Class="w-100"
                              oninput="@(() => ApplyFilters())" />
                break;

            case QuestionnaireFilterType.Category:
                <RadzenDropDown @bind-Value="categoryFilter"
                               Data="@filter.CategoryOptions"
                               TextProperty="NameEn"
                               ValueProperty="Id"
                               Change="@ApplyFilters"
                               Placeholder="All Categories"
                               AllowClear="true"
                               Class="w-100" />
                break;

            case QuestionnaireFilterType.Template:
                <RadzenDropDown TValue="Guid?"
                               Value="@templateFilter"
                               Data="@filter.TemplateOptions"
                               TextProperty="Name"
                               ValueProperty="Id"
                               ValueChanged="@OnTemplateFilterChanged"
                               Placeholder="All Questionnaires"
                               AllowClear="true"
                               Class="w-100" />
                break;

            case QuestionnaireFilterType.Status:
                <RadzenDropDown TValue="string"
                               Value="@statusFilter"
                               Data="@filter.Options"
                               ValueChanged="@((string value) => { statusFilter = value; ApplyFilters(); })"
                               Placeholder="All Status"
                               Class="w-100" />
                break;

            case QuestionnaireFilterType.Department:
                <RadzenDropDown @bind-Value="departmentFilter"
                               Data="@filter.Options"
                               Change="@ApplyFilters"
                               Placeholder="All Departments"
                               AllowClear="true"
                               AllowFiltering="true"
                               Class="w-100" />
                break;

            case QuestionnaireFilterType.DateRange:
                <div class="d-flex gap-2">
                    <RadzenDatePicker TValue="DateTime?" Class="w-50" Placeholder="From" />
                    <RadzenDatePicker TValue="DateTime?" Class="w-50" Placeholder="To" />
                </div>
                break;
        }
    };

    private RenderFragment RenderTabContent(QuestionnairePageTab tab) => __builder =>
    {
        @switch (tab.Type)
        {
            case QuestionnaireTabType.Current:
                @RenderQuestionnaireList(GetCurrentAssignments())
                break;

            case QuestionnaireTabType.Upcoming:
                @RenderQuestionnaireList(GetUpcomingAssignments())
                break;

            case QuestionnaireTabType.Completed:
                @RenderQuestionnaireList(GetCompletedAssignments())
                break;

            case QuestionnaireTabType.Overdue:
                @RenderQuestionnaireList(GetOverdueAssignments())
                break;

            case QuestionnaireTabType.TeamView:
                @RenderTeamView()
                break;

            case QuestionnaireTabType.QuestionnaireView:
                @RenderQuestionnaireView()
                break;

            case QuestionnaireTabType.Analytics:
                @RenderAnalyticsView()
                break;

            default:
                <div class="text-center p-5">
                    <RadzenText TextStyle="TextStyle.Body1" Class="text-muted">Content for @tab.Title is not yet implemented.</RadzenText>
                </div>
                break;
        }
    };

    private RenderFragment RenderQuestionnaireList(List<QuestionnaireAssignment> assignments) => __builder =>
    {
        @if (isLoading)
        {
            <div class="text-center p-5">
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
                <RadzenText TextStyle="TextStyle.Body1" Class="text-muted mt-3">Loading questionnaires...</RadzenText>
            </div>
        }
        else if (!assignments.Any())
        {
            <div class="text-center p-5">
                <RadzenIcon Icon="quiz" Size="4rem" Class="text-muted mb-3" />
                <RadzenText TextStyle="TextStyle.H5" Class="text-muted mb-2">No questionnaires found</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Class="text-muted">No questionnaires match your current filters.</RadzenText>
            </div>
        }
        else
        {
            <!-- Use VirtualizedQuestionnaireList for high-performance rendering -->
            <VirtualizedQuestionnaireList AllAssignments="@assignments"
                                        ContainerHeight="600px"
                                        OnItemClick="@((assignment) => NavigateToQuestionnaire(assignment))"
                                        DataLoader="@GetAssignmentsPaginated"
                                        ItemTemplate="@RenderQuestionnaireCard" />
        }
    };

    private RenderFragment<QuestionnaireAssignment> RenderQuestionnaireCard => assignment => __builder =>
    {
        var isOverdue = IsOverdue(assignment);
        var dueDateColor = isOverdue ? "var(--rz-danger)" : "var(--rz-text-secondary-color)";
        var dueDateTextColor = isOverdue ? "var(--rz-danger)" : "inherit";

        <RadzenCard Class="@($"questionnaire-card mb-3 {GetCardCssClass(assignment)}")" Style="border-left: 4px solid var(--rz-primary);">
            <div class="d-flex justify-content-between align-items-start">
                <div class="flex-grow-1">
                    <!-- Questionnaire Title -->
                    <div class="d-flex align-items-center gap-2 mb-2">
                        <RadzenIcon Icon="quiz" Style="color: var(--rz-primary);" />
                        <RadzenText TextStyle="TextStyle.H6" Class="mb-0" Style="font-weight: 600;">
                            @GetTemplateName(assignment)
                        </RadzenText>
                    </div>

                    <!-- Workflow State Badge (if not default) -->
                    @if (assignment.WorkflowState != WorkflowState.Assigned)
                    {
                        <div class="mt-2">
                            <RadzenBadge Text="@WorkflowStateHelper.GetStateDisplayName(assignment.WorkflowState)"
                                        BadgeStyle="BadgeStyle.Light"
                                        Style="@($"font-size: 0.75rem; background-color: {WorkflowStateHelper.GetStateColor(assignment.WorkflowState)}; color: white;")" />
                        </div>
                    }

                    <!-- Assignment Details Grid -->
                    <div class="row g-3 mt-2">
                        <div class="col-md-4">
                            <div class="d-flex align-items-center gap-2">
                                <RadzenIcon Icon="person" Style="font-size: 1rem; color: var(--rz-text-secondary-color);" />
                                <div>
                                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted mb-0" Style="font-size: 0.7rem; text-transform: uppercase; letter-spacing: 0.5px;">
                                        Assigned By
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2" Class="mb-0" Style="font-weight: 500;">
                                        @assignment.AssignedBy
                                    </RadzenText>
                                </div>
                            </div>
                        </div>

                        @if (assignment.DueDate.HasValue)
                        {
                            <div class="col-md-4">
                                <div class="d-flex align-items-center gap-2">
                                    <RadzenIcon Icon="event" Style="@($"font-size: 1rem; color: {dueDateColor};")" />
                                    <div>
                                        <RadzenText TextStyle="TextStyle.Caption" Class="text-muted mb-0" Style="font-size: 0.7rem; text-transform: uppercase; letter-spacing: 0.5px;">
                                            Due Date
                                        </RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2" Class="mb-0" Style="@($"font-weight: 500; color: {dueDateTextColor};")">
                                            @assignment.DueDate.Value.ToString("MMM dd, yyyy")
                                            @if (isOverdue)
                                            {
                                                <span style="font-size: 0.75rem; color: var(--rz-danger);"> (Overdue)</span>
                                            }
                                        </RadzenText>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Action Button -->
                <div class="ms-3">
                    @if (Configuration.PageType == QuestionnairePageType.Employee)
                    {
                        @if (IsQuestionnaireCompleted(assignment))
                        {
                            <RadzenButton Text="VIEW"
                                         Icon="visibility"
                                         ButtonStyle="ButtonStyle.Success"
                                         Size="ButtonSize.Medium"
                                         Style="min-width: 120px; font-weight: 600;"
                                         Click="@(() => NavigateToQuestionnaire(assignment))" />
                        }
                        else if (WorkflowStateHelper.CanEmployeeEdit(assignment))
                        {
                            // Can edit if: Assigned, EmployeeInProgress, BothInProgress, or InReview
                            var hasProgress = assignment.WorkflowState != WorkflowState.Assigned;
                            <RadzenButton Text="@(hasProgress ? "CONTINUE" : "START")"
                                         Icon="@(hasProgress ? "play_circle" : "play_arrow")"
                                         ButtonStyle="ButtonStyle.Primary"
                                         Size="ButtonSize.Medium"
                                         Style="min-width: 120px; font-weight: 600;"
                                         Click="@(() => NavigateToQuestionnaire(assignment))" />
                        }
                        else
                        {
                            // Employee has submitted, waiting for manager or in review confirmation states
                            <RadzenButton Text="VIEW"
                                         Icon="visibility"
                                         ButtonStyle="ButtonStyle.Info"
                                         Size="ButtonSize.Medium"
                                         Style="min-width: 120px; font-weight: 600;"
                                         Disabled="@(!WorkflowStateHelper.CanEmployeeEdit(assignment))"
                                         Click="@(() => NavigateToQuestionnaire(assignment))" />
                        }
                    }
                    else
                    {
                        <RadzenButton Text="DETAILS"
                                     Icon="info"
                                     ButtonStyle="ButtonStyle.Light"
                                     Size="ButtonSize.Medium"
                                     Style="min-width: 120px;"
                                     Click="@(() => ViewAssignmentDetails(assignment))" />
                    }
                </div>
            </div>
        </RadzenCard>
    };

    private RenderFragment RenderTeamView() => __builder =>
    {
        @if (isLoading)
        {
            <div class="text-center p-5">
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
                <RadzenText TextStyle="TextStyle.Body1" Class="text-muted mt-3">Loading team data...</RadzenText>
            </div>
        }
        else if (!employees.Any())
        {
            <div class="text-center p-5">
                <RadzenIcon Icon="groups" Size="4rem" Class="text-muted mb-3" />
                <RadzenText TextStyle="TextStyle.H5" Class="text-muted mb-2">No team members found</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Class="text-muted">Your team members will appear here once they are assigned.</RadzenText>
            </div>
        }
        else
        {
            <div class="team-view-container">
                <div class="mb-3 d-flex justify-content-between align-items-center">
                    <RadzenText TextStyle="TextStyle.Subtitle1">
                        Showing @filteredTeamMembers.Count of @employees.Count team members
                    </RadzenText>
                    <div class="d-flex align-items-center gap-2">
                        <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-0">Sort by:</RadzenText>
                        <RadzenDropDown TValue="string"
                                       Value="@teamMemberSortBy"
                                       Data="@teamSortOptions"
                                       ValueChanged="@((string value) => { teamMemberSortBy = value; ApplyFilters(); })"
                                       Placeholder="Name"
                                       Class="w-auto"
                                       Style="min-width: 150px;" />
                    </div>
                </div>

                @foreach (var member in filteredTeamMembers)
                {
                    var memberAssignments = memberAssignmentsCache.TryGetValue(member.Id, out var assignments)
                        ? assignments
                        : new List<QuestionnaireAssignment>();
                    <TeamMemberCard @key="@member.Id"
                                   TeamMember="@member"
                                   Assignments="@memberAssignments"
                                   OnSendReminder="@HandleSendReminder"
                                   OnAssignmentClick="@HandleAssignmentClick" />
                }
            </div>
        }
    };

    private RenderFragment RenderQuestionnaireView() => __builder =>
    {
        @if (isLoading)
        {
            <div class="text-center p-5">
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
                <RadzenText TextStyle="TextStyle.Body1" Class="text-muted mt-3">Loading questionnaire data...</RadzenText>
            </div>
        }
        else if (!allAssignments.Any())
        {
            <div class="text-center p-5">
                <RadzenIcon Icon="quiz" Size="4rem" Class="text-muted mb-3" />
                <RadzenText TextStyle="TextStyle.H5" Class="text-muted mb-2">No questionnaires assigned</RadzenText>
                <RadzenText TextStyle="TextStyle.Body1" Class="text-muted">Questionnaires assigned to your team will appear here.</RadzenText>
            </div>
        }
        else
        {
            <div class="questionnaire-view-container">
                <div class="mb-3 d-flex justify-content-between align-items-center">
                    <RadzenText TextStyle="TextStyle.Subtitle1">
                        Showing @GetGroupedQuestionnaires().Count questionnaire @(GetGroupedQuestionnaires().Count == 1 ? "template" : "templates")
                    </RadzenText>
                    <div class="d-flex align-items-center gap-2">
                        <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-0">Sort by:</RadzenText>
                        <RadzenDropDown @bind-Value="questionnaireSortBy"
                                       Data="@questionnaireSortOptions"
                                       Change="@(() => NotifyStateChanged())"
                                       Placeholder="Name"
                                       Class="w-auto"
                                       Style="min-width: 150px;" />
                    </div>
                </div>

                @foreach (var questionnaireGroup in GetGroupedQuestionnaires())
                {
                    <QuestionnaireTemplateCard TemplateId="@questionnaireGroup.TemplateId"
                                              TemplateName="@questionnaireGroup.TemplateName"
                                              CategoryName="@questionnaireGroup.CategoryName"
                                              Assignments="@questionnaireGroup.Assignments"
                                              OnSendReminders="@HandleSendQuestionnaireReminders"
                                              OnViewAnalytics="@HandleViewQuestionnaireAnalytics"
                                              OnAssignmentClick="@HandleAssignmentClick" />
                }
            </div>
        }
    };

    private RenderFragment RenderAnalyticsView() => __builder =>
    {
        <div class="text-center p-5">
            <RadzenText TextStyle="TextStyle.Body1" Class="text-muted">Analytics view implementation would go here.</RadzenText>
        </div>
    };

    // Filter and data manipulation methods
    private List<QuestionnaireAssignment> GetCurrentAssignments()
    {
        // For employee view, use pre-categorized lists (they've already been filtered correctly)
        // For manager/HR views, use allAssignments with fallback filtering
        var baseAssignments = Configuration.PageType == QuestionnairePageType.Employee
            ? Configuration.CurrentAssignments
            : allAssignments.Where(a => a.WorkflowState != WorkflowState.Finalized).ToList();

        return ApplyFilteringToAssignments(baseAssignments);
    }

    private List<QuestionnaireAssignment> GetUpcomingAssignments()
    {
        // For employee view, use pre-categorized lists (they've already been filtered correctly)
        // For manager/HR views, use allAssignments with fallback filtering
        var baseAssignments = Configuration.PageType == QuestionnairePageType.Employee
            ? Configuration.UpcomingAssignments
            : allAssignments.Where(a =>
                a.WorkflowState == WorkflowState.Assigned &&
                a.AssignedDate > DateTime.Now.AddDays(-1)).ToList();
        return ApplyFilteringToAssignments(baseAssignments);
    }

    private List<QuestionnaireAssignment> GetCompletedAssignments()
    {
        // For employee view, use pre-categorized lists (they've already been filtered correctly)
        // For manager/HR views, use allAssignments with fallback filtering
        var baseAssignments = Configuration.PageType == QuestionnairePageType.Employee
            ? Configuration.CompletedAssignments
            : allAssignments.Where(a => a.WorkflowState == WorkflowState.Finalized).ToList();

        return ApplyFilteringToAssignments(baseAssignments);
    }

    private List<QuestionnaireAssignment> GetOverdueAssignments()
    {
        // For employee view, use pre-categorized lists (they've already been filtered correctly)
        // For manager/HR views, use allAssignments with fallback filtering
        var baseAssignments = Configuration.PageType == QuestionnairePageType.Employee
            ? Configuration.OverdueAssignments
            : allAssignments.Where(a =>
                a.DueDate.HasValue &&
                a.DueDate.Value < DateTime.Now &&
                a.WorkflowState != WorkflowState.Finalized).ToList();
        return ApplyFilteringToAssignments(baseAssignments);
    }

    // UI Helper methods
    private string GetCardCssClass(QuestionnaireAssignment assignment)
    {
        if (assignment.DueDate.HasValue && assignment.DueDate.Value < DateTime.Now && assignment.WorkflowState != WorkflowState.Finalized)
            return "overdue-card";

        return assignment.WorkflowState switch
        {
            WorkflowState.EmployeeInProgress or WorkflowState.ManagerInProgress or WorkflowState.BothInProgress => "inprogress-card",
            WorkflowState.Finalized => "completed-card",
            _ => "assigned-card"
        };
    }

    private bool IsOverdue(QuestionnaireAssignment assignment)
    {
        return assignment.DueDate.HasValue &&
               assignment.DueDate.Value < DateTime.Now &&
               assignment.WorkflowState != WorkflowState.Finalized;
    }

    private ButtonStyle GetButtonStyle(string buttonStyle)
    {
        return buttonStyle switch
        {
            "ButtonStyle.Primary" => ButtonStyle.Primary,
            "ButtonStyle.Info" => ButtonStyle.Info,
            "ButtonStyle.Light" => ButtonStyle.Light,
            _ => ButtonStyle.Light
        };
    }

    private BadgeStyle GetOverallStatusBadge()
    {
        var overdueCount = GetOverdueAssignments().Count;
        return overdueCount > 0 ? BadgeStyle.Danger : BadgeStyle.Success;
    }

    private string GetOverallStatusText()
    {
        var overdueCount = GetOverdueAssignments().Count;
        return overdueCount > 0 ? $"{overdueCount} Overdue" : "On Track";
    }

    // Event handlers
    private async Task HandleActionClick(QuestionnairePageAction action)
    {
        if (action.OnClick != null)
        {
            await action.OnClick.Invoke();
        }
        else
        {
            // Default implementations
            switch (action.Id)
            {
                case "refresh":
                    await LoadData();
                    break;
                case "export":
                    ShowInfo("Export functionality would be implemented here");
                    break;
                case "analytics":
                    ShowInfo("Analytics dashboard would be implemented here");
                    break;
            }
        }
    }

    private async Task LoadMoreData()
    {
        if (isLoadingMore || !hasMoreData) return;

        isLoadingMore = true;
        NotifyStateChanged();

        try
        {
            await ExecuteSafelyAsync(async () =>
            {
                var pagedResult = await PerformanceOptimizer.LazyLoader.LoadPagedDataAsync(
                    async (page, size) => await GetAssignmentsPaginated(page, size),
                    currentPage + 1,
                    pageSize,
                    async () => await GetAssignmentsTotalCount()
                );

                if (pagedResult.IsSuccess)
                {
                    allAssignments.AddRange(pagedResult.Data);
                    hasMoreData = pagedResult.HasNextPage;
                    currentPage++;
                }
            }, "LoadMoreData");
        }
        finally
        {
            isLoadingMore = false;
            NotifyStateChanged();
        }
    }

    private void OnTemplateFilterChanged(Guid? value)
    {
        templateFilter = value;
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        // Recompute filtered/sorted lists when filters change
        UpdateFilteredTeamMembers();

        // Force immediate synchronous state change
        StateHasChanged();
    }

    private void UpdateFilteredTeamMembers()
    {
        filteredTeamMembers = ComputeFilteredTeamMembers();

        // Pre-compute assignments for all filtered members
        memberAssignmentsCache.Clear();
        foreach (var member in filteredTeamMembers)
        {
            var assignments = GetFilteredAssignmentsForMember(member);
            memberAssignmentsCache[member.Id] = assignments;
        }
    }

    private List<EmployeeDto> ComputeFilteredTeamMembers()
    {
        var filteredMembers = employees.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchFilter))
        {
            filteredMembers = filteredMembers.Where(e =>
                $"{e.FirstName} {e.LastName}".Contains(searchFilter, StringComparison.OrdinalIgnoreCase) ||
                e.EMail.Contains(searchFilter, StringComparison.OrdinalIgnoreCase));
        }

        // Apply department filter
        if (!string.IsNullOrEmpty(departmentFilter))
        {
            var selectedOrgNumber = ExtractOrganizationNumber(departmentFilter);
            if (selectedOrgNumber.HasValue)
            {
                filteredMembers = filteredMembers.Where(e => e.OrganizationNumber == selectedOrgNumber.Value);
            }
        }

        // Filter members who have assignments matching current filters
        // Only apply assignment filtering if we have actual filter values (not "All" for status)
        if ((!string.IsNullOrEmpty(statusFilter) && statusFilter != "All") || templateFilter.HasValue)
        {
            filteredMembers = filteredMembers
                .Where(member => GetFilteredAssignmentsForMember(member).Any());
        }

        // Apply sorting
        var sortedMembers = teamMemberSortBy switch
        {
            "Name" => filteredMembers.OrderBy(e => e.LastName).ThenBy(e => e.FirstName),
            "Progress" => filteredMembers.OrderByDescending(e => GetMemberProgressPercentage(e)),
            "Overdue" => filteredMembers.OrderByDescending(e => GetMemberOverdueCount(e)),
            "Assignments" => filteredMembers.OrderByDescending(e => GetMemberAssignmentCount(e)),
            _ => filteredMembers.OrderBy(e => e.LastName)
        };

        return sortedMembers.ToList();
    }

    private List<QuestionnaireAssignment> ApplyFilteringToAssignments(List<QuestionnaireAssignment> assignments)
    {
        var filteredAssignments = assignments.AsEnumerable();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchFilter))
        {
            filteredAssignments = filteredAssignments.Where(a =>
                a.EmployeeName.Contains(searchFilter, StringComparison.OrdinalIgnoreCase) ||
                GetTemplateName(a).Contains(searchFilter, StringComparison.OrdinalIgnoreCase));
        }

        // Apply department filter (organization-based)
        if (!string.IsNullOrEmpty(departmentFilter))
        {
            // Parse the selected organization from "Number - Name" format
            var selectedOrgNumber = ExtractOrganizationNumber(departmentFilter);
            if (selectedOrgNumber.HasValue)
            {
                // Get employee IDs that belong to the selected organization
                var employeeIdsInOrganization = employees
                    .Where(e => e.OrganizationNumber == selectedOrgNumber.Value)
                    .Select(e => e.Id)
                    .ToHashSet();

                filteredAssignments = filteredAssignments.Where(a =>
                    employeeIdsInOrganization.Contains(a.EmployeeId));
            }
        }

        // Apply status filter
        if (!string.IsNullOrEmpty(statusFilter) && statusFilter != "All")
        {
            if (Enum.TryParse<WorkflowState>(statusFilter.Replace(" ", ""), out var state))
            {
                filteredAssignments = filteredAssignments.Where(a => a.WorkflowState == state);
            }
            else if (statusFilter == "Pending")
            {
                filteredAssignments = filteredAssignments.Where(a =>
                    a.WorkflowState != WorkflowState.Finalized);
            }
            else if (statusFilter == "Overdue")
            {
                filteredAssignments = filteredAssignments.Where(a =>
                    a.DueDate.HasValue && a.DueDate.Value < DateTime.Now && a.WorkflowState != WorkflowState.Finalized);
            }
        }

        // Apply category filter
        if (categoryFilter.HasValue)
        {
            // Filter by questionnaire template category (using denormalized data)
            filteredAssignments = filteredAssignments.Where(a =>
                a.TemplateCategoryId == categoryFilter.Value);
        }

        // Apply template filter
        if (templateFilter.HasValue)
        {
            filteredAssignments = filteredAssignments.Where(a =>
                a.TemplateId == templateFilter.Value);
        }

        return filteredAssignments.ToList();
    }

    private int? ExtractOrganizationNumber(string organizationFilter)
    {
        // Parse organization number from "Number - Name" format
        var dashIndex = organizationFilter.IndexOf(" - ");
        if (dashIndex > 0)
        {
            var numberPart = organizationFilter.Substring(0, dashIndex);
            if (int.TryParse(numberPart, out var orgNumber))
            {
                return orgNumber;
            }
        }
        return null;
    }


    private async Task NavigateToQuestionnaire(QuestionnaireAssignment assignment)
    {
        if (OnStartQuestionnaire.HasDelegate)
        {
            await OnStartQuestionnaire.InvokeAsync(assignment);
        }
        else
        {
            // Use new assignment-based route
            NavigationManager.NavigateTo($"/questionnaire/{assignment.Id}");
        }
    }

    private async Task ViewResults(QuestionnaireAssignment assignment)
    {
        ShowInfo("Results view would be implemented here");
    }

    private async Task ViewAssignmentDetails(QuestionnaireAssignment assignment)
    {
        ShowInfo("Assignment details would be implemented here");
    }

    private string GetTemplateName(QuestionnaireAssignment assignment)
    {
        // Use denormalized template name from assignment
        return !string.IsNullOrWhiteSpace(assignment.TemplateName)
            ? assignment.TemplateName
            : "Questionnaire";
    }

    // Helper methods that were in BasePageComponent
    private void NavigateToPage(string url)
    {
        NavigationManager.NavigateTo(url);
    }

    private async Task HandleAssignmentClick(Guid assignmentId)
    {
        NavigationManager.NavigateTo($"/questionnaire/{assignmentId}");
    }

    private void ShowInfo(string message)
    {
        // Info notification would be implemented here
        Console.WriteLine($"Info: {message}");
    }

    private bool IsQuestionnaireCompleted(QuestionnaireAssignment assignment)
    {
        if (assignment == null) return false;

        // For employees: questionnaire is "completed" (read-only VIEW button) when:
        // - Employee has submitted (EmployeeSubmitted, BothSubmitted)
        // - In review phase (InReview, EmployeeReviewConfirmed, ManagerReviewConfirmed)
        // - Finalized
        return assignment.WorkflowState is WorkflowState.EmployeeSubmitted or WorkflowState.BothSubmitted
            or WorkflowState.InReview or WorkflowState.EmployeeReviewConfirmed or WorkflowState.ManagerReviewConfirmed
            or WorkflowState.Finalized;
    }

    private async Task<List<QuestionnaireAssignment>> GetAssignmentsPaginated(int page, int size)
    {
        // Simulate paginated data loading
        var assignments = await DataService.GetAssignmentsAsync();
        return assignments.Skip((page - 1) * size).Take(size).ToList();
    }

    private async Task<int> GetAssignmentsTotalCount()
    {
        // Simulate total count
        var assignments = await DataService.GetAssignmentsAsync();
        return assignments.Count;
    }

    // Team view helper methods

    private List<QuestionnaireAssignment> GetFilteredAssignmentsForMember(EmployeeDto member)
    {
        // Get all assignments for this member
        var memberAssignments = allAssignments
            .Where(a => a.EmployeeId.ToString() == member.Id.ToString())
            .AsEnumerable();

        // Apply status filter
        if (!string.IsNullOrEmpty(statusFilter) && statusFilter != "All")
        {
            memberAssignments = statusFilter switch
            {
                "Pending" => memberAssignments.Where(a => a.WorkflowState != WorkflowState.Finalized),
                "In Progress" => memberAssignments.Where(a =>
                    a.WorkflowState is WorkflowState.EmployeeInProgress
                    or WorkflowState.ManagerInProgress
                    or WorkflowState.BothInProgress
                    or WorkflowState.EmployeeSubmitted
                    or WorkflowState.ManagerSubmitted),
                "Completed" => memberAssignments.Where(a => a.WorkflowState == WorkflowState.Finalized),
                "Overdue" => memberAssignments.Where(a =>
                    a.DueDate.HasValue &&
                    a.DueDate.Value < DateTime.Now &&
                    a.WorkflowState != WorkflowState.Finalized),
                _ => memberAssignments
            };
        }

        // Apply questionnaire/template filter
        if (templateFilter.HasValue)
        {
            memberAssignments = memberAssignments.Where(a => a.TemplateId == templateFilter.Value);
        }

        return memberAssignments.ToList();
    }

    private int GetMemberAssignmentCount(EmployeeDto member)
    {
        return allAssignments.Count(a => a.EmployeeId.ToString() == member.Id.ToString());
    }

    private int GetMemberOverdueCount(EmployeeDto member)
    {
        return allAssignments.Count(a =>
            a.EmployeeId.ToString() == member.Id.ToString() &&
            a.DueDate.HasValue &&
            a.DueDate.Value < DateTime.Now &&
            a.WorkflowState != WorkflowState.Finalized);
    }

    private double GetMemberProgressPercentage(EmployeeDto member)
    {
        var memberAssignments = allAssignments.Where(a => a.EmployeeId.ToString() == member.Id.ToString()).ToList();
        if (!memberAssignments.Any()) return 0;

        var completed = memberAssignments.Count(a => a.WorkflowState == WorkflowState.Finalized);
        return (double)completed / memberAssignments.Count * 100;
    }

    private async Task HandleSendReminder(EmployeeDto member)
    {
        ShowInfo($"Sending reminder to {member.FirstName} {member.LastName}...");
        // TODO: Implement actual reminder sending logic
    }

    // Questionnaire view helper methods
    private List<QuestionnaireGroup> GetGroupedQuestionnaires()
    {
        // Group assignments by template
        var grouped = allAssignments
            .GroupBy(a => new { a.TemplateId, a.TemplateName, a.TemplateCategoryId })
            .Select(g => new QuestionnaireGroup
            {
                TemplateId = g.Key.TemplateId,
                TemplateName = g.Key.TemplateName,
                CategoryId = g.Key.TemplateCategoryId ?? Guid.Empty,
                Assignments = g.ToList()
            })
            .ToList();

        // Apply search filter
        if (!string.IsNullOrEmpty(searchFilter))
        {
            grouped = grouped.Where(q =>
                q.TemplateName.Contains(searchFilter, StringComparison.OrdinalIgnoreCase) ||
                q.CategoryName.Contains(searchFilter, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        // Apply status filter
        if (!string.IsNullOrEmpty(statusFilter) && statusFilter != "All")
        {
            grouped = grouped.Where(q => q.Assignments.Any(a => MatchesStatusFilter(a, statusFilter))).ToList();
        }

        // Apply category filter
        if (categoryFilter.HasValue)
        {
            grouped = grouped.Where(q => q.CategoryId == categoryFilter.Value).ToList();
        }

        // Apply template filter
        if (templateFilter.HasValue)
        {
            grouped = grouped.Where(q => q.TemplateId == templateFilter.Value).ToList();
        }

        // Apply sorting
        grouped = questionnaireSortBy switch
        {
            "Name" => grouped.OrderBy(q => q.TemplateName).ToList(),
            "Completion" => grouped.OrderByDescending(q => q.CompletionPercentage).ToList(),
            "Overdue" => grouped.OrderByDescending(q => q.OverdueCount).ToList(),
            "Assignments" => grouped.OrderByDescending(q => q.Assignments.Count).ToList(),
            _ => grouped.OrderBy(q => q.TemplateName).ToList()
        };

        return grouped;
    }

    private bool MatchesStatusFilter(QuestionnaireAssignment assignment, string statusFilter)
    {
        return statusFilter switch
        {
            "Pending" => assignment.WorkflowState != WorkflowState.Finalized,
            "In Progress" => assignment.WorkflowState == WorkflowState.EmployeeInProgress ||
                            assignment.WorkflowState == WorkflowState.ManagerInProgress ||
                            assignment.WorkflowState == WorkflowState.BothInProgress,
            "Completed" => assignment.WorkflowState == WorkflowState.Finalized,
            "Overdue" => assignment.DueDate.HasValue && assignment.DueDate.Value < DateTime.Now && assignment.WorkflowState != WorkflowState.Finalized,
            _ => true
        };
    }

    private async Task HandleSendQuestionnaireReminders(Guid templateId)
    {
        var questionnaire = GetGroupedQuestionnaires().FirstOrDefault(q => q.TemplateId == templateId);
        if (questionnaire != null)
        {
            ShowInfo($"Sending reminders for '{questionnaire.TemplateName}' to {questionnaire.OverdueCount} team members...");
            // TODO: Implement actual reminder sending logic
        }
    }

    private async Task HandleViewQuestionnaireAnalytics(Guid templateId)
    {
        var questionnaire = GetGroupedQuestionnaires().FirstOrDefault(q => q.TemplateId == templateId);
        if (questionnaire != null)
        {
            ShowInfo($"Viewing analytics for '{questionnaire.TemplateName}'...");
            // TODO: Implement analytics view
        }
    }

    // Helper class for questionnaire grouping
    private class QuestionnaireGroup
    {
        public Guid TemplateId { get; set; }
        public string TemplateName { get; set; } = string.Empty;
        public Guid CategoryId { get; set; }
        public List<QuestionnaireAssignment> Assignments { get; set; } = new();

        public string CategoryName
        {
            get
            {
                // TODO: Get actual category name from category service
                return string.Empty;
            }
        }

        public double CompletionPercentage =>
            Assignments.Count > 0
                ? Math.Round((double)Assignments.Count(a => a.WorkflowState == WorkflowState.Finalized) / Assignments.Count * 100, 1)
                : 0;

        public int OverdueCount =>
            Assignments.Count(a =>
                a.DueDate.HasValue &&
                a.DueDate.Value < DateTime.Now &&
                a.WorkflowState != WorkflowState.Finalized);
    }
}