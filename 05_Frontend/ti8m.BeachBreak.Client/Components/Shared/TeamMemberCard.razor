@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models

<RadzenCard Class="team-member-card mb-3">
    <div class="d-flex align-items-start justify-content-between mb-3">
        <div class="d-flex align-items-center flex-grow-1">
            <div class="team-member-avatar me-3">
                <RadzenIcon Icon="person" Style="font-size: 2rem;" Class="text-primary" />
            </div>
            <div>
                <RadzenText TextStyle="TextStyle.H6" Class="mb-1">@TeamMember.FirstName @TeamMember.LastName</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-1">@TeamMember.EMail</RadzenText>
                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                    <RadzenIcon Icon="badge" Style="font-size: 0.875rem;" Class="me-1" />
                    @TeamMember.Role
                </RadzenText>
            </div>
        </div>
        <div class="text-end">
            <RadzenBadge Text="@($"{CompletedCount} of {TotalCount} Finalized")"
                        BadgeStyle="@GetProgressBadgeStyle()"
                        Class="px-3 py-2"
                        data-toggle="tooltip"
                        title="@($"{CompletedCount} questionnaires finalized out of {TotalCount} total assignments")" />
        </div>
    </div>

    @if (Assignments.Any())
    {
        <!-- Simplified Summary Line -->
        <div class="mb-3">
            <div class="d-flex align-items-center gap-3 flex-wrap">
                @if (OverdueCount > 0)
                {
                    <RadzenBadge Text="@($"⚠️ {OverdueCount} Overdue")"
                                BadgeStyle="BadgeStyle.Danger"
                                Class="px-2 py-1" />
                }
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-0">
                    <RadzenIcon Icon="task_alt" Style="font-size: 0.875rem;" Class="text-success me-1" />
                    @CompletedCount Finalized
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-0">
                    <RadzenIcon Icon="pending_actions" Style="font-size: 0.875rem;" Class="text-info me-1" />
                    @InProgressCount In Progress
                </RadzenText>
                @if (PendingCount > 0)
                {
                    <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-0">
                        <RadzenIcon Icon="schedule" Style="font-size: 0.875rem;" Class="text-warning me-1" />
                        @PendingCount Not Started
                    </RadzenText>
                }
            </div>
        </div>

        <!-- Assignments List - Always Visible, Aligned with Questionnaire View -->
        <div class="assignments-list mt-3">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <RadzenText TextStyle="TextStyle.Subtitle2" Class="text-primary">
                    <RadzenIcon Icon="touch_app" Style="font-size: 1rem;" Class="me-1" />
                    Click to Review & Complete
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                    @Assignments.Count @(Assignments.Count == 1 ? "assignment" : "assignments")
                </RadzenText>
            </div>
            <div class="assignment-details-list">
                @foreach (var assignment in Assignments.Take(10))
                {
                    <div class="assignment-detail-item d-flex justify-content-between align-items-center p-2 mb-2 border-start border-3 @GetBorderClass(assignment)">
                        <div class="flex-grow-1" style="cursor: pointer;" @onclick="@(() => OnAssignmentClick.InvokeAsync(assignment.Id))">
                            <RadzenText TextStyle="TextStyle.Body2" Class="mb-1">
                                <RadzenIcon Icon="description" Style="font-size: 0.875rem;" Class="me-1" />
                                @assignment.TemplateName
                            </RadzenText>
                            @if (assignment.DueDate.HasValue)
                            {
                                <RadzenText TextStyle="TextStyle.Caption" Class="@GetDueDateClass(assignment)">
                                    <RadzenIcon Icon="event" Style="font-size: 0.75rem;" />
                                    Due: @assignment.DueDate.Value.ToString("MMM dd, yyyy")
                                    @if (assignment.DueDate.Value < DateTime.Now && assignment.WorkflowState != WorkflowState.Finalized)
                                    {
                                        <span class="text-danger fw-bold"> (Overdue by @((DateTime.Now - assignment.DueDate.Value).Days) days)</span>
                                    }
                                </RadzenText>
                            }
                        </div>
                        <div class="d-flex align-items-center gap-2">
                            <RadzenBadge Text="@WorkflowStateHelper.GetStateDisplayName(assignment.WorkflowState)"
                                        BadgeStyle="BadgeStyle.Light"
                                        Style="@($"background-color: {WorkflowStateHelper.GetStateColor(assignment.WorkflowState)}; color: white;")" />
                            @if (CanReopen(assignment))
                            {
                                <RadzenButton Icon="restart_alt"
                                            ButtonStyle="ButtonStyle.Warning"
                                            Size="ButtonSize.Small"
                                            Variant="Variant.Outlined"
                                            Click="@((args) => OnReopenAssignment(assignment))"
                                            title="Reopen this questionnaire for corrections"
                                            @onclick:stopPropagation="true"
                                            Style="min-width: 32px; padding: 4px 8px;" />
                            }
                            @if (OnSendReminder.HasDelegate && assignment.WorkflowState != WorkflowState.Finalized)
                            {
                                <RadzenButton Icon="notifications"
                                            ButtonStyle="ButtonStyle.Secondary"
                                            Size="ButtonSize.Small"
                                            Variant="Variant.Outlined"
                                            Click="@((args) => OnSendReminderForAssignment(assignment))"
                                            title="Send reminder for this questionnaire"
                                            @onclick:stopPropagation="true"
                                            Style="min-width: 32px; padding: 4px 8px;" />
                            }
                        </div>
                    </div>
                }
                @if (Assignments.Count > 10)
                {
                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted text-center mt-2">
                        +@(Assignments.Count - 10) more assignments
                    </RadzenText>
                }
            </div>
        </div>
    }
    else
    {
        <div class="text-center p-3">
            <RadzenIcon Icon="assignment" Class="text-muted mb-2" Style="font-size: 2rem;" />
            <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">No assignments yet</RadzenText>
        </div>
    }
</RadzenCard>

@code {
    [Parameter, EditorRequired] public EmployeeDto TeamMember { get; set; } = default!;
    [Parameter, EditorRequired] public List<QuestionnaireAssignment> Assignments { get; set; } = new();
    [Parameter] public EventCallback<EmployeeDto> OnSendReminder { get; set; }
    [Parameter] public EventCallback<Guid> OnAssignmentClick { get; set; }
    [Parameter] public EventCallback<QuestionnaireAssignment> OnReopenClick { get; set; }

    private int TotalCount => Assignments.Count;
    // Completed: ONLY Finalized state (consistent with employee view)
    private int CompletedCount => Assignments.Count(a => a.WorkflowState == WorkflowState.Finalized);
    // Pending: Just assigned, not started yet
    private int PendingCount => Assignments.Count(a => a.WorkflowState == WorkflowState.Assigned);
    // In Progress: Work started but not finalized (includes all working, submitted, and review states)
    private int InProgressCount => Assignments.Count(a =>
        a.WorkflowState is WorkflowState.EmployeeInProgress
        or WorkflowState.ManagerInProgress
        or WorkflowState.BothInProgress
        or WorkflowState.EmployeeSubmitted
        or WorkflowState.ManagerSubmitted
        or WorkflowState.BothSubmitted
        or WorkflowState.InReview
        or WorkflowState.EmployeeReviewConfirmed
        or WorkflowState.ManagerReviewConfirmed);
    private int OverdueCount => Assignments.Count(a =>
        a.DueDate.HasValue &&
        a.DueDate.Value < DateTime.Now &&
        a.WorkflowState != WorkflowState.Finalized);

    private double ProgressPercentage => TotalCount > 0 ? Math.Round((double)CompletedCount / TotalCount * 100, 1) : 0;

    private BadgeStyle GetProgressBadgeStyle()
    {
        if (OverdueCount > 0) return BadgeStyle.Danger;
        if (ProgressPercentage >= 100) return BadgeStyle.Success;
        if (ProgressPercentage >= 50) return BadgeStyle.Info;
        return BadgeStyle.Warning;
    }

    private BadgeStyle GetStatusBadgeStyle(WorkflowState state)
    {
        return state switch
        {
            WorkflowState.Assigned => BadgeStyle.Secondary,
            WorkflowState.EmployeeInProgress or WorkflowState.ManagerInProgress or WorkflowState.BothInProgress => BadgeStyle.Info,
            WorkflowState.EmployeeSubmitted or WorkflowState.ManagerSubmitted or WorkflowState.BothSubmitted => BadgeStyle.Primary,
            WorkflowState.InReview or WorkflowState.EmployeeReviewConfirmed or WorkflowState.ManagerReviewConfirmed => BadgeStyle.Warning,
            WorkflowState.Finalized => BadgeStyle.Success,
            _ => BadgeStyle.Light
        };
    }

    private string GetBorderClass(QuestionnaireAssignment assignment)
    {
        if (assignment.DueDate.HasValue && assignment.DueDate.Value < DateTime.Now && assignment.WorkflowState != WorkflowState.Finalized)
            return "border-danger";

        return assignment.WorkflowState switch
        {
            WorkflowState.Assigned => "border-warning",
            WorkflowState.EmployeeInProgress or WorkflowState.ManagerInProgress or WorkflowState.BothInProgress => "border-info",
            WorkflowState.EmployeeSubmitted or WorkflowState.ManagerSubmitted => "border-info",
            WorkflowState.BothSubmitted or WorkflowState.InReview or WorkflowState.EmployeeReviewConfirmed or WorkflowState.ManagerReviewConfirmed => "border-primary",
            WorkflowState.Finalized => "border-success",
            _ => "border-secondary"
        };
    }

    private string GetDueDateClass(QuestionnaireAssignment assignment)
    {
        if (assignment.DueDate.HasValue && assignment.DueDate.Value < DateTime.Now && assignment.WorkflowState != WorkflowState.Finalized)
            return "text-danger fw-bold";
        return "text-muted";
    }

    private async Task OnSendReminderForAssignment(QuestionnaireAssignment assignment)
    {
        // Invoke the reminder callback with the employee for this specific assignment
        // The parent component will handle showing the message
        await OnSendReminder.InvokeAsync(TeamMember);
    }

    private bool CanReopen(QuestionnaireAssignment assignment)
    {
        // Can reopen if in a submitted or confirmed state (not Finalized, not in-progress)
        return assignment.WorkflowState == WorkflowState.EmployeeSubmitted ||
               assignment.WorkflowState == WorkflowState.ManagerSubmitted ||
               assignment.WorkflowState == WorkflowState.BothSubmitted ||
               assignment.WorkflowState == WorkflowState.InReview ||
               assignment.WorkflowState == WorkflowState.EmployeeReviewConfirmed ||
               assignment.WorkflowState == WorkflowState.ManagerReviewConfirmed;
    }

    private async Task OnReopenAssignment(QuestionnaireAssignment assignment)
    {
        if (OnReopenClick.HasDelegate)
        {
            await OnReopenClick.InvokeAsync(assignment);
        }
    }
}
