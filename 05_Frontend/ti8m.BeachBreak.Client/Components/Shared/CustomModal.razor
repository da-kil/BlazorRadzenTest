@typeparam TModel
@using Microsoft.AspNetCore.Components.Forms

@if (IsVisible)
{
    <div class="custom-modal-overlay" @onclick="@HandleOverlayClick" @onclick:stopPropagation="false">
        <div class="custom-modal-content"
             style="@($"width: {Width}; height: {Height}; min-width: {MinWidth}; max-width: {MaxWidth}; max-height: {MaxHeight}; {AdditionalStyle}")"
             @onclick:stopPropagation="true">

            @if (ShowCloseIcon)
            {
                <button class="custom-modal-close" @onclick="HandleClose" type="button">
                    <RadzenIcon Icon="close" />
                </button>
            }

            <div class="custom-modal-inner">
                @if (!string.IsNullOrEmpty(Title))
                {
                    <div class="modal-header">
                        <h3>@Title</h3>
                    </div>
                }

                <div class="modal-body">
                    @if (ShowForm && Model != null)
                    {
                        <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
                            @if (ValidationComponent != null)
                            {
                                @ValidationComponent
                            }
                            else
                            {
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                            }

                            @Content

                            <div class="modal-actions">
                                @if (ActionsContent != null)
                                {
                                    @ActionsContent
                                }
                                else
                                {
                                    <RadzenButton Text="@CancelText"
                                                  Click="@HandleCancel"
                                                  ButtonStyle="@CancelButtonStyle"
                                                  Disabled="@IsProcessing" />
                                    <RadzenButton Text="@SubmitText"
                                                  ButtonType="ButtonType.Submit"
                                                  ButtonStyle="@SubmitButtonStyle"
                                                  Disabled="@IsProcessing"
                                                  IsBusy="@IsProcessing" />
                                }
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        @Content

                        <div class="modal-actions">
                            @if (ActionsContent != null)
                            {
                                @ActionsContent
                            }
                            else if (ShowDefaultActions)
                            {
                                <RadzenButton Text="@CancelText"
                                              Click="@HandleCancel"
                                              ButtonStyle="@CancelButtonStyle"
                                              Disabled="@IsProcessing" />
                                <RadzenButton Text="@SubmitText"
                                              Click="@HandleSubmit"
                                              ButtonStyle="@SubmitButtonStyle"
                                              Disabled="@IsProcessing"
                                              IsBusy="@IsProcessing" />
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string Width { get; set; } = "600px";
    [Parameter] public string Height { get; set; } = "auto";
    [Parameter] public string MinWidth { get; set; } = "400px";
    [Parameter] public string MaxWidth { get; set; } = "90vw";
    [Parameter] public string MaxHeight { get; set; } = "90vh";
    [Parameter] public string AdditionalStyle { get; set; } = string.Empty;
    [Parameter] public bool ShowCloseIcon { get; set; } = true;
    [Parameter] public bool Resizable { get; set; } = false;
    [Parameter] public bool CloseOnOverlayClick { get; set; } = true;

    [Parameter] public TModel? Model { get; set; }
    [Parameter] public bool ShowForm { get; set; } = true;
    [Parameter] public RenderFragment? ValidationComponent { get; set; }
    [Parameter] public RenderFragment Content { get; set; } = default!;
    [Parameter] public RenderFragment? ActionsContent { get; set; }

    [Parameter] public bool ShowDefaultActions { get; set; } = true;
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public string SubmitText { get; set; } = "Save";
    [Parameter] public ButtonStyle CancelButtonStyle { get; set; } = ButtonStyle.Secondary;
    [Parameter] public ButtonStyle SubmitButtonStyle { get; set; } = ButtonStyle.Primary;

    [Parameter] public bool IsProcessing { get; set; } = false;
    [Parameter] public EventCallback<bool> IsProcessingChanged { get; set; }

    [Parameter] public EventCallback<TModel> OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<TModel> OnValidSubmit { get; set; }
    [Parameter] public EventCallback<EditContext> OnInvalidSubmit { get; set; }

    public async Task ShowAsync()
    {
        IsVisible = true;
        await IsVisibleChanged.InvokeAsync(IsVisible);
        StateHasChanged();
    }

    public async Task HideAsync()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
        StateHasChanged();
    }

    private async Task HandleOverlayClick()
    {
        if (CloseOnOverlayClick)
        {
            await HandleClose();
        }
    }

    private async Task HandleClose()
    {
        await OnClose.InvokeAsync();
        await HideAsync();
    }

    private async Task HandleCancel()
    {
        await OnCancel.InvokeAsync();
        await HideAsync();
    }

    private async Task HandleSubmit()
    {
        if (Model != null)
        {
            await OnSubmit.InvokeAsync(Model);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Model != null)
        {
            await OnValidSubmit.InvokeAsync(Model);
        }
    }

    private async Task HandleInvalidSubmit(EditContext context)
    {
        await OnInvalidSubmit.InvokeAsync(context);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsProcessingChanged.HasDelegate)
        {
            await IsProcessingChanged.InvokeAsync(IsProcessing);
        }
    }
}

<style>
    .custom-modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1050;
        padding: 1rem;
        box-sizing: border-box;
    }

    .custom-modal-content {
        background: white;
        border-radius: 8px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        position: relative;
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    .custom-modal-close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: transparent;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #6c757d;
        z-index: 10;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.2s ease;
    }

    .custom-modal-close:hover {
        background-color: #f8f9fa;
        color: #343a40;
    }

    .custom-modal-inner {
        display: flex;
        flex-direction: column;
        height: 100%;
        padding: 1.5rem;
        overflow: hidden;
    }

    .modal-header {
        border-bottom: 1px solid #dee2e6;
        padding-bottom: 1rem;
        margin-bottom: 1rem;
        flex-shrink: 0;
    }

    .modal-header h3 {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
        padding-right: 2rem;
    }

    .modal-body {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: auto;
        min-height: 0;
    }

    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 0.5rem;
        margin-top: 1.5rem;
        padding-top: 1rem;
        border-top: 1px solid #dee2e6;
        flex-shrink: 0;
    }

    .modal-actions .rz-button {
        min-width: 80px;
    }
</style>