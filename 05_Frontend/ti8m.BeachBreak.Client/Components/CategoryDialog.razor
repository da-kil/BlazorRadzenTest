@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Components.Shared

<BaseDialog TModel="Category"
            @bind-IsVisible="@isVisible"
            Title="@(IsEditMode ? "Edit Category" : "Create Category")"
            Model="@Category"
            ShowForm="true"
            OnValidSubmit="@OnValidSubmit"
            OnCancel="@OnCancel"
            SubmitText="@(IsEditMode ? "Update" : "Create")"
            CancelText="Cancel"
            IsProcessing="@isSaving"
            Width="700px">
    <Content>
        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="ðŸ‡¬ðŸ‡§ English">
                    <div class="p-3">
                        <div class="mb-3">
                            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Category Name (English) *</RadzenText>
                            <RadzenTextBox @bind-Value="@Category.NameEn"
                                          Placeholder="Enter category name in English"
                                          Class="w-100"
                                          MaxLength="100" />
                            <ValidationMessage For="@(() => Category.NameEn)" />
                        </div>

                        <div class="mb-3">
                            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Description (English)</RadzenText>
                            <RadzenTextArea @bind-Value="@Category.DescriptionEn"
                                           Placeholder="Enter category description in English"
                                           Rows="3"
                                           Class="w-100"
                                           MaxLength="500" />
                            <ValidationMessage For="@(() => Category.DescriptionEn)" />
                        </div>
                    </div>
                </RadzenTabsItem>
                <RadzenTabsItem Text="ðŸ‡©ðŸ‡ª Deutsch">
                    <div class="p-3">
                        <div class="mb-3">
                            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Category Name (German) *</RadzenText>
                            <RadzenTextBox @bind-Value="@Category.NameDe"
                                          Placeholder="Enter category name in German"
                                          Class="w-100"
                                          MaxLength="100" />
                            <ValidationMessage For="@(() => Category.NameDe)" />
                        </div>

                        <div class="mb-3">
                            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Description (German)</RadzenText>
                            <RadzenTextArea @bind-Value="@Category.DescriptionDe"
                                           Placeholder="Enter category description in German"
                                           Rows="3"
                                           Class="w-100"
                                           MaxLength="500" />
                            <ValidationMessage For="@(() => Category.DescriptionDe)" />
                        </div>
                    </div>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>

        <div class="row mb-3">
            <div class="col-md-6">
                <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Sort Order</RadzenText>
                <RadzenNumeric @bind-Value="@Category.SortOrder"
                              TValue="int"
                              Min="0"
                              Max="999"
                              Class="w-100" />
                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                    Lower numbers appear first
                </RadzenText>
            </div>
            <div class="col-md-6">
                <div class="mt-4">
                    <RadzenCheckBox @bind-Value="@Category.IsActive" Name="isActive" />
                    <RadzenLabel Text="Active" Component="isActive" Class="ms-2" />
                </div>
            </div>
        </div>
    </Content>
</BaseDialog>

@code {
    [Parameter, EditorRequired] public Category Category { get; set; } = null!;
    [Parameter, EditorRequired] public bool IsEditMode { get; set; }
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<Category> OnSave { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    [Inject] protected DialogService DialogService { get; set; } = default!;

    private bool isVisible = false;
    private bool isSaving = false;

    protected override void OnInitialized()
    {
        isVisible = IsVisible;
    }

    protected override void OnParametersSet()
    {
        isVisible = IsVisible;
    }

    private async Task OnValidSubmit(Category model)
    {
        if (string.IsNullOrWhiteSpace(model.NameEn) || string.IsNullOrWhiteSpace(model.NameDe))
        {
            return;
        }

        isSaving = true;

        try
        {
            model.NameEn = model.NameEn.Trim();
            model.NameDe = model.NameDe.Trim();
            model.DescriptionEn = model.DescriptionEn?.Trim() ?? string.Empty;
            model.DescriptionDe = model.DescriptionDe?.Trim() ?? string.Empty;
            model.LastModified = DateTime.Now;

            if (OnSave.HasDelegate)
            {
                await OnSave.InvokeAsync(model);
            }
            else
            {
                DialogService.Close(model);
            }

            isVisible = false;
            await IsVisibleChanged.InvokeAsync(false);
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task OnCancel()
    {
        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync();
        }
        else
        {
            DialogService.Close();
        }

        isVisible = false;
        await IsVisibleChanged.InvokeAsync(false);
    }
}