@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@inject DialogService DialogService
@implements IDisposable


<div class="question-editor-container">
    <div class="section-header mb-4">
        <div class="d-flex align-items-center justify-content-between">
            <div>
                <h3 class="section-title mb-1">Text Input Sections</h3>
                <p class="section-description mb-0 text-muted">@GetItemCountText() • @GetRequiredCountText()</p>
            </div>
            <div class="d-flex align-items-center gap-2">
                @if (TextSections.Count > 1)
                {
                    <RadzenCheckBox @bind-Value="@SelectAllChecked"
                                   @bind-Value:after="ToggleSelectAll"
                                   Class="me-2"
                                   Title="Select all sections" />
                    <span class="text-muted me-3">Select all</span>
                }
                <RadzenButton Text="@($"× {SelectedCount}")"
                            ButtonStyle="ButtonStyle.Danger"
                            Size="ButtonSize.Small"
                            Visible="@(SelectedCount > 0)"
                            Click="@DeleteSelected"
                            Title="Delete selected sections" />
                <button type="button" class="btn-ghost-modern text-primary" @onclick="AddTextSection">
                    + Add text section
                </button>
            </div>
        </div>
    </div>

    @if (TextSections.Count == 0)
    {
        <div class="empty-state-modern">
            <RadzenIcon Icon="psychology" Style="font-size: 3rem; color: var(--rz-text-disabled-color); margin-bottom: 1rem;" />
            <p class="text-muted mb-3">No text sections yet</p>
            <button type="button" class="btn-ghost-modern text-primary" @onclick="AddTextSection">
                + Add your first text section
            </button>
        </div>
    }

    @for (int i = 0; i < TextSections.Count; i++)
    {
        var sectionIndex = i;
        var textSection = TextSections[sectionIndex];

        <div class="section-card mb-3"
             @oncontextmenu="@(args => ShowContextMenu(args, sectionIndex))"
             @oncontextmenu:preventDefault="true">
            <div class="card-header d-flex align-items-center gap-3 p-3">
                <RadzenCheckBox @bind-Value="@textSection.IsSelected"
                               @bind-Value:after="UpdateSelectionCount"
                               Class="section-selector" />
                <div class="drag-handle-modern" title="Drag to reorder">
                    <RadzenIcon Icon="drag_indicator" Style="color: var(--rz-text-disabled-color); cursor: grab;" />
                </div>
                <div class="section-title-section flex-grow-1">
                    @if (textSection.IsEditingTitle)
                    {
                        <RadzenTextBox @bind-Value="@textSection.Title"
                                      @onblur="@(() => FinishEditingTitle(sectionIndex))"
                                      @onkeypress="@(args => HandleTitleKeyPress(args, sectionIndex))"
                                      Class="title-editor"
                                      Placeholder="@($"Text Section {sectionIndex + 1}")"
                                      @ref="@titleEditors[sectionIndex]" />
                    }
                    else
                    {
                        <h4 class="section-title-editable mb-0"
                           @onclick="@(() => StartEditingTitle(sectionIndex))"
                           title="Click to edit">
                            @(string.IsNullOrWhiteSpace(textSection.Title) ? $"Text Section {sectionIndex + 1}" : textSection.Title)
                            @if (IsSectionRequired(textSection))
                            {
                                <span class="text-danger">*</span>
                            }
                        </h4>
                    }
                </div>
                <div class="section-actions d-flex align-items-center gap-2">
                    <RadzenButton Icon="expand_more"
                                 ButtonStyle="ButtonStyle.Light"
                                 Size="ButtonSize.ExtraSmall"
                                 Class="@(textSection.IsExpanded == true ? "rotated" : "")"
                                 Click="@(() => ToggleExpanded(sectionIndex))"
                                 Title="@(textSection.IsExpanded == true ? "Collapse" : "Expand")" />
                    <button type="button" class="btn-icon-modern" @onclick="@(() => RemoveTextSection(sectionIndex))" title="Delete section">
                        <RadzenIcon Icon="close" Style="font-size: 1rem; color: var(--rz-text-disabled-color);" />
                    </button>
                </div>
            </div>

            @if (textSection.IsExpanded == true)
            {
                <div class="card-body p-3 pt-0">
                    <div class="mb-3">
                        <RadzenTextArea @bind-Value="@textSection.Description"
                                       @bind-Value:after="@(() => ShowAutoSaveIndicator(sectionIndex))"
                                       Placeholder="Describe what this question asks about (e.g., Where do you see yourself long-term in your professional career?)..."
                                       Rows="4"
                                       Class="w-100 description-textarea" />
                        @if (textSection.ShowAutoSave)
                        {
                            <small class="text-success mt-1 d-block auto-save-indicator">
                                <RadzenIcon Icon="check_circle" Style="font-size: 0.8rem;" /> Auto-saved
                            </small>
                        }
                    </div>

                    <div class="text-muted p-2 rounded" style="background-color: rgba(0, 123, 255, 0.05); border-left: 3px solid var(--primary-color);">
                        <small>
                            <RadzenIcon Icon="info" Style="font-size: 0.8rem;" /> Users will see a text area for detailed written responses
                        </small>
                    </div>
                </div>
            }
        </div>
    }

    <div class="d-flex justify-content-end gap-2 mt-4">
        <RadzenButton Text="Cancel"
                     ButtonStyle="ButtonStyle.Light"
                     Click="@Cancel" />
        <RadzenButton Text="Save"
                     ButtonStyle="ButtonStyle.Success"
                     Icon="save"
                     Click="@Save"
                     Disabled="@(!CanSave())" />
    </div>
</div>

@* Context Menu *@
@if (ShowContextMenuVisible)
{
    <div class="context-menu" style="position: fixed; top: @(ContextMenuY)px; left: @(ContextMenuX)px; z-index: 1000;">
        <div class="dropdown-menu show">
            <button class="dropdown-item" @onclick="@(() => DuplicateSection(ContextMenuSectionIndex))">
                <RadzenIcon Icon="content_copy" Class="me-2" /> Duplicate
            </button>
            <button class="dropdown-item text-danger" @onclick="@(() => RemoveTextSection(ContextMenuSectionIndex))">
                <RadzenIcon Icon="delete" Class="me-2" /> Delete
            </button>
        </div>
    </div>
    <div class="context-menu-backdrop" @onclick="HideContextMenu"></div>
}

@code {
    [Parameter] public QuestionItem Question { get; set; } = default!;
    [Parameter] public List<TextSection> TextSections { get; set; } = new();


    // UI State
    private bool SelectAllChecked = false;
    private int SelectedCount = 0;
    private bool ShowContextMenuVisible = false;
    private double ContextMenuX = 0;
    private double ContextMenuY = 0;
    private int ContextMenuSectionIndex = -1;
    private Dictionary<int, RadzenTextBox> titleEditors = new();
    private Dictionary<int, Timer> autoSaveTimers = new();

    protected override void OnInitialized()
    {

        // Ensure we have a working copy of text sections
        if (TextSections == null)
        {
            TextSections = new List<TextSection>();
        }

        // Load existing sections or create default one with smart defaults
        if (TextSections.Count == 0)
        {
            // Check if we have old format configuration
            if (Question.Configuration.ContainsKey("SectionTitle") || Question.Configuration.ContainsKey("SectionDescription"))
            {
                TextSections.Add(new TextSection
                {
                    Title = Question.Configuration.ContainsKey("SectionTitle") ? Question.Configuration["SectionTitle"].ToString() ?? "" : "",
                    Description = Question.Configuration.ContainsKey("SectionDescription") ? Question.Configuration["SectionDescription"].ToString() ?? "" : "",
                    IsExpanded = true,
                    IsEditingTitle = false,
                    IsSelected = false,
                    ShowAutoSave = false
                });
            }
            else
            {
                // Start with one section with smart defaults
                TextSections.Add(new TextSection
                {
                    Title = "Text Section 1",
                    Description = "",
                    IsExpanded = true,
                    IsEditingTitle = false,
                    IsSelected = false,
                    ShowAutoSave = false
                });
            }
        }

        // Initialize expanded state for existing sections
        foreach (var section in TextSections)
        {
            if (!section.IsExpanded.HasValue)
                section.IsExpanded = false;
        }

        StateHasChanged();
    }

    private void AddTextSection()
    {
        var newIndex = TextSections.Count + 1;
        TextSections.Add(new TextSection
        {
            Title = $"Text Section {newIndex}",
            Description = "",
            IsExpanded = true,
            IsEditingTitle = false,
            IsSelected = false,
            ShowAutoSave = false
        });
        StateHasChanged();
    }

    private void RemoveTextSection(int index)
    {
        if (index >= 0 && index < TextSections.Count)
        {
            TextSections.RemoveAt(index);
        }
    }

    // Helper methods for UI state
    private string GetItemCountText()
    {
        var count = TextSections.Count;
        return count == 1 ? "1 item" : $"{count} items";
    }

    private string GetRequiredCountText()
    {
        var requiredCount = TextSections.Count(s => IsSectionRequired(s));
        return requiredCount == 1 ? "1 required" : $"{requiredCount} required";
    }

    private bool IsSectionRequired(TextSection section)
    {
        // For now, all sections are required if they have content
        return !string.IsNullOrWhiteSpace(section.Title) || !string.IsNullOrWhiteSpace(section.Description);
    }

    // Selection management
    private void UpdateSelectionCount()
    {
        SelectedCount = TextSections.Count(s => s.IsSelected);
        SelectAllChecked = SelectedCount == TextSections.Count && TextSections.Count > 0;
        StateHasChanged();
    }

    private void ToggleSelectAll()
    {
        foreach (var section in TextSections)
        {
            section.IsSelected = SelectAllChecked;
        }
        UpdateSelectionCount();
    }

    private void DeleteSelected()
    {
        TextSections.RemoveAll(s => s.IsSelected);
        SelectedCount = 0;
        SelectAllChecked = false;
        StateHasChanged();
    }

    // Expansion management
    private void ToggleExpanded(int index)
    {
        if (index >= 0 && index < TextSections.Count)
        {
            TextSections[index].IsExpanded = !(TextSections[index].IsExpanded ?? false);
            StateHasChanged();
        }
    }

    // Inline editing
    private void StartEditingTitle(int index)
    {
        if (index >= 0 && index < TextSections.Count)
        {
            TextSections[index].IsEditingTitle = true;
            StateHasChanged();
        }
    }

    private void FinishEditingTitle(int index)
    {
        if (index >= 0 && index < TextSections.Count)
        {
            var section = TextSections[index];
            section.IsEditingTitle = false;
            if (string.IsNullOrWhiteSpace(section.Title))
            {
                section.Title = $"Text Section {index + 1}";
            }
            StateHasChanged();
        }
    }

    private void HandleTitleKeyPress(KeyboardEventArgs args, int index)
    {
        if (args.Key == "Enter")
        {
            FinishEditingTitle(index);
        }
    }

    // Context menu
    private void ShowContextMenu(MouseEventArgs args, int sectionIndex)
    {
        ContextMenuX = args.ClientX;
        ContextMenuY = args.ClientY;
        ContextMenuSectionIndex = sectionIndex;
        ShowContextMenuVisible = true;
        StateHasChanged();
    }

    private void HideContextMenu()
    {
        ShowContextMenuVisible = false;
        StateHasChanged();
    }

    private void DuplicateSection(int index)
    {
        if (index >= 0 && index < TextSections.Count)
        {
            var originalSection = TextSections[index];
            var duplicateSection = new TextSection
            {
                Title = $"{originalSection.Title} (Copy)",
                Description = originalSection.Description,
                IsExpanded = true,
                IsEditingTitle = false,
                IsSelected = false,
                ShowAutoSave = false
            };
            TextSections.Insert(index + 1, duplicateSection);
        }
        HideContextMenu();
    }

    // Auto-save indicator
    private void ShowAutoSaveIndicator(int index)
    {
        if (index >= 0 && index < TextSections.Count)
        {
            var section = TextSections[index];
            section.ShowAutoSave = true;

            // Clear existing timer
            if (autoSaveTimers.ContainsKey(index))
            {
                autoSaveTimers[index].Dispose();
            }

            // Set new timer to hide indicator after 2 seconds
            autoSaveTimers[index] = new Timer(_ => {
                section.ShowAutoSave = false;
                InvokeAsync(StateHasChanged);
                autoSaveTimers[index].Dispose();
                autoSaveTimers.Remove(index);
            }, null, 2000, Timeout.Infinite);

            StateHasChanged();
        }
    }

    // Dispose timers when component is disposed
    public void Dispose()
    {
        foreach (var timer in autoSaveTimers.Values)
        {
            timer?.Dispose();
        }
        autoSaveTimers.Clear();
    }

    private bool CanSave()
    {
        return TextSections.Count > 0 &&
               TextSections.All(s => !string.IsNullOrWhiteSpace(s.Title) && !string.IsNullOrWhiteSpace(s.Description));
    }

    private void Cancel()
    {
        DialogService.Close(null);
    }

    private void Save()
    {
        if (CanSave())
        {
            var result = new TextQuestionConfiguration
            {
                TextSections = TextSections.ToList()
            };
            DialogService.Close(result);
        }
    }

    public class TextSection
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public bool? IsExpanded { get; set; } = false;
        public bool IsEditingTitle { get; set; } = false;
        public bool IsSelected { get; set; } = false;
        public bool ShowAutoSave { get; set; } = false;
    }

    public class TextQuestionConfiguration
    {
        public List<TextSection> TextSections { get; set; } = new();
    }
}