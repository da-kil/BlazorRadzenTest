@using Radzen
@using Radzen.Blazor

<style>
    .rating-section {
        --primary-color: #2563eb;
        --text-color: #374151;
        --text-muted: #6b7280;
        --border-light: #f3f4f6;
        --rating-color: #fbbf24;

        margin-bottom: 3rem;
    }

    .section-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--text-color);
        margin: 0 0 2rem 0;
        letter-spacing: -0.025em;
    }

    .ratings-list {
        display: flex;
        flex-direction: column;
        gap: 2rem;
        margin-bottom: 2.5rem;
    }

    .rating-item {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .rating-label {
        font-size: 1rem;
        font-weight: 500;
        color: var(--text-color);
        line-height: 1.5;
    }

    .rating-input {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .rating-scale {
        display: flex;
        gap: 0.25rem;
    }

    .rating-value {
        font-size: 0.875rem;
        color: var(--text-muted);
        font-weight: 500;
    }

    .comment-block {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .comment-label {
        font-size: 1rem;
        font-weight: 500;
        color: var(--text-color);
    }

    .comment-field {
        border: 1px solid var(--border-light);
        border-radius: 4px;
        padding: 0.875rem;
        font-size: 0.95rem;
        line-height: 1.6;
        background: white;
        transition: border-color 0.15s ease;
        resize: vertical;
        min-height: 80px;
        font-family: inherit;
    }

    .comment-field:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        outline: none;
    }

    .comment-field::placeholder {
        color: var(--text-muted);
    }

    @@media (max-width: 768px) {
        .section-title {
            font-size: 1.25rem;
            margin-bottom: 1.5rem;
        }

        .ratings-list {
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
    }
</style>

<div class="rating-section">
    <h2 class="section-title">@Title</h2>

    <div class="ratings-list">
        @foreach (var question in Questions)
        {
            <div class="rating-item">
                <label class="rating-label">@question</label>
                <div class="rating-input">
                    <RadzenRating Value="@GetRating(question)"
                                ValueChanged="@(value => SetRating(question, value))"
                                Stars="4"
                                Class="rating-scale" />
                    <span class="rating-value">@GetRating(question)/4</span>
                </div>
            </div>
        }
    </div>

    <div class="comment-block">
        <label class="comment-label">Additional Comments</label>
        <RadzenTextArea @bind-Value="@Comment"
                       Placeholder="Share any additional thoughts..."
                       Class="comment-field" />
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public List<string> Questions { get; set; } = new();
    [Parameter] public string Comment { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> CommentChanged { get; set; }
    [Parameter] public Dictionary<string, int> Ratings { get; set; } = new();
    [Parameter] public EventCallback<Dictionary<string, int>> RatingsChanged { get; set; }

    private int GetRating(string question)
    {
        return Ratings.TryGetValue(question, out var rating) ? rating : 0;
    }

    private async Task SetRating(string question, int value)
    {
        Ratings[question] = value;
        await RatingsChanged.InvokeAsync(Ratings);
    }
}