@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@implements IDisposable

<style>
    .goal-setting-step {
        --primary-color: #007bff;
        --success-color: #28a745;
        --warning-color: #ffc107;
        --danger-color: #dc3545;
        --border-color: #e9ecef;
        --hover-bg: #f8f9fa;
        --text-muted: #6c757d;
    }

    .section-header .section-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--primary-color);
        margin: 0;
    }

    .section-description {
        font-size: 0.95rem;
        color: var(--text-muted);
        line-height: 1.5;
    }

    .goals-summary {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .btn-link {
        background: none;
        border: none;
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        cursor: pointer;
        text-decoration: none;
        border-radius: 0.375rem;
        transition: all 0.15s ease-in-out;
        font-weight: 500;
    }

    .btn-link:hover {
        background-color: var(--hover-bg);
        text-decoration: none;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .empty-state {
        color: var(--text-muted);
        padding: 4rem 2rem;
        text-align: center;
        background: linear-gradient(135deg, #fafafa 0%, #f0f0f0 100%);
        border-radius: 1rem;
        border: 2px dashed var(--border-color);
    }

    .goal-card {
        border-radius: 1rem;
        background: white;
        transition: all 0.2s ease-in-out;
        position: relative;
        overflow: hidden;
    }

    .goal-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
    }

    .goal-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 4px;
        background: linear-gradient(90deg, var(--primary-color), var(--success-color));
    }

    .card-header {
        background: linear-gradient(135deg, #fafafa 0%, #f5f5f5 100%);
        border-bottom: 1px solid var(--border-color);
        border-radius: 1rem 1rem 0 0;
    }

    .goal-selector {
        flex-shrink: 0;
    }

    .drag-handle {
        flex-shrink: 0;
        padding: 0.5rem;
        cursor: grab;
        border-radius: 0.25rem;
    }

    .drag-handle:hover {
        background-color: var(--hover-bg);
    }

    .drag-handle:active {
        cursor: grabbing;
    }

    .goal-title {
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        color: var(--rz-text-color);
        transition: all 0.15s ease-in-out;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .goal-title:hover {
        color: var(--primary-color);
    }

    .title-editor {
        font-size: 1.1rem;
        font-weight: 600;
        border: 2px solid var(--primary-color);
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        border-radius: 0.375rem;
    }

    .btn-icon {
        background: none;
        border: none;
        padding: 0.375rem;
        cursor: pointer;
        border-radius: 0.375rem;
        transition: all 0.15s ease-in-out;
    }

    .btn-icon:hover {
        background-color: var(--hover-bg);
        transform: scale(1.1);
    }

    .rotated {
        transform: rotate(180deg);
    }

    .card-body {
        padding: 1.5rem;
        border-top: 1px solid var(--border-color);
    }

    .goal-field {
        margin-bottom: 1.5rem;
    }

    .field-label {
        font-weight: 600;
        color: var(--rz-text-color);
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .field-input {
        border: 2px solid var(--border-color);
        border-radius: 0.5rem;
        transition: all 0.15s ease-in-out;
    }

    .field-input:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .auto-save-indicator {
        font-size: 0.75rem;
        opacity: 0.9;
        margin-top: 0.5rem;
    }

    .weighting-badge {
        font-weight: 600;
        font-size: 0.875rem;
        padding: 0.375rem 0.75rem;
        border-radius: 1rem;
    }

    .context-menu {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
        border: 1px solid var(--border-color);
    }

    .context-menu-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 999;
    }

    .dropdown-menu {
        min-width: 10rem;
        padding: 0.5rem 0;
        border: none;
    }

    .dropdown-item {
        display: flex;
        align-items: center;
        width: 100%;
        padding: 0.5rem 1rem;
        background: none;
        border: none;
        text-align: left;
        font-size: 0.875rem;
        cursor: pointer;
        transition: all 0.15s ease-in-out;
    }

    .dropdown-item:hover {
        background-color: var(--hover-bg);
        transform: translateX(4px);
    }

    .dropdown-item.text-danger:hover {
        background-color: rgba(220, 53, 69, 0.1);
        color: #dc3545;
    }

    .progress-ring {
        width: 60px;
        height: 60px;
        margin: 0 auto 1rem;
    }

    @@media (max-width: 768px) {
        .section-header .d-flex {
            flex-direction: column;
            align-items: stretch;
            gap: 1rem;
        }

        .goal-actions {
            flex-direction: column;
            width: 100%;
        }

        .goal-card {
            margin-bottom: 1rem;
        }
    }
</style>

<RadzenCard Class="goal-setting-step">
    <div class="section-header mb-4">
        <h2 class="section-title mb-2">
            <RadzenIcon Icon="flag" Class="me-2" />
            2024 Goal Setting
        </h2>
        <p class="section-description mb-4">
            Define clear and achievable goals with your supervisor. Set measurable objectives
            and plan the necessary steps for goal achievement.
        </p>

        <div class="goals-summary">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center gap-4">
                    <div>
                        <strong>@GetGoalCountText()</strong>
                        <div class="text-muted small">@GetCompletedGoalsText()</div>
                    </div>
                    @if (Goals.Count > 0)
                    {
                        <div class="text-center">
                            <div class="progress-ring">
                                <div class="progress-circle" style="--progress: @((double)totalWeighting)">
                                    <div class="progress-inner">
                                        @totalWeighting.ToString("F0")%
                                    </div>
                                </div>
                            </div>
                            <div class="text-muted small">Total Weight</div>
                        </div>
                    }
                </div>
                <div class="d-flex align-items-center gap-2">
                    @if (Goals.Count > 1)
                    {
                        <RadzenCheckBox @bind-Value="@SelectAllChecked"
                                       @bind-Value:after="ToggleSelectAll"
                                       Class="me-2"
                                       Title="Select all goals" />
                        <span class="text-muted me-3 small">Select all</span>
                    }
                    <RadzenButton Text="@($"Ã— {SelectedCount}")"
                                ButtonStyle="ButtonStyle.Danger"
                                Size="ButtonSize.Small"
                                Visible="@(SelectedCount > 0)"
                                Click="@DeleteSelected"
                                Title="Delete selected goals" />
                    <button type="button" class="btn-link text-primary" @onclick="AddGoal">
                        <RadzenIcon Icon="add" Class="me-1" /> Add goal
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (Goals.Count == 0)
    {
        <div class="empty-state">
            <RadzenIcon Icon="flag" Style="font-size: 4rem; color: var(--rz-text-disabled-color); margin-bottom: 1.5rem;" />
            <h4 class="text-muted mb-3">No goals defined yet</h4>
            <p class="text-muted mb-4">Goals should be SMART (Specific, Measurable, Achievable, Relevant, Time-bound)</p>
            <button type="button" class="btn-link text-primary" @onclick="AddGoal">
                <RadzenIcon Icon="add" Class="me-1" /> Add your first goal
            </button>
        </div>
    }

    @for (int i = 0; i < Goals.Count; i++)
    {
        var goalIndex = i;
        var goal = Goals[goalIndex];

        <div class="goal-card mb-4 @GetGoalCardClass(goal)"
             @oncontextmenu="@(args => ShowContextMenu(args, goalIndex))"
             @oncontextmenu:preventDefault="true">
            <div class="card-header d-flex align-items-center gap-3 p-3">
                <RadzenCheckBox @bind-Value="@goal.IsSelected"
                               @bind-Value:after="UpdateSelectionCount"
                               Class="goal-selector" />
                <div class="drag-handle" title="Drag to reorder">
                    <RadzenIcon Icon="drag_indicator" Style="color: var(--rz-text-disabled-color);" />
                </div>
                <div class="goal-title-section flex-grow-1">
                    @if (goal.IsEditingTitle)
                    {
                        <RadzenTextBox @bind-Value="@goal.CustomTitle"
                                      @onblur="@(() => FinishEditingTitle(goalIndex))"
                                      @onkeypress="@(args => HandleTitleKeyPress(args, goalIndex))"
                                      Class="title-editor"
                                      Placeholder="@($"Goal {goalIndex + 1}")"
                                      @ref="@titleEditors[goalIndex]" />
                    }
                    else
                    {
                        <div class="goal-title"
                             @onclick="@(() => StartEditingTitle(goalIndex))"
                             title="Click to edit">
                            <RadzenIcon Icon="@GetGoalIcon(goal)" />
                            @(string.IsNullOrWhiteSpace(goal.CustomTitle) ? $"Goal {goalIndex + 1}" : goal.CustomTitle)
                            @if (IsGoalRequired(goal))
                            {
                                <span class="text-danger">*</span>
                            }
                        </div>
                    }
                </div>
                <div class="goal-actions d-flex align-items-center gap-2">
                    <div class="weighting-badge" style="background: @GetWeightingBadgeColor(goal.WeightingPercentage); color: white;">
                        @($"{goal.WeightingPercentage:F0}%")
                    </div>
                    <RadzenButton Icon="expand_more"
                                 ButtonStyle="ButtonStyle.Light"
                                 Size="ButtonSize.ExtraSmall"
                                 Class="@(goal.IsExpanded == true ? "rotated" : "")"
                                 Click="@(() => ToggleExpanded(goalIndex))"
                                 Title="@(goal.IsExpanded == true ? "Collapse" : "Expand")" />
                    <button type="button" class="btn-icon" @onclick="@(() => RemoveGoal(goalIndex))" title="Delete goal">
                        <RadzenIcon Icon="close" Style="font-size: 1rem; color: var(--rz-text-disabled-color);" />
                    </button>
                </div>
            </div>

            @if (goal.IsExpanded == true)
            {
                <div class="card-body">
                    <RadzenRow Gap="1.5rem">
                        <RadzenColumn Size="12" SizeMD="6">
                            <div class="goal-field">
                                <div class="field-label">
                                    <RadzenIcon Icon="schedule" />
                                    Start Date
                                </div>
                                <RadzenDatePicker @bind-Value="@goal.StartDate"
                                                @bind-Value:after="@(() => { UpdateGoals(); ShowAutoSaveIndicator(goalIndex); })"
                                                ShowTime="false"
                                                DateFormat="dd/MM/yyyy"
                                                Class="w-100 field-input" />
                            </div>
                        </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="6">
                            <div class="goal-field">
                                <div class="field-label">
                                    <RadzenIcon Icon="event" />
                                    End Date
                                </div>
                                <RadzenDatePicker @bind-Value="@goal.EndDate"
                                                @bind-Value:after="@(() => { UpdateGoals(); ShowAutoSaveIndicator(goalIndex); })"
                                                ShowTime="false"
                                                DateFormat="dd/MM/yyyy"
                                                Class="w-100 field-input" />
                            </div>
                        </RadzenColumn>
                    </RadzenRow>

                    <div class="goal-field">
                        <div class="field-label">
                            <RadzenIcon Icon="description" />
                            Goal Description
                        </div>
                        <RadzenTextArea @bind-Value="@goal.Description"
                                      @bind-Value:after="@(() => { UpdateGoals(); ShowAutoSaveIndicator(goalIndex); })"
                                      Placeholder="Describe your goal in detail. What specifically do you want to achieve?"
                                      Rows="3"
                                      Class="w-100 field-input" />
                        @if (goal.ShowAutoSave)
                        {
                            <div class="auto-save-indicator text-success">
                                <RadzenIcon Icon="check_circle" Style="font-size: 0.8rem;" /> Auto-saved
                            </div>
                        }
                    </div>

                    <div class="goal-field">
                        <div class="field-label">
                            <RadzenIcon Icon="analytics" />
                            Measurement Criteria
                        </div>
                        <RadzenTextArea @bind-Value="@goal.MeasurementCriteria"
                                      @bind-Value:after="@(() => { UpdateGoals(); ShowAutoSaveIndicator(goalIndex); })"
                                      Placeholder="How will success be measured? Define specific, quantifiable metrics..."
                                      Rows="2"
                                      Class="w-100 field-input" />
                    </div>

                    <div class="goal-field">
                        <div class="field-label">
                            <RadzenIcon Icon="percent" />
                            Weighting (%)
                        </div>
                        <RadzenNumeric @bind-Value="@goal.WeightingPercentage"
                                     @bind-Value:after="@(() => { UpdateGoals(); ShowAutoSaveIndicator(goalIndex); })"
                                     Min="0"
                                     Max="100"
                                     Step="5"
                                     Format="0.0"
                                     Class="w-100 field-input" />
                        <small class="text-muted">How important is this goal relative to your other objectives?</small>
                    </div>

                    @if (goal.StartDate.HasValue && goal.EndDate.HasValue)
                    {
                        var duration = (goal.EndDate.Value - goal.StartDate.Value).Days;
                        <div class="goal-duration-info p-3 rounded" style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-left: 4px solid var(--primary-color);">
                            <small class="text-muted d-flex align-items-center">
                                <RadzenIcon Icon="timer" Class="me-2" />
                                Duration: <strong class="ms-1 text-dark">@duration days</strong> <span class="ms-1">(@(duration / 30.0).ToString("F1") months)</span>
                            </small>
                        </div>
                    }
                </div>
            }
        </div>
    }

    @if (Goals.Count > 0)
    {
        <div class="summary-section p-4 rounded" style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border: 1px solid var(--border-color);">
            <h4 class="fw-bold mb-3 d-flex align-items-center">
                <RadzenIcon Icon="summarize" Class="me-2" Style="color: var(--primary-color);" />
                Goal Summary
            </h4>
            <RadzenRow>
                <RadzenColumn Size="12" SizeMD="4">
                    <div class="text-center p-3 bg-white rounded shadow-sm">
                        <div class="text-primary fw-bold" style="font-size: 1.5rem;">@Goals.Count</div>
                        <small class="text-muted">Total Goals</small>
                    </div>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="4">
                    <div class="text-center p-3 bg-white rounded shadow-sm">
                        <div class="fw-bold" style="font-size: 1.5rem; color: @GetProgressColor();">@totalWeighting.ToString("F1")%</div>
                        <small class="text-muted">Total Weighting</small>
                    </div>
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="4">
                    <div class="text-center p-3 bg-white rounded shadow-sm">
                        <div class="text-success fw-bold" style="font-size: 1.5rem;">@completedGoals/@Goals.Count</div>
                        <small class="text-muted">Completed</small>
                    </div>
                </RadzenColumn>
            </RadzenRow>

            @if (Math.Abs(totalWeighting - 100) > 0.1m)
            {
                <div class="mt-3 p-3 rounded" style="background: rgba(255, 193, 7, 0.1); border-left: 4px solid var(--warning-color);">
                    <small class="text-warning d-flex align-items-center">
                        <RadzenIcon Icon="warning" Class="me-2" />
                        <strong>Weighting Notice:</strong> Total should equal 100%. Current: @totalWeighting.ToString("F1")%
                    </small>
                </div>
            }
        </div>
    }
</RadzenCard>

@* Context Menu *@
@if (ShowContextMenuVisible)
{
    <div class="context-menu" style="position: fixed; top: @(ContextMenuY)px; left: @(ContextMenuX)px; z-index: 1000;">
        <div class="dropdown-menu show">
            <button class="dropdown-item" @onclick="@(() => DuplicateGoal(ContextMenuGoalIndex))">
                <RadzenIcon Icon="content_copy" Class="me-2" /> Duplicate
            </button>
            <button class="dropdown-item text-danger" @onclick="@(() => RemoveGoal(ContextMenuGoalIndex))">
                <RadzenIcon Icon="delete" Class="me-2" /> Delete
            </button>
        </div>
    </div>
    <div class="context-menu-backdrop" @onclick="HideContextMenu"></div>
}

@code {
    [Parameter] public List<AnnualGoal> Goals { get; set; } = new();
    [Parameter] public EventCallback<List<AnnualGoal>> GoalsChanged { get; set; }

    [Parameter] public bool CanProceed { get; set; } = false;
    [Parameter] public EventCallback<bool> CanProceedChanged { get; set; }

    private decimal totalWeighting => Goals.Sum(g => g.WeightingPercentage);
    private int completedGoals => Goals.Count(g => IsGoalComplete(g));

    // UI State
    private bool SelectAllChecked = false;
    private int SelectedCount = 0;
    private bool ShowContextMenuVisible = false;
    private double ContextMenuX = 0;
    private double ContextMenuY = 0;
    private int ContextMenuGoalIndex = -1;
    private Dictionary<int, RadzenTextBox> titleEditors = new();
    private Dictionary<int, Timer> autoSaveTimers = new();

    protected override async Task OnInitializedAsync()
    {
        if (Goals.Count == 0)
        {
            await AddGoal();
        }

        // Initialize expanded state for existing goals
        foreach (var goal in Goals)
        {
            if (!goal.IsExpanded.HasValue)
                goal.IsExpanded = false;
        }

        await UpdateValidation();
    }

    private async Task AddGoal()
    {
        var newIndex = Goals.Count + 1;
        Goals.Add(new AnnualGoal
        {
            StartDate = DateTime.Now.Date,
            EndDate = DateTime.Now.Date.AddMonths(3),
            WeightingPercentage = Math.Max(0, 100 - totalWeighting),
            CustomTitle = $"Goal {newIndex}",
            IsExpanded = true,
            IsEditingTitle = false,
            IsSelected = false,
            ShowAutoSave = false
        });
        await UpdateGoals();
    }

    private async Task RemoveGoal(int index)
    {
        if (index >= 0 && index < Goals.Count)
        {
            Goals.RemoveAt(index);
            await UpdateGoals();
        }
    }

    private async Task UpdateGoals()
    {
        await GoalsChanged.InvokeAsync(Goals);
        await UpdateValidation();
    }

    private async Task UpdateValidation()
    {
        bool canProceed = Goals.Count > 0 && 
                         Goals.All(g => IsGoalComplete(g)) &&
                         Math.Abs(totalWeighting - 100) <= 5; // Allow 5% tolerance
        await CanProceedChanged.InvokeAsync(canProceed);
    }

    private bool IsGoalComplete(AnnualGoal goal)
    {
        return !string.IsNullOrWhiteSpace(goal.Description) &&
               !string.IsNullOrWhiteSpace(goal.MeasurementCriteria) &&
               goal.StartDate.HasValue &&
               goal.EndDate.HasValue &&
               goal.WeightingPercentage > 0;
    }

    private string GetGoalCardClass(AnnualGoal goal)
    {
        return IsGoalComplete(goal) ? "border-success" : "border-warning";
    }

    private string GetGoalIcon(AnnualGoal goal)
    {
        return IsGoalComplete(goal) ? "check_circle" : "radio_button_unchecked";
    }

    private BadgeStyle GetWeightingBadgeStyle(decimal weighting)
    {
        return weighting switch
        {
            >= 30 => BadgeStyle.Danger,
            >= 20 => BadgeStyle.Warning,
            >= 10 => BadgeStyle.Info,
            > 0 => BadgeStyle.Secondary,
            _ => BadgeStyle.Light
        };
    }

    // Helper methods for UI state
    private string GetGoalCountText()
    {
        var count = Goals.Count;
        return count == 1 ? "1 goal" : $"{count} goals";
    }

    private string GetCompletedGoalsText()
    {
        return $"{completedGoals} of {Goals.Count} completed";
    }

    private bool IsGoalRequired(AnnualGoal goal)
    {
        return IsGoalComplete(goal);
    }

    private string GetProgressColor()
    {
        return totalWeighting switch
        {
            >= 95 and <= 105 => "#28a745",
            >= 80 => "#ffc107",
            _ => "#dc3545"
        };
    }

    private string GetWeightingBadgeColor(decimal weighting)
    {
        return weighting switch
        {
            >= 30 => "#dc3545",
            >= 20 => "#ffc107",
            >= 10 => "#17a2b8",
            > 0 => "#6c757d",
            _ => "#f8f9fa"
        };
    }

    // Selection management
    private void UpdateSelectionCount()
    {
        SelectedCount = Goals.Count(g => g.IsSelected);
        SelectAllChecked = SelectedCount == Goals.Count && Goals.Count > 0;
        StateHasChanged();
    }

    private void ToggleSelectAll()
    {
        foreach (var goal in Goals)
        {
            goal.IsSelected = SelectAllChecked;
        }
        UpdateSelectionCount();
    }

    private void DeleteSelected()
    {
        Goals.RemoveAll(g => g.IsSelected);
        SelectedCount = 0;
        SelectAllChecked = false;
        UpdateGoals();
    }

    // Expansion management
    private void ToggleExpanded(int index)
    {
        if (index >= 0 && index < Goals.Count)
        {
            Goals[index].IsExpanded = !(Goals[index].IsExpanded ?? false);
            StateHasChanged();
        }
    }

    // Inline editing
    private void StartEditingTitle(int index)
    {
        if (index >= 0 && index < Goals.Count)
        {
            Goals[index].IsEditingTitle = true;
            StateHasChanged();
        }
    }

    private void FinishEditingTitle(int index)
    {
        if (index >= 0 && index < Goals.Count)
        {
            var goal = Goals[index];
            goal.IsEditingTitle = false;
            if (string.IsNullOrWhiteSpace(goal.CustomTitle))
            {
                goal.CustomTitle = $"Goal {index + 1}";
            }
            StateHasChanged();
        }
    }

    private void HandleTitleKeyPress(KeyboardEventArgs args, int index)
    {
        if (args.Key == "Enter")
        {
            FinishEditingTitle(index);
        }
    }

    // Context menu
    private void ShowContextMenu(MouseEventArgs args, int goalIndex)
    {
        ContextMenuX = args.ClientX;
        ContextMenuY = args.ClientY;
        ContextMenuGoalIndex = goalIndex;
        ShowContextMenuVisible = true;
        StateHasChanged();
    }

    private void HideContextMenu()
    {
        ShowContextMenuVisible = false;
        StateHasChanged();
    }

    private async Task DuplicateGoal(int index)
    {
        if (index >= 0 && index < Goals.Count)
        {
            var originalGoal = Goals[index];
            var duplicateGoal = new AnnualGoal
            {
                CustomTitle = $"{originalGoal.CustomTitle} (Copy)",
                Description = originalGoal.Description,
                MeasurementCriteria = originalGoal.MeasurementCriteria,
                StartDate = originalGoal.StartDate,
                EndDate = originalGoal.EndDate,
                WeightingPercentage = originalGoal.WeightingPercentage,
                IsExpanded = true,
                IsEditingTitle = false,
                IsSelected = false,
                ShowAutoSave = false
            };
            Goals.Insert(index + 1, duplicateGoal);
            await UpdateGoals();
        }
        HideContextMenu();
    }

    // Auto-save indicator
    private void ShowAutoSaveIndicator(int index)
    {
        if (index >= 0 && index < Goals.Count)
        {
            var goal = Goals[index];
            goal.ShowAutoSave = true;

            // Clear existing timer
            if (autoSaveTimers.ContainsKey(index))
            {
                autoSaveTimers[index].Dispose();
            }

            // Set new timer to hide indicator after 2 seconds
            autoSaveTimers[index] = new Timer(_ => {
                goal.ShowAutoSave = false;
                InvokeAsync(StateHasChanged);
                autoSaveTimers[index].Dispose();
                autoSaveTimers.Remove(index);
            }, null, 2000, Timeout.Infinite);

            StateHasChanged();
        }
    }

    // Dispose timers when component is disposed
    public void Dispose()
    {
        foreach (var timer in autoSaveTimers.Values)
        {
            timer?.Dispose();
        }
        autoSaveTimers.Clear();
    }

}