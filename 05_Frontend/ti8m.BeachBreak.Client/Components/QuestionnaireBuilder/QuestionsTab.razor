@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Components.QuestionnaireBuilder

<div class="questions-tab-content">
    <div class="mb-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <RadzenText TextStyle="TextStyle.Body1" Class="text-muted">
                    Organize your assessment into logical sections and configure questions
                </RadzenText>
            </div>
            <RadzenButton Text="Add Section"
                         ButtonStyle="ButtonStyle.Primary"
                         Icon="add_circle_outline"
                         Size="ButtonSize.Medium"
                         Click="@OnAddSection" />
        </div>

        @if (Template.Sections.Count > 0)
        {
            <div class="assessment-stats mb-4">
                <div class="d-flex gap-4 justify-content-center text-center p-3 bg-light rounded">
                    <div class="stat-item">
                        <div class="d-flex align-items-center justify-content-center">
                            <RadzenIcon Icon="folder" Class="me-2 fs-5" style="color: var(--primary-color);" />
                            <div>
                                <RadzenText TextStyle="TextStyle.H6" Class="fw-bold mb-0" style="color: var(--primary-color);">
                                    @Template.Sections.Count
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                    Sections
                                </RadzenText>
                            </div>
                        </div>
                    </div>
                    <div class="stat-item">
                        <div class="d-flex align-items-center justify-content-center">
                            <RadzenIcon Icon="quiz" Class="me-2 fs-5" style="color: var(--success-color);" />
                            <div>
                                <RadzenText TextStyle="TextStyle.H6" Class="fw-bold mb-0" style="color: var(--success-color);">
                                    @GetTotalItemsCount()
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                    Total Items
                                </RadzenText>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (Template.Sections.Count == 0)
    {
        <div class="empty-state text-center p-5">
            <RadzenIcon Icon="quiz" Style="font-size: 3rem; color: #6c757d;" />
            <RadzenText TextStyle="TextStyle.Body1" Class="text-muted mt-2">
                No sections created yet. Click "Add Section" to get started.
            </RadzenText>
        </div>
    }
    else
    {
        <div class="sections-container space-y-3">
            @for (int sectionIndex = 0; sectionIndex < Template.Sections.Count; sectionIndex++)
            {
                var templateSection = Template.Sections[sectionIndex];
                var currentSectionIndex = sectionIndex;

                <SectionCard Section="@templateSection"
                           CanMoveUp="@(currentSectionIndex > 0)"
                           CanMoveDown="@(currentSectionIndex < Template.Sections.Count - 1)"
                           ShowQuestionTypeSelection="@(ShowQuestionTypeSelection && SelectedSectionIndex == currentSectionIndex)"
                           QuestionTypeLabels="@QuestionTypeLabels"
                           OnMoveUp="@(() => OnMoveSectionUpInternal(currentSectionIndex))"
                           OnMoveDown="@(() => OnMoveSectionDownInternal(currentSectionIndex))"
                           OnDelete="@(() => OnRemoveSectionInternal(currentSectionIndex))"
                           OnAddQuestion="@(() => OnShowAddQuestionDialogInternal(currentSectionIndex))"
                           OnCancelQuestionSelection="@OnCancelQuestionTypeSelection"
                           OnAddQuestionType="@((type) => OnAddQuestionOfTypeInternal(type))"
                           OnEditQuestion="@((questionIndex) => OnEditQuestionInternal(currentSectionIndex, questionIndex))"
                           OnMoveQuestionUp="@((questionIndex) => OnMoveQuestionUpInternal(currentSectionIndex, questionIndex))"
                           OnMoveQuestionDown="@((questionIndex) => OnMoveQuestionDownInternal(currentSectionIndex, questionIndex))"
                           OnDeleteQuestion="@((questionIndex) => OnRemoveQuestionInternal(currentSectionIndex, questionIndex))"
                           OnTitleChanged="@((value) => OnSectionTitleChanged(currentSectionIndex, value))"
                           OnDescriptionChanged="@((value) => OnSectionDescriptionChanged(currentSectionIndex, value))" />
            }
        </div>
    }
</div>

<style>
.questions-tab-content {
    padding: 0;
}

.stat-item {
    flex: 1;
}

.empty-state {
    background: #f8f9fa;
    border: 2px dashed #dee2e6;
    border-radius: 8px;
}

.space-y-3 > * + * {
    margin-top: 1.5rem;
}
</style>

@code {
    [Parameter, EditorRequired] public QuestionnaireTemplate Template { get; set; } = null!;
    [Parameter, EditorRequired] public bool ShowQuestionTypeSelection { get; set; }
    [Parameter, EditorRequired] public int SelectedSectionIndex { get; set; }
    [Parameter, EditorRequired] public Dictionary<QuestionType, string> QuestionTypeLabels { get; set; } = null!;

    [Parameter] public EventCallback OnAddSection { get; set; }
    [Parameter] public EventCallback<int> OnMoveSectionUp { get; set; }
    [Parameter] public EventCallback<int> OnMoveSectionDown { get; set; }
    [Parameter] public EventCallback<int> OnRemoveSection { get; set; }
    [Parameter] public EventCallback<int> OnShowAddQuestionDialog { get; set; }
    [Parameter] public EventCallback OnCancelQuestionTypeSelection { get; set; }
    [Parameter] public EventCallback<QuestionType> OnAddQuestionOfType { get; set; }
    [Parameter] public EventCallback<(int sectionIndex, int questionIndex)> OnEditQuestion { get; set; }
    [Parameter] public EventCallback<(int sectionIndex, int questionIndex)> OnMoveQuestionUp { get; set; }
    [Parameter] public EventCallback<(int sectionIndex, int questionIndex)> OnMoveQuestionDown { get; set; }
    [Parameter] public EventCallback<(int sectionIndex, int questionIndex)> OnRemoveQuestion { get; set; }

    private async Task OnMoveSectionUpInternal(int sectionIndex) => await OnMoveSectionUp.InvokeAsync(sectionIndex);
    private async Task OnMoveSectionDownInternal(int sectionIndex) => await OnMoveSectionDown.InvokeAsync(sectionIndex);
    private async Task OnRemoveSectionInternal(int sectionIndex) => await OnRemoveSection.InvokeAsync(sectionIndex);
    private async Task OnShowAddQuestionDialogInternal(int sectionIndex) => await OnShowAddQuestionDialog.InvokeAsync(sectionIndex);
    private async Task OnAddQuestionOfTypeInternal(QuestionType type) => await OnAddQuestionOfType.InvokeAsync(type);

    private async Task OnEditQuestionInternal(int sectionIndex, int questionIndex) =>
        await OnEditQuestion.InvokeAsync((sectionIndex, questionIndex));

    private async Task OnMoveQuestionUpInternal(int sectionIndex, int questionIndex) =>
        await OnMoveQuestionUp.InvokeAsync((sectionIndex, questionIndex));

    private async Task OnMoveQuestionDownInternal(int sectionIndex, int questionIndex) =>
        await OnMoveQuestionDown.InvokeAsync((sectionIndex, questionIndex));

    private async Task OnRemoveQuestionInternal(int sectionIndex, int questionIndex) =>
        await OnRemoveQuestion.InvokeAsync((sectionIndex, questionIndex));

    private async Task OnSectionTitleChanged(int sectionIndex, string value)
    {
        // Section title is already updated in SectionCard component
        StateHasChanged();
    }

    private async Task OnSectionDescriptionChanged(int sectionIndex, string value)
    {
        // Section description is already updated in SectionCard component
        StateHasChanged();
    }

    private int GetTotalItemsCount()
    {
        int totalItems = 0;

        foreach (var section in Template.Sections)
        {
            foreach (var question in section.Questions)
            {
                switch (question.Type)
                {
                    case QuestionType.SelfAssessment:
                        if (question.Configuration.TryGetValue("Competencies", out var competenciesObj))
                        {
                            if (competenciesObj is System.Text.Json.JsonElement jsonElement && jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                            {
                                try { totalItems += jsonElement.GetArrayLength(); } catch { }
                            }
                            else if (competenciesObj is System.Collections.ICollection collection)
                            {
                                totalItems += collection.Count;
                            }
                        }
                        break;
                    case QuestionType.GoalAchievement:
                        if (question.Configuration.TryGetValue("GoalCategories", out var goalCategoriesObj))
                        {
                            if (goalCategoriesObj is System.Text.Json.JsonElement jsonElement && jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                            {
                                try { totalItems += jsonElement.GetArrayLength(); } catch { }
                            }
                            else if (goalCategoriesObj is System.Collections.ICollection collection)
                            {
                                totalItems += collection.Count;
                            }
                        }
                        break;
                    case QuestionType.TextQuestion:
                        if (question.Configuration.TryGetValue("TextSections", out var textSectionsObj))
                        {
                            if (textSectionsObj is System.Text.Json.JsonElement jsonElement && jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                            {
                                try { totalItems += jsonElement.GetArrayLength(); } catch { }
                            }
                            else if (textSectionsObj is System.Collections.ICollection collection)
                            {
                                totalItems += collection.Count;
                            }
                        }
                        // Check for legacy format
                        else if (question.Configuration.ContainsKey("SectionTitle") || question.Configuration.ContainsKey("SectionDescription"))
                        {
                            totalItems += 1;
                        }
                        break;
                    default:
                        totalItems += 1; // Fallback for unknown question types
                        break;
                }
            }
        }

        return totalItems;
    }

}