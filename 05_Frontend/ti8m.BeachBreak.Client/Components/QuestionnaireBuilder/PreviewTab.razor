@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@inject QuestionConfigurationService ConfigService

<style>
    .clean-preview {
        --primary-color: #2563eb;
        --text-color: #374151;
        --text-muted: #6b7280;
        --border-light: #f3f4f6;

        padding: 2rem;
        max-width: 800px;
        margin: 0 auto;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
    }

    .preview-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--text-color);
        margin-bottom: 2rem;
    }

    .questionnaire-title {
        font-size: 1.875rem;
        font-weight: 700;
        color: var(--text-color);
        margin-bottom: 1rem;
        letter-spacing: -0.025em;
    }

    .questionnaire-description {
        font-size: 1rem;
        color: var(--text-muted);
        line-height: 1.6;
        margin-bottom: 3rem;
    }

    .section-spacing {
        margin-bottom: 4rem;
    }

    .section-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--text-color);
        margin-bottom: 0.75rem;
        letter-spacing: -0.025em;
    }

    .section-description {
        font-size: 1rem;
        color: var(--text-muted);
        line-height: 1.6;
        margin-bottom: 2rem;
    }

    .question-spacing {
        margin-bottom: 3rem;
    }

    .question-label {
        font-size: 1rem;
        font-weight: 500;
        color: var(--text-color);
        margin-bottom: 1rem;
        line-height: 1.5;
    }

    .required-indicator {
        color: #dc2626;
        font-weight: 700;
        margin-left: 0.25rem;
    }

    .question-description {
        font-size: 0.875rem;
        color: var(--text-muted);
        line-height: 1.5;
        margin-bottom: 1rem;
    }

    .preview-field {
        border: 1px solid var(--border-light);
        border-radius: 4px;
        padding: 0.875rem;
        font-size: 0.95rem;
        background: white;
        color: var(--text-muted);
        font-family: inherit;
        width: 100%;
        min-height: 80px;
        resize: none;
        cursor: not-allowed;
    }

    .rating-preview {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    .competency-preview {
        margin-bottom: 2rem;
    }

    .competency-title {
        font-size: 1rem;
        font-weight: 500;
        color: var(--text-color);
        margin-bottom: 0.5rem;
    }

    .competency-description {
        font-size: 0.875rem;
        color: var(--text-muted);
        margin-bottom: 1rem;
        line-height: 1.5;
    }

    .goal-preview-field {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        margin-bottom: 1.5rem;
    }

    .goal-field-label {
        font-size: 0.875rem;
        font-weight: 600;
        color: var(--text-color);
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .goal-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        color: var(--text-muted);
    }

    .empty-icon {
        font-size: 3rem;
        color: var(--text-muted);
        margin-bottom: 1rem;
    }

    @@media (max-width: 768px) {
        .clean-preview {
            padding: 1.5rem;
        }

        .questionnaire-title {
            font-size: 1.5rem;
        }

        .section-title {
            font-size: 1.25rem;
        }

        .goal-row {
            grid-template-columns: 1fr;
            gap: 1rem;
        }
    }
</style>

<div class="clean-preview">
    <h2 class="preview-title">Questionnaire Preview</h2>

    @if (Template.Sections.Any())
    {
        <div class="questionnaire-preview">
            <h1 class="questionnaire-title">@Template.Name</h1>
            @if (!string.IsNullOrWhiteSpace(Template.Description))
            {
                <p class="questionnaire-description">@Template.Description</p>
            }

            @foreach (var templateSection in Template.Sections.OrderBy(s => s.Order))
            {
                <div class="section-spacing">
                    <h2 class="section-title">@templateSection.Title</h2>
                    @if (!string.IsNullOrWhiteSpace(templateSection.Description))
                    {
                        <p class="section-description">@templateSection.Description</p>
                    }

                    @foreach (var question in templateSection.Questions.OrderBy(q => q.Order))
                    {
                        <div class="question-spacing">
                            <label class="question-label">
                                @GetQuestionTypeLabel(question)
                                @if (question.IsRequired)
                                {
                                    <span class="required-indicator">*</span>
                                }
                            </label>
                            @if (!string.IsNullOrWhiteSpace(question.Description))
                            {
                                <p class="question-description">@question.Description</p>
                            }
                            <div class="preview-input">
                                @GetQuestionPreview(question)
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state">
            <div class="empty-icon">ðŸ“‹</div>
            <p>Add sections and questions to see the preview</p>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired] public QuestionnaireTemplate Template { get; set; } = null!;
    [Parameter, EditorRequired] public Dictionary<QuestionType, string> QuestionTypeLabels { get; set; } = null!;

    private string GetQuestionTypeIcon(QuestionType type) => type switch
    {
        QuestionType.Assessment => "self_improvement",
        QuestionType.Goal => "track_changes",
        QuestionType.TextQuestion => "psychology",
        _ => "help"
    };

    private string GetQuestionTypeLabel(QuestionItem question)
    {
        // Check if question has a custom type label stored in configuration
        if (question.Configuration.ContainsKey("QuestionTitle"))
        {
            var customTitle = question.Configuration["QuestionTitle"].ToString() ?? "";
            if (!string.IsNullOrWhiteSpace(customTitle))
            {
                return customTitle;
            }
        }

        // Fall back to global labels
        return QuestionTypeLabels.TryGetValue(question.Type, out var label) ? label : question.Type.ToString();
    }

    private RenderFragment GetQuestionPreview(QuestionItem question)
    {
        return question.Type switch
        {
            QuestionType.Assessment => GetAssessmentPreview(question),
            QuestionType.Goal => GetGoalPreview(),
            QuestionType.TextQuestion => GetTextQuestionPreview(question),
            _ => @<RadzenTextBox Placeholder="Preview not available" Disabled="true" Class="w-100" />
        };
    }

    private RenderFragment GetAssessmentPreview(QuestionItem question)
    {
        return @<div class="assessment-preview">
            @{
                var competencies = ConfigService.GetCompetencies(question);
            }
            @if (competencies.Count > 0)
            {
                @foreach (var competency in competencies.Take(2)) // Show first 2 competencies as preview
                {
                    <div class="competency-preview">
                        <div class="competency-title">@competency.Title</div>
                        @if (!string.IsNullOrWhiteSpace(competency.Description))
                        {
                            <div class="competency-description">@competency.Description</div>
                        }
                        <div class="rating-preview">
                            @{
                                var ratingScale = ConfigService.GetRatingScale(question);
                                var scaleLowLabel = ConfigService.GetScaleLowLabel(question);
                                var scaleHighLabel = ConfigService.GetScaleHighLabel(question);
                            }
                            @if (ratingScale <= 5)
                            {
                                <RadzenRating Value="0" Disabled="true" Stars="@ratingScale" />
                            }
                            else
                            {
                                <div style="display: flex; align-items: center; gap: 0.5rem;">
                                    <input type="number" value="0" disabled style="width: 80px; padding: 0.5rem; border: 1px solid var(--border-light); border-radius: 4px;" min="1" max="@ratingScale" />
                                    <span style="color: var(--text-muted);">/ @ratingScale</span>
                                </div>
                            }
                            @if (!string.IsNullOrWhiteSpace(scaleLowLabel) && !string.IsNullOrWhiteSpace(scaleHighLabel))
                            {
                                <span style="color: var(--text-muted); font-size: 0.875rem;">@scaleLowLabel to @scaleHighLabel</span>
                            }
                        </div>
                        <textarea class="preview-field" placeholder="Optional comments..." disabled></textarea>
                    </div>
                }
                @if (competencies.Count > 2)
                {
                    <p style="color: var(--text-muted); font-size: 0.875rem; margin: 1rem 0 0 0;">... and @(competencies.Count - 2) more competencies</p>
                }
            }
            else
            {
                <p style="color: var(--text-muted); font-size: 0.875rem;">Click Edit to configure competencies</p>
            }
        </div>;
    }

    private RenderFragment GetGoalPreview()
    {
        return @<div class="goal-achievement-preview">
            <div class="goal-preview-field">
                <label class="goal-field-label">Goal Description</label>
                <textarea class="preview-field" placeholder="Describe your goal..." disabled></textarea>
            </div>

            <div class="goal-row">
                <div class="goal-preview-field">
                    <label class="goal-field-label">Start Date</label>
                    <input type="date" class="preview-field" disabled style="min-height: auto; padding: 0.75rem;" />
                </div>
                <div class="goal-preview-field">
                    <label class="goal-field-label">End Date</label>
                    <input type="date" class="preview-field" disabled style="min-height: auto; padding: 0.75rem;" />
                </div>
            </div>

            <div class="goal-preview-field">
                <label class="goal-field-label">Measurement Criteria</label>
                <input type="text" class="preview-field" placeholder="How will success be measured?" disabled style="min-height: auto; padding: 0.75rem;" />
            </div>

            <div class="goal-preview-field">
                <label class="goal-field-label">Achievement Percentage (%)</label>
                <input type="number" class="preview-field" placeholder="0" disabled style="min-height: auto; padding: 0.75rem;" min="0" max="100" />
            </div>
        </div>;
    }

    private RenderFragment GetTextQuestionPreview(QuestionItem question)
    {
        return @<div class="text-question-preview">
            <textarea class="preview-field" placeholder="Your response..." disabled></textarea>
        </div>;
    }

    private string GetTextQuestionSectionTitle(QuestionItem question)
    {
        if (question.Configuration.ContainsKey("SectionTitle"))
        {
            return question.Configuration["SectionTitle"].ToString() ?? "Career Ambitions";
        }
        return "Career Ambitions";
    }

    private string GetTextQuestionSectionDescription(QuestionItem question)
    {
        if (question.Configuration.ContainsKey("SectionDescription"))
        {
            return question.Configuration["SectionDescription"].ToString() ?? "Where do you see yourself long-term in your professional career?";
        }
        return "Where do you see yourself long-term in your professional career?";
    }
}