@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models

<RadzenCard Class="question-card mb-3 shadow-sm border-0">
    <div class="question-content p-3 bg-white">
        <!-- Question Title and Controls -->
        <div class="d-flex justify-content-between align-items-start mb-3">
            <div class="flex-grow-1">
                <div class="position-relative">
                    <RadzenTextBox @bind-Value="@Question.Title"
                                 Placeholder="Enter question title..."
                                 Class="@GetTitleValidationClass()"
                                 Style="font-weight: 600; font-size: 1.1rem;"
                                 @onblur="ValidateTitle" />
                    @if (!isTitleValid && hasBeenValidated)
                    {
                        <div class="validation-message text-danger small mt-1">
                            <RadzenIcon Icon="error_outline" Style="font-size: 0.85rem;" Class="me-1" />
                            Question title is required
                        </div>
                    }
                </div>
            </div>
            <div class="d-flex gap-1 ms-3">
                <RadzenButton ButtonStyle="ButtonStyle.Light"
                             Icon="keyboard_arrow_up"
                             Size="ButtonSize.ExtraSmall"
                             Click="@(() => OnMoveUpClick())"
                             Disabled="@(!CanMoveUp)"
                             Title="Move up" />
                <RadzenButton ButtonStyle="ButtonStyle.Light"
                             Icon="keyboard_arrow_down"
                             Size="ButtonSize.ExtraSmall"
                             Click="@(() => OnMoveDownClick())"
                             Disabled="@(!CanMoveDown)"
                             Title="Move down" />
                <RadzenButton ButtonStyle="ButtonStyle.Danger"
                             Icon="delete_outline"
                             Size="ButtonSize.ExtraSmall"
                             Click="@(() => OnDeleteClick())"
                             Title="Delete question" />
            </div>
        </div>
        <!-- Question Description -->
        <div class="mb-3">
            <RadzenTextArea @bind-Value="@Question.Description"
                           Placeholder="Enter question description or instructions..."
                           Class="w-100 border-2 rounded"
                           Rows="2" />
        </div>

        <!-- Self-Assessment Configuration -->
        @if (Question.Type == QuestionType.SelfAssessment)
        {
            var competencies = GetOrderedCompetencies();
            <div class="competencies-config">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold">
                        <RadzenIcon Icon="self_improvement" Style="color: var(--primary-color);" Class="me-2" />
                        Competencies (@competencies.Count)
                    </RadzenText>
                    <RadzenButton Text="Add Competency"
                                 ButtonStyle="ButtonStyle.Primary"
                                 Icon="add"
                                 Size="ButtonSize.Small"
                                 Click="@AddCompetency" />
                </div>

                @if (competencies.Count == 0)
                {
                    <div class="text-center p-3 text-muted">
                        <RadzenIcon Icon="self_improvement" Style="font-size: 1.5rem; opacity: 0.5; color: var(--primary-color);" />
                        <div class="mt-2 small">Click "Add Competency" to get started</div>
                    </div>
                }
                else
                {
                    @for (int i = 0; i < competencies.Count; i++)
                    {
                        var competencyIndex = i;
                        var competency = competencies[competencyIndex];

                        <div class="competency-item mb-3 p-3 border rounded bg-white">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div class="d-flex align-items-center gap-2">
                                    <div class="competency-number bg-primary text-white rounded-circle d-flex align-items-center justify-content-center"
                                         style="width: 24px; height: 24px; font-size: 0.75rem; font-weight: bold;">
                                        @(competencyIndex + 1)
                                    </div>
                                    <RadzenText TextStyle="TextStyle.Body2" Class="fw-bold mb-0">
                                        Competency @(competencyIndex + 1)
                                    </RadzenText>
                                </div>
                                <div class="d-flex gap-1">
                                    <RadzenButton ButtonStyle="ButtonStyle.Light"
                                                 Icon="keyboard_arrow_up"
                                                 Size="ButtonSize.ExtraSmall"
                                                 Click="@(() => MoveCompetencyUp(competencyIndex))"
                                                 Disabled="@(competencyIndex == 0)"
                                                 Title="Move up" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Light"
                                                 Icon="keyboard_arrow_down"
                                                 Size="ButtonSize.ExtraSmall"
                                                 Click="@(() => MoveCompetencyDown(competencyIndex))"
                                                 Disabled="@(competencyIndex == competencies.Count - 1)"
                                                 Title="Move down" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                                 Icon="delete_outline"
                                                 Size="ButtonSize.ExtraSmall"
                                                 Click="@(() => RemoveCompetency(competencyIndex))"
                                                 Title="Delete competency" />
                                </div>
                            </div>
                            <div class="row g-2 mb-2">
                                <div class="col-md-8">
                                    <div class="position-relative">
                                        <RadzenTextBox Value="@competency.Title"
                                                      ValueChanged="@((string value) => UpdateCompetencyTitle(competencyIndex, value))"
                                                      Placeholder="Enter competency title..."
                                                      Class="@GetCompetencyTitleValidationClass(competencyIndex)"
                                                      @onblur="@(() => ValidateCompetencyTitle(competencyIndex))" />
                                        @if (!GetCompetencyTitleValid(competencyIndex) && GetCompetencyTitleValidated(competencyIndex))
                                        {
                                            <div class="validation-message text-danger small mt-1">
                                                <RadzenIcon Icon="error_outline" Style="font-size: 0.85rem;" Class="me-1" />
                                                Competency title is required
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="d-flex align-items-center h-100">
                                        <RadzenCheckBox Value="@GetCompetencyRequired(competencyIndex)"
                                                       ValueChanged="@((bool value) => UpdateCompetencyRequired(competencyIndex, value))"
                                                       Name="@($"comp_req_{Question.Id}_{competencyIndex}")" />
                                        <RadzenLabel Text="Required" Component="@($"comp_req_{Question.Id}_{competencyIndex}")" Class="ms-2 small" />
                                    </div>
                                </div>
                            </div>
                            <div class="mb-0">
                                <RadzenTextArea Value="@competency.Description"
                                               ValueChanged="@((string value) => UpdateCompetencyDescription(competencyIndex, value))"
                                               Placeholder="Describe what this competency evaluates..."
                                               Rows="2"
                                               Class="w-100" />
                            </div>
                        </div>
                    }
                }
            </div>
        }

        <!-- Goal Achievement Configuration -->
        @if (Question.Type == QuestionType.GoalAchievement)
        {
            var goalCategories = GetOrderedGoalCategories();
            <div class="goal-categories-config">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <RadzenText TextStyle="TextStyle.Subtitle2" Class="fw-bold question-goal-achievement">
                        <RadzenIcon Icon="track_changes" Class="me-2" />
                        Goal Categories (@goalCategories.Count)
                    </RadzenText>
                    <RadzenButton Text="Add Goal Category"
                                 ButtonStyle="ButtonStyle.Warning"
                                 Icon="add"
                                 Size="ButtonSize.Small"
                                 Click="@AddGoalCategory" />
                </div>

                @if (goalCategories.Count == 0)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" ShowIcon="true" Class="mb-3">
                        Click "Add Goal Category" to start adding goal categories for this assessment.
                    </RadzenAlert>
                }
                else
                {
                    @for (int i = 0; i < goalCategories.Count; i++)
                    {
                        var categoryIndex = i;
                        var category = goalCategories[categoryIndex];

                        <RadzenCard Class="goal-category-item mb-2 p-3 border">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <RadzenText TextStyle="TextStyle.Body2" Class="fw-bold question-goal-achievement">
                                    Goal Category @(categoryIndex + 1)
                                </RadzenText>
                                <div class="d-flex gap-1">
                                    <RadzenButton ButtonStyle="ButtonStyle.Light"
                                                 Icon="keyboard_arrow_up"
                                                 Size="ButtonSize.ExtraSmall"
                                                 Click="@(() => MoveGoalCategoryUp(categoryIndex))"
                                                 Disabled="@(categoryIndex == 0)"
                                                 Title="Move up" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Light"
                                                 Icon="keyboard_arrow_down"
                                                 Size="ButtonSize.ExtraSmall"
                                                 Click="@(() => MoveGoalCategoryDown(categoryIndex))"
                                                 Disabled="@(categoryIndex == goalCategories.Count - 1)"
                                                 Title="Move down" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                                 Icon="delete"
                                                 Size="ButtonSize.ExtraSmall"
                                                 Click="@(() => RemoveGoalCategory(categoryIndex))"
                                                 Title="Delete" />
                                </div>
                            </div>
                            <div class="mb-2">
                                <div class="position-relative">
                                    <RadzenTextBox Value="@category.Title"
                                                  ValueChanged="@((string value) => UpdateGoalCategoryTitle(categoryIndex, value))"
                                                  Placeholder="Enter goal category title..."
                                                  Class="@GetGoalCategoryTitleValidationClass(categoryIndex)"
                                                  @onblur="@(() => ValidateGoalCategoryTitle(categoryIndex))" />
                                    @if (!GetGoalCategoryTitleValid(categoryIndex) && GetGoalCategoryTitleValidated(categoryIndex))
                                    {
                                        <div class="validation-message text-danger small mt-1">
                                            <RadzenIcon Icon="error_outline" Style="font-size: 0.85rem;" Class="me-1" />
                                            Goal category title is required
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="mb-2">
                                <RadzenTextArea Value="@category.Description"
                                               ValueChanged="@((string value) => UpdateGoalCategoryDescription(categoryIndex, value))"
                                               Placeholder="Describe this goal category..."
                                               Rows="2"
                                               Class="w-100" />
                            </div>
                            <div class="d-flex align-items-center">
                                <RadzenCheckBox Value="@GetGoalCategoryRequired(categoryIndex)"
                                               ValueChanged="@((bool value) => UpdateGoalCategoryRequired(categoryIndex, value))"
                                               Name="@($"goal_req_{Question.Id}_{categoryIndex}")" />
                                <RadzenLabel Text="This goal category is required" Component="@($"goal_req_{Question.Id}_{categoryIndex}")" Class="ms-2" />
                            </div>
                        </RadzenCard>
                    }
                }
            </div>
        }

        <!-- Text Question Configuration -->
        @if (Question.Type == QuestionType.TextQuestion)
        {
            var textSections = GetOrderedTextSections();
            <div class="text-sections-config">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <RadzenText TextStyle="TextStyle.Subtitle2" Class="fw-bold question-text-response">
                        <RadzenIcon Icon="psychology" Class="me-2" />
                        Text Sections (@textSections.Count)
                    </RadzenText>
                    <RadzenButton Text="Add Text Section"
                                 ButtonStyle="ButtonStyle.Info"
                                 Icon="add"
                                 Size="ButtonSize.Small"
                                 Click="@AddTextSection" />
                </div>

                @if (textSections.Count == 0)
                {
                    <RadzenAlert AlertStyle="AlertStyle.Info" ShowIcon="true" Class="mb-3">
                        Click "Add Text Section" to start adding text sections for this question.
                    </RadzenAlert>
                }
                else
                {
                    @for (int i = 0; i < textSections.Count; i++)
                    {
                        var sectionIndex = i;
                        var textSection = textSections[sectionIndex];

                        <RadzenCard Class="text-section-item mb-2 p-3 border border-text-response">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <RadzenText TextStyle="TextStyle.Body2" Class="fw-bold question-text-response">
                                    Text Section @(sectionIndex + 1)
                                </RadzenText>
                                <div class="d-flex gap-1">
                                    <RadzenButton ButtonStyle="ButtonStyle.Light"
                                                 Icon="keyboard_arrow_up"
                                                 Size="ButtonSize.ExtraSmall"
                                                 Click="@(() => MoveTextSectionUp(sectionIndex))"
                                                 Disabled="@(sectionIndex == 0)"
                                                 Title="Move up" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Light"
                                                 Icon="keyboard_arrow_down"
                                                 Size="ButtonSize.ExtraSmall"
                                                 Click="@(() => MoveTextSectionDown(sectionIndex))"
                                                 Disabled="@(sectionIndex == textSections.Count - 1)"
                                                 Title="Move down" />
                                    <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                                 Icon="delete"
                                                 Size="ButtonSize.ExtraSmall"
                                                 Click="@(() => RemoveTextSection(sectionIndex))"
                                                 Title="Delete" />
                                </div>
                            </div>
                            <div class="mb-2">
                                <div class="position-relative">
                                    <RadzenTextBox Value="@textSection.Title"
                                                  ValueChanged="@((string value) => UpdateTextSectionTitle(sectionIndex, value))"
                                                  Placeholder="Enter section title..."
                                                  Class="@GetTextSectionTitleValidationClass(sectionIndex)"
                                                  @onblur="@(() => ValidateTextSectionTitle(sectionIndex))" />
                                    @if (!GetTextSectionTitleValid(sectionIndex) && GetTextSectionTitleValidated(sectionIndex))
                                    {
                                        <div class="validation-message text-danger small mt-1">
                                            <RadzenIcon Icon="error_outline" Style="font-size: 0.85rem;" Class="me-1" />
                                            Text section title is required
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="mb-2">
                                <RadzenTextArea Value="@textSection.Description"
                                               ValueChanged="@((string value) => UpdateTextSectionDescription(sectionIndex, value))"
                                               Placeholder="Describe this text section..."
                                               Rows="2"
                                               Class="w-100" />
                            </div>
                            <div class="d-flex align-items-center">
                                <RadzenCheckBox Value="@GetTextSectionRequired(sectionIndex)"
                                               ValueChanged="@((bool value) => UpdateTextSectionRequired(sectionIndex, value))"
                                               Name="@($"text_req_{Question.Id}_{sectionIndex}")" />
                                <RadzenLabel Text="This text section is required" Component="@($"text_req_{Question.Id}_{sectionIndex}")" Class="ms-2" />
                            </div>
                        </RadzenCard>
                    }
                }
            </div>
        }

        <!-- Question-level required flag is removed as individual items now have their own required flags -->
    </div>
</RadzenCard>

@code {
    [Parameter, EditorRequired] public QuestionItem Question { get; set; } = null!;
    [Parameter, EditorRequired] public bool CanMoveUp { get; set; }
    [Parameter, EditorRequired] public bool CanMoveDown { get; set; }
    [Parameter, EditorRequired] public Dictionary<QuestionType, string> QuestionTypeLabels { get; set; } = null!;

    [Inject] private DialogService DialogService { get; set; } = default!;

    [Parameter] public EventCallback OnEdit { get; set; }
    [Parameter] public EventCallback OnMoveUp { get; set; }
    [Parameter] public EventCallback OnMoveDown { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }

    // Validation state
    private bool isTitleValid = true;
    private bool hasBeenValidated = false;

    // Competency validation state
    private Dictionary<int, bool> competencyTitleValid = new();
    private Dictionary<int, bool> competencyTitleValidated = new();

    // Goal category validation state
    private Dictionary<int, bool> goalCategoryTitleValid = new();
    private Dictionary<int, bool> goalCategoryTitleValidated = new();

    // Text section validation state
    private Dictionary<int, bool> textSectionTitleValid = new();
    private Dictionary<int, bool> textSectionTitleValidated = new();

    private async Task OnEditClick() => await OnEdit.InvokeAsync();
    private async Task OnMoveUpClick() => await OnMoveUp.InvokeAsync();
    private async Task OnMoveDownClick() => await OnMoveDown.InvokeAsync();
    private async Task OnDeleteClick() => await OnDelete.InvokeAsync();

    // Validation methods
    private void ValidateTitle()
    {
        hasBeenValidated = true;
        isTitleValid = !string.IsNullOrWhiteSpace(Question.Title);
        StateHasChanged();
    }

    private string GetTitleValidationClass()
    {
        var baseClass = "w-100";
        if (hasBeenValidated && !isTitleValid)
        {
            return $"{baseClass} border-danger";
        }
        return baseClass;
    }

    public bool IsQuestionValid()
    {
        ValidateTitle();

        // Validate question content based on type
        bool contentValid = true;

        if (Question.Type == QuestionType.SelfAssessment)
        {
            var competencies = GetOrderedCompetencies();
            for (int i = 0; i < competencies.Count; i++)
            {
                ValidateCompetencyTitle(i);
                if (!GetCompetencyTitleValid(i))
                    contentValid = false;
            }
        }
        else if (Question.Type == QuestionType.GoalAchievement)
        {
            var categories = GetOrderedGoalCategories();
            for (int i = 0; i < categories.Count; i++)
            {
                ValidateGoalCategoryTitle(i);
                if (!GetGoalCategoryTitleValid(i))
                    contentValid = false;
            }
        }
        else if (Question.Type == QuestionType.TextQuestion)
        {
            var sections = GetOrderedTextSections();
            for (int i = 0; i < sections.Count; i++)
            {
                ValidateTextSectionTitle(i);
                if (!GetTextSectionTitleValid(i))
                    contentValid = false;
            }
        }

        return isTitleValid && contentValid;
    }

    // Competency validation methods
    private void ValidateCompetencyTitle(int index)
    {
        var competencies = GetOrderedCompetencies();
        if (index >= 0 && index < competencies.Count)
        {
            competencyTitleValidated[index] = true;
            competencyTitleValid[index] = !string.IsNullOrWhiteSpace(competencies[index].Title);
            StateHasChanged();
        }
    }

    private bool GetCompetencyTitleValid(int index)
    {
        return competencyTitleValid.GetValueOrDefault(index, true);
    }

    private bool GetCompetencyTitleValidated(int index)
    {
        return competencyTitleValidated.GetValueOrDefault(index, false);
    }

    private string GetCompetencyTitleValidationClass(int index)
    {
        var baseClass = "w-100 mb-2";
        if (GetCompetencyTitleValidated(index) && !GetCompetencyTitleValid(index))
        {
            return $"{baseClass} border-danger";
        }
        return baseClass;
    }

    // Goal category validation methods
    private void ValidateGoalCategoryTitle(int index)
    {
        var categories = GetOrderedGoalCategories();
        if (index >= 0 && index < categories.Count)
        {
            goalCategoryTitleValidated[index] = true;
            goalCategoryTitleValid[index] = !string.IsNullOrWhiteSpace(categories[index].Title);
            StateHasChanged();
        }
    }

    private bool GetGoalCategoryTitleValid(int index)
    {
        return goalCategoryTitleValid.GetValueOrDefault(index, true);
    }

    private bool GetGoalCategoryTitleValidated(int index)
    {
        return goalCategoryTitleValidated.GetValueOrDefault(index, false);
    }

    private string GetGoalCategoryTitleValidationClass(int index)
    {
        var baseClass = "w-100 mb-2";
        if (GetGoalCategoryTitleValidated(index) && !GetGoalCategoryTitleValid(index))
        {
            return $"{baseClass} border-danger";
        }
        return baseClass;
    }

    // Text section validation methods
    private void ValidateTextSectionTitle(int index)
    {
        var sections = GetOrderedTextSections();
        if (index >= 0 && index < sections.Count)
        {
            textSectionTitleValidated[index] = true;
            textSectionTitleValid[index] = !string.IsNullOrWhiteSpace(sections[index].Title);
            StateHasChanged();
        }
    }

    private bool GetTextSectionTitleValid(int index)
    {
        return textSectionTitleValid.GetValueOrDefault(index, true);
    }

    private bool GetTextSectionTitleValidated(int index)
    {
        return textSectionTitleValidated.GetValueOrDefault(index, false);
    }

    private string GetTextSectionTitleValidationClass(int index)
    {
        var baseClass = "w-100 mb-2";
        if (GetTextSectionTitleValidated(index) && !GetTextSectionTitleValid(index))
        {
            return $"{baseClass} border-danger";
        }
        return baseClass;
    }

    private string GetQuestionTypeIcon(QuestionType type) => type switch
    {
        QuestionType.SelfAssessment => "self_improvement",
        QuestionType.GoalAchievement => "track_changes",
        QuestionType.TextQuestion => "psychology",
        _ => "help"
    };


    // Self-Assessment methods
    private List<CompetencyDefinition> GetCompetenciesFromConfiguration()
    {
        if (Question.Configuration.ContainsKey("Competencies"))
        {
            var competenciesObj = Question.Configuration["Competencies"];

            // Handle direct cast (when set in editor)
            if (competenciesObj is List<CompetencyDefinition> competencies)
            {
                return competencies;
            }

            // Handle JSON deserialization (when loaded from API)
            if (competenciesObj is System.Text.Json.JsonElement jsonElement)
            {
                try
                {
                    if (jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                    {
                        return System.Text.Json.JsonSerializer.Deserialize<List<CompetencyDefinition>>(jsonElement.GetRawText(), new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<CompetencyDefinition>();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deserializing competencies: {ex.Message}");
                }
            }

            // Handle string representation (backup case)
            if (competenciesObj is string jsonString)
            {
                try
                {
                    return System.Text.Json.JsonSerializer.Deserialize<List<CompetencyDefinition>>(jsonString) ?? new List<CompetencyDefinition>();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deserializing competencies from string: {ex.Message}");
                }
            }
        }

        // Return default competencies if none exist
        return new List<CompetencyDefinition>();
    }

    private List<CompetencyDefinition> GetOrderedCompetencies()
    {
        var competencies = GetCompetenciesFromConfiguration();

        // Check if we need to initialize Order values (for legacy data or duplicates)
        var orderValues = competencies.Select(c => c.Order).ToList();
        var distinctOrderCount = orderValues.Distinct().Count();
        var hasUnsetOrders = orderValues.Any(o => o == 0) && competencies.Count > 1;
        var hasDuplicateOrders = distinctOrderCount != competencies.Count;

        if (hasUnsetOrders || hasDuplicateOrders)
        {
            // Re-assign all Order values sequentially
            for (int i = 0; i < competencies.Count; i++)
            {
                competencies[i].Order = i;
            }
            Question.Configuration["Competencies"] = competencies;
        }

        return competencies.OrderBy(c => c.Order).ToList();
    }

    private void AddCompetency()
    {
        var competencies = GetCompetenciesFromConfiguration();
        var nextOrder = competencies.Count > 0 ? competencies.Max(c => c.Order) + 1 : 0;
        competencies.Add(new CompetencyDefinition($"competency_{competencies.Count + 1}", "", "", false, nextOrder));
        Question.Configuration["Competencies"] = competencies;
        StateHasChanged();
    }

    private async Task RemoveCompetency(int displayIndex)
    {
        var orderedCompetencies = GetOrderedCompetencies();
        if (displayIndex >= 0 && displayIndex < orderedCompetencies.Count)
        {
            var competencyToRemove = orderedCompetencies[displayIndex];
            var competencyName = string.IsNullOrWhiteSpace(competencyToRemove.Title) ? $"Competency {displayIndex + 1}" : competencyToRemove.Title;
            var confirmed = await DialogService.Confirm($"Are you sure you want to delete '{competencyName}'?", "Delete Competency",
                new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (confirmed == true)
            {
                var allCompetencies = GetCompetenciesFromConfiguration();
                allCompetencies.Remove(competencyToRemove);
                Question.Configuration["Competencies"] = allCompetencies;
                StateHasChanged();
            }
        }
    }

    private void UpdateCompetencyTitle(int displayIndex, string value)
    {
        var orderedCompetencies = GetOrderedCompetencies();
        if (displayIndex >= 0 && displayIndex < orderedCompetencies.Count)
        {
            orderedCompetencies[displayIndex].Title = value ?? "";
            Question.Configuration["Competencies"] = GetCompetenciesFromConfiguration();
            StateHasChanged();
        }
    }

    private void UpdateCompetencyDescription(int displayIndex, string value)
    {
        var orderedCompetencies = GetOrderedCompetencies();
        if (displayIndex >= 0 && displayIndex < orderedCompetencies.Count)
        {
            orderedCompetencies[displayIndex].Description = value ?? "";
            Question.Configuration["Competencies"] = GetCompetenciesFromConfiguration();
            StateHasChanged();
        }
    }

    // Goal Achievement methods
    private List<GoalCategory> GetGoalCategoriesFromConfiguration()
    {
        if (Question.Configuration.ContainsKey("GoalCategories"))
        {
            var goalCategoriesObj = Question.Configuration["GoalCategories"];

            // Handle direct cast (when set in editor)
            if (goalCategoriesObj is List<GoalCategory> categories)
            {
                return categories;
            }

            // Handle JSON deserialization (when loaded from API)
            if (goalCategoriesObj is System.Text.Json.JsonElement jsonElement)
            {
                try
                {
                    if (jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                    {
                        return System.Text.Json.JsonSerializer.Deserialize<List<GoalCategory>>(jsonElement.GetRawText(), new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<GoalCategory>();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deserializing goal categories: {ex.Message}");
                }
            }

            // Handle string representation (backup case)
            if (goalCategoriesObj is string jsonString)
            {
                try
                {
                    return System.Text.Json.JsonSerializer.Deserialize<List<GoalCategory>>(jsonString) ?? new List<GoalCategory>();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deserializing goal categories from string: {ex.Message}");
                }
            }

            // Handle List<object> from API deserialization
            // Note: List<object> is necessary here because JSON API data sometimes comes as untyped objects
            // that need to be converted to strongly-typed GoalCategory objects
            if (goalCategoriesObj is List<object> objectList)
            {
                try
                {
                    var json = System.Text.Json.JsonSerializer.Serialize(objectList);
                    return System.Text.Json.JsonSerializer.Deserialize<List<GoalCategory>>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<GoalCategory>();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deserializing goal categories from API List<object>: {ex.Message}");
                }
            }
        }
        return new List<GoalCategory>();
    }

    private List<GoalCategory> GetOrderedGoalCategories()
    {
        var categories = GetGoalCategoriesFromConfiguration();

        // Check if we need to initialize Order values (for legacy data or duplicates)
        var orderValues = categories.Select(c => c.Order).ToList();
        var distinctOrderCount = orderValues.Distinct().Count();
        var hasUnsetOrders = orderValues.Any(o => o == 0) && categories.Count > 1;
        var hasDuplicateOrders = distinctOrderCount != categories.Count;

        if (hasUnsetOrders || hasDuplicateOrders)
        {
            // Re-assign all Order values sequentially
            for (int i = 0; i < categories.Count; i++)
            {
                categories[i].Order = i;
            }
            Question.Configuration["GoalCategories"] = categories;
        }

        return categories.OrderBy(c => c.Order).ToList();
    }

    private void AddGoalCategory()
    {
        var categories = GetGoalCategoriesFromConfiguration();
        var nextOrder = categories.Count > 0 ? categories.Max(c => c.Order) + 1 : 0;
        categories.Add(new GoalCategory { Title = "", Description = "", IsRequired = false, Order = nextOrder });
        Question.Configuration["GoalCategories"] = categories;
        StateHasChanged();
    }

    private async Task RemoveGoalCategory(int index)
    {
        var categories = GetGoalCategoriesFromConfiguration();
        if (index >= 0 && index < categories.Count)
        {
            var categoryName = string.IsNullOrWhiteSpace(categories[index].Title) ? $"Goal Category {index + 1}" : categories[index].Title;
            var confirmed = await DialogService.Confirm($"Are you sure you want to delete '{categoryName}'?", "Delete Goal Category",
                new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (confirmed == true)
            {
                categories.RemoveAt(index);
                Question.Configuration["GoalCategories"] = categories;
                StateHasChanged();
            }
        }
    }

    private void UpdateGoalCategoryTitle(int index, string value)
    {
        var categories = GetGoalCategoriesFromConfiguration();
        if (index >= 0 && index < categories.Count)
        {
            categories[index].Title = value ?? "";
            Question.Configuration["GoalCategories"] = categories;
            StateHasChanged();
        }
    }

    private void UpdateGoalCategoryDescription(int index, string value)
    {
        var categories = GetGoalCategoriesFromConfiguration();
        if (index >= 0 && index < categories.Count)
        {
            categories[index].Description = value ?? "";
            Question.Configuration["GoalCategories"] = categories;
            StateHasChanged();
        }
    }

    // Text Question methods
    private List<TextSection> GetTextSectionsFromConfiguration()
    {
        if (Question.Configuration.ContainsKey("TextSections"))
        {
            var textSectionsObj = Question.Configuration["TextSections"];

            // Handle direct cast (when set in editor)
            if (textSectionsObj is List<TextSection> sections)
            {
                return sections;
            }

            // Handle JSON deserialization (when loaded from API)
            if (textSectionsObj is System.Text.Json.JsonElement jsonElement)
            {
                try
                {
                    if (jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                    {
                        return System.Text.Json.JsonSerializer.Deserialize<List<TextSection>>(jsonElement.GetRawText(), new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<TextSection>();
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deserializing text sections: {ex.Message}");
                }
            }

            // Handle string representation (backup case)
            if (textSectionsObj is string jsonString)
            {
                try
                {
                    return System.Text.Json.JsonSerializer.Deserialize<List<TextSection>>(jsonString) ?? new List<TextSection>();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deserializing text sections from string: {ex.Message}");
                }
            }

            // Handle List<object> from API deserialization
            // Note: List<object> is necessary here because JSON API data sometimes comes as untyped objects
            // that need to be converted to strongly-typed TextSection objects
            if (textSectionsObj is List<object> objectList)
            {
                try
                {
                    var json = System.Text.Json.JsonSerializer.Serialize(objectList);
                    return System.Text.Json.JsonSerializer.Deserialize<List<TextSection>>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<TextSection>();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deserializing text sections from API List<object>: {ex.Message}");
                }
            }
        }

        // Check for legacy format and convert
        if (Question.Configuration.ContainsKey("SectionTitle") || Question.Configuration.ContainsKey("SectionDescription"))
        {
            return new List<TextSection>
            {
                new TextSection
                {
                    Title = Question.Configuration.ContainsKey("SectionTitle") ? Question.Configuration["SectionTitle"].ToString() ?? "" : "",
                    Description = Question.Configuration.ContainsKey("SectionDescription") ? Question.Configuration["SectionDescription"].ToString() ?? "" : "",
                    IsRequired = false
                }
            };
        }

        return new List<TextSection>();
    }

    private List<TextSection> GetOrderedTextSections()
    {
        var sections = GetTextSectionsFromConfiguration();

        // Check if we need to initialize Order values (for legacy data or duplicates)
        var orderValues = sections.Select(s => s.Order).ToList();
        var distinctOrderCount = orderValues.Distinct().Count();
        var hasUnsetOrders = orderValues.Any(o => o == 0) && sections.Count > 1;
        var hasDuplicateOrders = distinctOrderCount != sections.Count;

        if (hasUnsetOrders || hasDuplicateOrders)
        {
            // Re-assign all Order values sequentially
            for (int i = 0; i < sections.Count; i++)
            {
                sections[i].Order = i;
            }
            Question.Configuration["TextSections"] = sections;
        }

        return sections.OrderBy(s => s.Order).ToList();
    }

    private void AddTextSection()
    {
        var sections = GetTextSectionsFromConfiguration();
        var nextOrder = sections.Count > 0 ? sections.Max(s => s.Order) + 1 : 0;
        sections.Add(new TextSection { Title = "", Description = "", IsRequired = false, Order = nextOrder });
        Question.Configuration["TextSections"] = sections;
        StateHasChanged();
    }

    private async Task RemoveTextSection(int index)
    {
        var sections = GetTextSectionsFromConfiguration();
        if (index >= 0 && index < sections.Count)
        {
            var sectionName = string.IsNullOrWhiteSpace(sections[index].Title) ? $"Text Section {index + 1}" : sections[index].Title;
            var confirmed = await DialogService.Confirm($"Are you sure you want to delete '{sectionName}'?", "Delete Text Section",
                new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

            if (confirmed == true)
            {
                sections.RemoveAt(index);
                Question.Configuration["TextSections"] = sections;
                StateHasChanged();
            }
        }
    }

    private void UpdateTextSectionTitle(int index, string value)
    {
        var sections = GetTextSectionsFromConfiguration();
        if (index >= 0 && index < sections.Count)
        {
            sections[index].Title = value ?? "";
            Question.Configuration["TextSections"] = sections;
            StateHasChanged();
        }
    }

    private void UpdateTextSectionDescription(int index, string value)
    {
        var sections = GetTextSectionsFromConfiguration();
        if (index >= 0 && index < sections.Count)
        {
            sections[index].Description = value ?? "";
            Question.Configuration["TextSections"] = sections;
            StateHasChanged();
        }
    }

    private void MoveTextSectionUp(int displayIndex)
    {
        var sections = GetOrderedTextSections();
        if (displayIndex > 0 && displayIndex < sections.Count)
        {
            // Simple array swap - exactly like the original working code
            (sections[displayIndex], sections[displayIndex - 1]) = (sections[displayIndex - 1], sections[displayIndex]);

            // Now update Order properties to match new positions
            for (int i = 0; i < sections.Count; i++)
            {
                sections[i].Order = i;
            }

            Question.Configuration["TextSections"] = sections;
            StateHasChanged();
        }
    }

    private void MoveTextSectionDown(int displayIndex)
    {
        var sections = GetOrderedTextSections();
        if (displayIndex >= 0 && displayIndex < sections.Count - 1)
        {
            // Simple array swap - exactly like the original working code
            (sections[displayIndex], sections[displayIndex + 1]) = (sections[displayIndex + 1], sections[displayIndex]);

            // Now update Order properties to match new positions
            for (int i = 0; i < sections.Count; i++)
            {
                sections[i].Order = i;
            }

            Question.Configuration["TextSections"] = sections;
            StateHasChanged();
        }
    }

    // Required flag methods for competencies
    private bool GetCompetencyRequired(int displayIndex)
    {
        var orderedCompetencies = GetOrderedCompetencies();
        if (displayIndex >= 0 && displayIndex < orderedCompetencies.Count)
        {
            return orderedCompetencies[displayIndex].IsRequired;
        }
        return false;
    }

    private void UpdateCompetencyRequired(int displayIndex, bool value)
    {
        var orderedCompetencies = GetOrderedCompetencies();
        if (displayIndex >= 0 && displayIndex < orderedCompetencies.Count)
        {
            orderedCompetencies[displayIndex].IsRequired = value;
            Question.Configuration["Competencies"] = GetCompetenciesFromConfiguration();
            StateHasChanged();
        }
    }

    private void MoveCompetencyUp(int displayIndex)
    {
        var competencies = GetOrderedCompetencies();
        if (displayIndex > 0 && displayIndex < competencies.Count)
        {
            // Simple array swap - exactly like the original working code
            (competencies[displayIndex], competencies[displayIndex - 1]) = (competencies[displayIndex - 1], competencies[displayIndex]);

            // Now update Order properties to match new positions
            for (int i = 0; i < competencies.Count; i++)
            {
                competencies[i].Order = i;
            }

            Question.Configuration["Competencies"] = competencies;
            StateHasChanged();
        }
    }

    private void MoveCompetencyDown(int displayIndex)
    {
        var competencies = GetOrderedCompetencies();
        if (displayIndex >= 0 && displayIndex < competencies.Count - 1)
        {
            // Simple array swap - exactly like the original working code
            (competencies[displayIndex], competencies[displayIndex + 1]) = (competencies[displayIndex + 1], competencies[displayIndex]);

            // Now update Order properties to match new positions
            for (int i = 0; i < competencies.Count; i++)
            {
                competencies[i].Order = i;
            }

            Question.Configuration["Competencies"] = competencies;
            StateHasChanged();
        }
    }

    // Required flag methods for goal categories
    private bool GetGoalCategoryRequired(int index)
    {
        var categories = GetGoalCategoriesFromConfiguration();
        if (index >= 0 && index < categories.Count)
        {
            return categories[index].IsRequired;
        }
        return false;
    }

    private void UpdateGoalCategoryRequired(int index, bool value)
    {
        var categories = GetGoalCategoriesFromConfiguration();
        if (index >= 0 && index < categories.Count)
        {
            categories[index].IsRequired = value;
            Question.Configuration["GoalCategories"] = categories;
            StateHasChanged();
        }
    }

    private void MoveGoalCategoryUp(int displayIndex)
    {
        var categories = GetOrderedGoalCategories();
        if (displayIndex > 0 && displayIndex < categories.Count)
        {
            // Simple array swap - exactly like the original working code
            (categories[displayIndex], categories[displayIndex - 1]) = (categories[displayIndex - 1], categories[displayIndex]);

            // Now update Order properties to match new positions
            for (int i = 0; i < categories.Count; i++)
            {
                categories[i].Order = i;
            }

            Question.Configuration["GoalCategories"] = categories;
            StateHasChanged();
        }
    }

    private void MoveGoalCategoryDown(int displayIndex)
    {
        var categories = GetOrderedGoalCategories();
        if (displayIndex >= 0 && displayIndex < categories.Count - 1)
        {
            // Simple array swap - exactly like the original working code
            (categories[displayIndex], categories[displayIndex + 1]) = (categories[displayIndex + 1], categories[displayIndex]);

            // Now update Order properties to match new positions
            for (int i = 0; i < categories.Count; i++)
            {
                categories[i].Order = i;
            }

            Question.Configuration["GoalCategories"] = categories;
            StateHasChanged();
        }
    }

    // Required flag methods for text sections
    private bool GetTextSectionRequired(int index)
    {
        var sections = GetTextSectionsFromConfiguration();
        if (index >= 0 && index < sections.Count)
        {
            return sections[index].IsRequired;
        }
        return false;
    }

    private void UpdateTextSectionRequired(int index, bool value)
    {
        var sections = GetTextSectionsFromConfiguration();
        if (index >= 0 && index < sections.Count)
        {
            sections[index].IsRequired = value;
            Question.Configuration["TextSections"] = sections;
            StateHasChanged();
        }
    }

    // Rating scale configuration methods for SelfAssessment
    private int GetRatingScale()
    {
        if (Question.Configuration.ContainsKey("RatingScale"))
        {
            if (Question.Configuration["RatingScale"] is int scale)
                return scale;
            if (int.TryParse(Question.Configuration["RatingScale"]?.ToString(), out var parsedScale))
                return parsedScale;
        }
        return 4; // Default to 1-4 scale
    }

    private void UpdateRatingScale(int scale)
    {
        Question.Configuration["RatingScale"] = scale;
        StateHasChanged();
    }

    private string GetScaleLowLabel()
    {
        if (Question.Configuration.ContainsKey("ScaleLowLabel"))
        {
            return Question.Configuration["ScaleLowLabel"]?.ToString() ?? "";
        }
        return "";
    }

    private void UpdateScaleLowLabel(string label)
    {
        Question.Configuration["ScaleLowLabel"] = label ?? "";
        StateHasChanged();
    }

    private string GetScaleHighLabel()
    {
        if (Question.Configuration.ContainsKey("ScaleHighLabel"))
        {
            return Question.Configuration["ScaleHighLabel"]?.ToString() ?? "";
        }
        return "";
    }

    private void UpdateScaleHighLabel(string label)
    {
        Question.Configuration["ScaleHighLabel"] = label ?? "";
        StateHasChanged();
    }

    private List<RatingScaleOption> GetAvailableRatingScales()
    {
        return new List<RatingScaleOption>
        {
            new RatingScaleOption { Value = 4, Text = "1-4 Stars (Traditional)" },
            new RatingScaleOption { Value = 5, Text = "1-5 Stars" },
            new RatingScaleOption { Value = 10, Text = "1-10 Scale (Detailed)" }
        };
    }

    // Helper classes for configuration
    public class RatingScaleOption
    {
        public int Value { get; set; }
        public string Text { get; set; } = "";
    }

    public class GoalCategory
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public bool IsRequired { get; set; } = false;
        public int Order { get; set; } = 0;
    }

    public class TextSection
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public bool IsRequired { get; set; } = false;
        public int Order { get; set; } = 0;
    }
}