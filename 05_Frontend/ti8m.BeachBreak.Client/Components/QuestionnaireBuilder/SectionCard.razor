@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Components.QuestionnaireBuilder
@using System.Collections

<RadzenCard Class="section-card mb-5 shadow-lg border-0 overflow-hidden">
    <!-- Section Header -->
    <div class="section-header-wrapper">
        <div class="section-content p-4 bg-light position-relative">
            <!-- Action Buttons -->
            <div class="position-absolute" style="top: 1rem; right: 1rem;">
                <div class="btn-group-vertical" role="group">
                    <RadzenButton ButtonStyle="ButtonStyle.Light"
                                 Icon="keyboard_arrow_up"
                                 Size="ButtonSize.ExtraSmall"
                                 Click="@(() => OnMoveUpClick())"
                                 Disabled="@(!CanMoveUp)"
                                 Class="mb-1 shadow-sm"
                                 Title="Move section up" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light"
                                 Icon="keyboard_arrow_down"
                                 Size="ButtonSize.ExtraSmall"
                                 Click="@(() => OnMoveDownClick())"
                                 Disabled="@(!CanMoveDown)"
                                 Class="mb-1 shadow-sm"
                                 Title="Move section down" />
                    <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                 Icon="delete_outline"
                                 Size="ButtonSize.ExtraSmall"
                                 Click="@(() => OnDeleteClick())"
                                 Class="shadow-sm"
                                 Title="Delete section" />
                </div>
            </div>

            <!-- Title Input -->
            <div class="mb-3 pe-5">
                <RadzenTextBox Value="@Section.Title"
                             ValueChanged="@(value => OnSectionTitleChanged(value))"
                             Placeholder="e.g., Performance Review 2023, Goal Setting Workshop..."
                             Class="w-100 border border-2 bg-white rounded px-3 py-2 shadow-sm"
                             Style="font-size: 1.1rem; font-weight: 600; border-color: var(--ice-blue) !important; transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;"
                             onmouseover="this.style.borderColor='var(--primary-color)'"
                             onmouseout="this.style.borderColor='var(--ice-blue)'"
                             onfocus="this.style.borderColor='var(--primary-color)'; this.style.boxShadow='0 0 0 0.25rem rgba(15, 105, 255, 0.25)'"
                             onblur="this.style.borderColor='var(--ice-blue)'; this.style.boxShadow='none'" />
            </div>

            <!-- Description Input -->
            <div class="mb-4 pe-5">
                <RadzenTextArea Value="@Section.Description"
                              ValueChanged="@(value => OnSectionDescriptionChanged(value))"
                              Placeholder="Provide context about this section's purpose. What will participants accomplish here?"
                              Class="w-100 border border-2 bg-white rounded px-3 py-2 shadow-sm"
                              Style="resize: vertical; min-height: 60px; line-height: 1.4; border-color: var(--ice-blue) !important; transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;"
                              onmouseover="this.style.borderColor='var(--primary-color)'"
                              onmouseout="this.style.borderColor='var(--ice-blue)'"
                              onfocus="this.style.borderColor='var(--primary-color)'; this.style.boxShadow='0 0 0 0.25rem rgba(15, 105, 255, 0.25)'"
                              onblur="this.style.borderColor='var(--ice-blue)'; this.style.boxShadow='none'"
                              Rows="2" />
            </div>

            <!-- Section Stats - only show if there are questions -->
            @if (Section.Questions.Count > 0)
            {
                <div class="section-stats bg-white p-3 rounded-3 shadow-sm border">
                    <div class="row g-3 text-center">
                        <div class="col-4">
                            <div class="d-flex flex-column align-items-center">
                                <div class="bg-competency-opacity rounded-circle p-2 mb-2">
                                    <RadzenIcon Icon="quiz" Class="text-competency fs-5" />
                                </div>
                                <RadzenText TextStyle="TextStyle.H6" Class="fw-bold text-competency mb-0">
                                    @GetTotalItemsCount()
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                    Items
                                </RadzenText>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="d-flex flex-column align-items-center">
                                <div class="bg-goal-category-opacity rounded-circle p-2 mb-2">
                                    <RadzenIcon Icon="star" Class="text-goal-category fs-5" />
                                </div>
                                <RadzenText TextStyle="TextStyle.H6" Class="fw-bold text-goal-category mb-0">
                                    @Section.Questions.Count(q => q.IsRequired)
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                    Required
                                </RadzenText>
                            </div>
                        </div>
                        <div class="col-4">
                            <div class="d-flex flex-column align-items-center">
                                <div class="bg-text-response-opacity rounded-circle p-2 mb-2">
                                    <RadzenIcon Icon="category" Class="text-text-response fs-5" />
                                </div>
                                <RadzenText TextStyle="TextStyle.H6" Class="fw-bold text-text-response mb-0">
                                    @GetQuestionTypesCount()
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                    Types
                                </RadzenText>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Questions Area -->
    <div class="questions-area bg-white p-4">
        <div class="questions-header mb-4 p-3 bg-light rounded-3">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <div class="bg-competency-opacity rounded-circle p-2 me-3">
                        <RadzenIcon Icon="quiz" Class="text-competency fs-4" />
                    </div>
                    <div>
                        <RadzenText TextStyle="TextStyle.H6" Class="fw-bold mb-0 text-dark">Assessment Questions</RadzenText>
                        <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                            @if (Section.Questions.Count == 0)
                            {
                                <span>Add questions to make this section interactive</span>
                            }
                            else if (Section.Questions.Count == 1)
                            {
                                <span>1 question configured</span>
                            }
                            else
                            {
                                <span>@Section.Questions.Count questions configured</span>
                            }
                        </RadzenText>
                    </div>
                </div>
                <RadzenButton Text="Add Question"
                             ButtonStyle="ButtonStyle.Primary"
                             Icon="add_circle_outline"
                             Size="ButtonSize.Medium"
                             Click="@(() => OnAddQuestionClick())"
                             Class="shadow-sm" />
            </div>
        </div>

        @* Question Type Selection *@
        @if (ShowQuestionTypeSelection)
        {
            <div class="question-type-selection mb-4">
                <RadzenCard Class="border-2 border-competency shadow-sm">
                    <div class="bg-competency-opacity p-3 rounded-top">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <RadzenText TextStyle="TextStyle.H6" Class="fw-bold mb-1 text-competency">
                                    <RadzenIcon Icon="add_circle" Class="me-2" />
                                    Choose Question Type
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                    Select the type of question you want to add to this section
                                </RadzenText>
                            </div>
                            <RadzenButton Icon="close"
                                         ButtonStyle="ButtonStyle.Light"
                                         Size="ButtonSize.Small"
                                         Click="@(() => OnCancelQuestionTypeSelection())"
                                         Class="shadow-sm"
                                         Title="Cancel" />
                        </div>
                    </div>
                    <div class="p-4">
                        <div class="row g-3">
                            <div class="col-md-4">
                                <div class="question-type-card self-assessment h-100 p-4 rounded-3 border-2 text-center position-relative cursor-pointer shadow-sm user-select-none"
                                     style="transition: all 0.15s ease-in-out; transform: scale(1);"
                                     @onclick="async () => await OnAddQuestionOfType(QuestionType.SelfAssessment)"
                                     onmouseover="this.style.transform='scale(1.02)'; this.style.boxShadow='0 8px 25px rgba(15, 105, 255, 0.15)'; this.style.borderColor='var(--primary-color)'"
                                     onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='0 0.125rem 0.25rem rgba(0, 0, 0, 0.075)'; this.style.borderColor='var(--primary-color)'"
                                     onmousedown="this.style.transform='scale(0.98)'"
                                     onmouseup="this.style.transform='scale(1.02)'"
                                     tabindex="0"
                                     role="button"
                                     aria-label="Add Self-Assessment Question">
                                    <div class="position-absolute top-0 start-50 translate-middle">
                                        <div class="bg-self-assessment text-white rounded-circle d-flex align-items-center justify-content-center" style="width: 24px; height: 24px; font-size: 0.75rem;">
                                            <RadzenIcon Icon="add" />
                                        </div>
                                    </div>
                                    <RadzenIcon Icon="self_improvement" Class="question-self-assessment fs-1 mb-3 mt-2" />
                                    <RadzenText TextStyle="TextStyle.Subtitle2" Class="fw-bold question-self-assessment mb-2">
                                        Self-Assessment
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted mb-2">
                                        Rate competencies and skills on a scale
                                    </RadzenText>
                                    <div class="mt-3">
                                        <span class="badge badge-self-assessment px-2 py-1" style="font-size: 0.7rem;">Click to Add</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="question-type-card goal-achievement h-100 p-4 rounded-3 border-2 text-center position-relative cursor-pointer shadow-sm user-select-none"
                                     style="transition: all 0.15s ease-in-out; transform: scale(1);"
                                     @onclick="async () => await OnAddQuestionOfType(QuestionType.GoalAchievement)"
                                     onmouseover="this.style.transform='scale(1.02)'; this.style.boxShadow='0 8px 25px rgba(230, 191, 127, 0.15)'; this.style.borderColor='var(--golden-milk)'"
                                     onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='0 0.125rem 0.25rem rgba(0, 0, 0, 0.075)'; this.style.borderColor='var(--warning-color)'"
                                     onmousedown="this.style.transform='scale(0.98)'"
                                     onmouseup="this.style.transform='scale(1.02)'"
                                     tabindex="0"
                                     role="button"
                                     aria-label="Add Goal Review Question">
                                    <div class="position-absolute top-0 start-50 translate-middle">
                                        <div class="bg-goal-achievement text-dark rounded-circle d-flex align-items-center justify-content-center" style="width: 24px; height: 24px; font-size: 0.75rem;">
                                            <RadzenIcon Icon="add" />
                                        </div>
                                    </div>
                                    <RadzenIcon Icon="track_changes" Class="question-goal-achievement fs-1 mb-3 mt-2" />
                                    <RadzenText TextStyle="TextStyle.Subtitle2" Class="fw-bold question-goal-achievement mb-2">
                                        Goal Review
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted mb-2">
                                        Track progress and achievement status
                                    </RadzenText>
                                    <div class="mt-3">
                                        <span class="badge badge-goal-achievement px-2 py-1" style="font-size: 0.7rem;">Click to Add</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="question-type-card text-response h-100 p-4 rounded-3 border-2 text-center position-relative cursor-pointer shadow-sm user-select-none"
                                     style="transition: all 0.15s ease-in-out; transform: scale(1);"
                                     @onclick="async () => await OnAddQuestionOfType(QuestionType.TextQuestion)"
                                     onmouseover="this.style.transform='scale(1.02)'; this.style.boxShadow='0 8px 25px rgba(147, 91, 169, 0.15)'; this.style.borderColor='var(--purple-rain)'"
                                     onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='0 0.125rem 0.25rem rgba(0, 0, 0, 0.075)'; this.style.borderColor='var(--info-color)'"
                                     onmousedown="this.style.transform='scale(0.98)'"
                                     onmouseup="this.style.transform='scale(1.02)'"
                                     tabindex="0"
                                     role="button"
                                     aria-label="Add Text Response Question">
                                    <div class="position-absolute top-0 start-50 translate-middle">
                                        <div class="bg-text-response text-white rounded-circle d-flex align-items-center justify-content-center" style="width: 24px; height: 24px; font-size: 0.75rem;">
                                            <RadzenIcon Icon="add" />
                                        </div>
                                    </div>
                                    <RadzenIcon Icon="psychology" Class="question-text-response fs-1 mb-3 mt-2" />
                                    <RadzenText TextStyle="TextStyle.Subtitle2" Class="fw-bold question-text-response mb-2">
                                        Text Response
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted mb-2">
                                        Collect written feedback and insights
                                    </RadzenText>
                                    <div class="mt-3">
                                        <span class="badge badge-text-response px-2 py-1" style="font-size: 0.7rem;">Click to Add</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </RadzenCard>
            </div>
        }

        @if (Section.Questions.Count == 0)
        {
            <div class="empty-state text-center p-5 bg-light rounded border-2 border-dashed">
                <RadzenIcon Icon="help_outline" Style="font-size: 2.5rem; color: var(--rz-text-disabled-color);" />
                <RadzenText TextStyle="TextStyle.Body1" Class="text-muted mt-2 mb-2">
                    This section needs questions to be useful
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                    Click "Add Question" to choose from self-assessments, goal reviews, or text responses
                </RadzenText>
            </div>
        }
        else
        {
            @for (int questionIndex = 0; questionIndex < Section.Questions.Count; questionIndex++)
            {
                var question = Section.Questions[questionIndex];
                var currentQuestionIndex = questionIndex;

                <QuestionCard Question="@question"
                            CanMoveUp="@(currentQuestionIndex > 0)"
                            CanMoveDown="@(currentQuestionIndex < Section.Questions.Count - 1)"
                            QuestionTypeLabels="@QuestionTypeLabels"
                            OnEdit="@(() => OnEditQuestionInternal(currentQuestionIndex))"
                            OnMoveUp="@(() => OnMoveQuestionUpInternal(currentQuestionIndex))"
                            OnMoveDown="@(() => OnMoveQuestionDownInternal(currentQuestionIndex))"
                            OnDelete="@(() => OnDeleteQuestionInternal(currentQuestionIndex))" />
            }
        }
    </div>
</RadzenCard>

@code {
    [Parameter, EditorRequired] public QuestionSection Section { get; set; } = null!;
    [Parameter, EditorRequired] public bool CanMoveUp { get; set; }
    [Parameter, EditorRequired] public bool CanMoveDown { get; set; }
    [Parameter, EditorRequired] public bool ShowQuestionTypeSelection { get; set; }
    [Parameter, EditorRequired] public Dictionary<QuestionType, string> QuestionTypeLabels { get; set; } = null!;

    [Parameter] public EventCallback OnMoveUp { get; set; }
    [Parameter] public EventCallback OnMoveDown { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    [Parameter] public EventCallback OnAddQuestion { get; set; }
    [Parameter] public EventCallback OnCancelQuestionSelection { get; set; }
    [Parameter] public EventCallback<QuestionType> OnAddQuestionType { get; set; }
    [Parameter] public EventCallback<int> OnEditQuestion { get; set; }
    [Parameter] public EventCallback<int> OnMoveQuestionUp { get; set; }
    [Parameter] public EventCallback<int> OnMoveQuestionDown { get; set; }
    [Parameter] public EventCallback<int> OnDeleteQuestion { get; set; }
    [Parameter] public EventCallback<string> OnTitleChanged { get; set; }
    [Parameter] public EventCallback<string> OnDescriptionChanged { get; set; }

    private async Task OnMoveUpClick() => await OnMoveUp.InvokeAsync();
    private async Task OnMoveDownClick() => await OnMoveDown.InvokeAsync();
    private async Task OnDeleteClick() => await OnDelete.InvokeAsync();
    private async Task OnAddQuestionClick() => await OnAddQuestion.InvokeAsync();
    private async Task OnCancelQuestionTypeSelection() => await OnCancelQuestionSelection.InvokeAsync();
    private async Task OnAddQuestionOfType(QuestionType type) => await OnAddQuestionType.InvokeAsync(type);

    private async Task OnSectionTitleChanged(string value)
    {
        Section.Title = value ?? "";
        await OnTitleChanged.InvokeAsync(value);
    }

    private async Task OnSectionDescriptionChanged(string value)
    {
        Section.Description = value ?? "";
        await OnDescriptionChanged.InvokeAsync(value);
    }

    private async Task OnEditQuestionInternal(int questionIndex) => await OnEditQuestion.InvokeAsync(questionIndex);
    private async Task OnMoveQuestionUpInternal(int questionIndex) => await OnMoveQuestionUp.InvokeAsync(questionIndex);
    private async Task OnMoveQuestionDownInternal(int questionIndex) => await OnMoveQuestionDown.InvokeAsync(questionIndex);
    private async Task OnDeleteQuestionInternal(int questionIndex) => await OnDeleteQuestion.InvokeAsync(questionIndex);


    private string GetSectionNumber()
    {
        // This could be enhanced to get the actual section number from parent
        return (Section.Order + 1).ToString();
    }

    private int GetQuestionTypesCount()
    {
        // Count unique question types in this section
        return Section.Questions.Select(q => q.Type).Distinct().Count();
    }

    private int GetTotalItemsCount()
    {
        int totalItems = 0;

        foreach (var question in Section.Questions)
        {
            switch (question.Type)
            {
                case QuestionType.SelfAssessment:
                    if (question.Configuration.TryGetValue("Competencies", out var competenciesObj))
                    {
                        if (competenciesObj is System.Text.Json.JsonElement jsonElement && jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                        {
                            try { totalItems += jsonElement.GetArrayLength(); } catch { }
                        }
                        else if (competenciesObj is System.Collections.ICollection collection)
                        {
                            totalItems += collection.Count;
                        }
                    }
                    break;
                case QuestionType.GoalAchievement:
                    if (question.Configuration.TryGetValue("GoalCategories", out var goalCategoriesObj))
                    {
                        if (goalCategoriesObj is System.Text.Json.JsonElement jsonElement && jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                        {
                            try { totalItems += jsonElement.GetArrayLength(); } catch { }
                        }
                        else if (goalCategoriesObj is System.Collections.ICollection collection)
                        {
                            totalItems += collection.Count;
                        }
                    }
                    break;
                case QuestionType.TextQuestion:
                    if (question.Configuration.TryGetValue("TextSections", out var textSectionsObj))
                    {
                        if (textSectionsObj is System.Text.Json.JsonElement jsonElement && jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                        {
                            try { totalItems += jsonElement.GetArrayLength(); } catch { }
                        }
                        else if (textSectionsObj is System.Collections.ICollection collection)
                        {
                            totalItems += collection.Count;
                        }
                    }
                    // Check for legacy format
                    else if (question.Configuration.ContainsKey("SectionTitle") || question.Configuration.ContainsKey("SectionDescription"))
                    {
                        totalItems += 1;
                    }
                    break;
                default:
                    totalItems += 1; // Fallback for unknown question types
                    break;
            }
        }

        return totalItems;
    }
}