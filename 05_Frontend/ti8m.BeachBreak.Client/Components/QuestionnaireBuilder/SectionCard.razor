@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Components.QuestionnaireBuilder
@using ti8m.BeachBreak.Client.Components.Shared
@using System.Collections

<div class="modern-section-card mb-4">
    <!-- Enhanced Section Header with proper action button placement -->
    <div class="section-header-modern">
        <!-- Header Top Row: Type indicators and Action Buttons -->
        <div class="header-top-row">
            <div class="section-badges">
                <div class="section-type-badge">
                    <RadzenIcon Icon="@GetSectionTypeIcon()" Class="badge-icon" />
                    <span class="badge-text">@GetSectionTypeName()</span>
                </div>
                <div class="completion-role-badge">
                    <RadzenIcon Icon="@Section.GetRoleIcon()" Class="badge-icon" />
                    <span class="badge-text">@GetCompletionRoleText()</span>
                </div>
            </div>

            <!-- Action Buttons - moved to dedicated area -->
            <div class="section-actions">
                <AsyncButton ButtonStyle="ButtonStyle.Light"
                            Icon="keyboard_arrow_up"
                            Size="ButtonSize.Small"
                            Click="@(() => OnMoveUpClick())"
                            Disabled="@(!CanMoveUp || !Template.IsAvailableForEditing)"
                            Title="Move section up"
                            Class="action-btn" />
                <AsyncButton ButtonStyle="ButtonStyle.Light"
                            Icon="keyboard_arrow_down"
                            Size="ButtonSize.Small"
                            Click="@(() => OnMoveDownClick())"
                            Disabled="@(!CanMoveDown || !Template.IsAvailableForEditing)"
                            Title="Move section down"
                            Class="action-btn" />
                <AsyncButton ButtonStyle="ButtonStyle.Danger"
                            ProcessingText="Deleting"
                            Icon="delete_outline"
                            Size="ButtonSize.Small"
                            Click="@(() => OnDeleteClick())"
                            Title="Delete section"
                            Class="action-btn action-btn-danger"
                            Disabled="@(!Template.IsAvailableForEditing)" />
            </div>
        </div>

        <!-- Header Content Row: Role selector -->
        <div class="header-content-row">
            <div class="role-assignment-section">
                <RadzenText TextStyle="TextStyle.Caption" Class="role-label">Who completes this section?</RadzenText>
                @if (!Template.RequiresManagerReview)
                {
                    <RadzenText TextStyle="TextStyle.Caption" Class="text-warning d-block mb-2">
                        <RadzenIcon Icon="info" Style="font-size: 0.875rem;" />
                        Manager review disabled - sections must be completed by employees only
                    </RadzenText>
                }
                <RadzenRadioButtonList @bind-Value="@Section.CompletionRole"
                                       Data="@GetFilteredRoleOptions()"
                                       TextProperty="Text"
                                       ValueProperty="Value"
                                       Orientation="Radzen.Orientation.Horizontal"
                                       Class="role-select-modern"
                                       Disabled="@(!Template.IsAvailableForEditing)" />
            </div>
        </div>
    </div>

    <!-- Section Content Area -->
    <div class="section-content-modern">

        <!-- Title Input -->
        <div class="input-group-modern">
            <RadzenTextBox Value="@Section.Title"
                         ValueChanged="@(value => OnSectionTitleChanged(value))"
                         Placeholder="e.g., Performance Review 2023, Goal Setting Workshop..."
                         Class="title-input-modern"
                         Disabled="@(!Template.IsAvailableForEditing)" />
        </div>

        <!-- Description Input -->
        <div class="input-group-modern">
            <RadzenTextArea Value="@Section.Description"
                          ValueChanged="@(value => OnSectionDescriptionChanged(value))"
                          Placeholder="Provide context about this section's purpose. What will participants accomplish here?"
                          Class="description-input-modern"
                          Disabled="@(!Template.IsAvailableForEditing)"
                          Rows="3" />
        </div>

        <!-- Rating Scale Configuration - only for Assessment sections -->
        @if (Section.Questions.Any() && Section.Questions.First().Type == QuestionType.Assessment)
        {
            var firstQuestion = Section.Questions.First();
            <div class="rating-scale-config-modern">
                <div class="config-header">
                    <RadzenIcon Icon="tune" Class="config-icon" />
                    <RadzenText TextStyle="TextStyle.Body1" Class="config-title">Rating Scale Configuration</RadzenText>
                </div>
                <div class="rating-scale-grid">
                    <div class="scale-input">
                        <RadzenText TextStyle="TextStyle.Caption" Class="input-label">Scale</RadzenText>
                        <RadzenDropDown Value="@GetRatingScale(firstQuestion)"
                                       ValueChanged="@((int value) => SetRatingScale(firstQuestion, value))"
                                       Data="@(new List<int> { 3, 4, 5, 7, 10 })"
                                       Class="modern-dropdown"
                                       Disabled="@(!Template.IsAvailableForEditing)" />
                    </div>
                    <div class="scale-input">
                        <RadzenText TextStyle="TextStyle.Caption" Class="input-label">Low Label</RadzenText>
                        <RadzenTextBox Value="@GetScaleLowLabel(firstQuestion)"
                                      ValueChanged="@((string value) => SetScaleLowLabel(firstQuestion, value))"
                                      Placeholder="e.g., Poor, Beginner"
                                      Class="modern-textbox"
                                      Disabled="@(!Template.IsAvailableForEditing)" />
                    </div>
                    <div class="scale-input">
                        <RadzenText TextStyle="TextStyle.Caption" Class="input-label">High Label</RadzenText>
                        <RadzenTextBox Value="@GetScaleHighLabel(firstQuestion)"
                                      ValueChanged="@((string value) => SetScaleHighLabel(firstQuestion, value))"
                                      Placeholder="e.g., Excellent, Expert"
                                      Class="modern-textbox"
                                      Disabled="@(!Template.IsAvailableForEditing)" />
                    </div>
                </div>
            </div>
        }

        <!-- Enhanced Section Stats -->
        @if (GetItemCount() > 0)
        {
            <div class="section-stats-modern">
                <div class="stat-item">
                    <RadzenIcon Icon="quiz" Class="stat-icon" />
                    <span class="stat-number">@GetItemCount()</span>
                    <span class="stat-label">items</span>
                </div>
                <div class="stat-divider"></div>
                <div class="stat-item">
                    <RadzenIcon Icon="star" Class="stat-icon" />
                    <span class="stat-number">@GetRequiredItemCount()</span>
                    <span class="stat-label">required</span>
                </div>
            </div>
        }
    </div>

    <!-- Items Area -->
    <div class="items-area p-3 pt-0">
        <div class="items-header mb-3">
            <div class="d-flex justify-content-between align-items-center">
                <RadzenText TextStyle="TextStyle.Subtitle2" Class="fw-bold mb-0 d-flex align-items-center">
                    <RadzenIcon Icon="@GetSectionTypeIcon()" Style="@($"color: {GetSectionTypeColor()};")" Class="me-2" />
                    @GetSectionTypeName() Items
                </RadzenText>
                <AsyncButton Text="Add Item"
                            ButtonStyle="ButtonStyle.Primary"
                            Icon="add_circle_outline"
                            Size="ButtonSize.Small"
                            Click="@(() => OnAddItemClick())"
                            Disabled="@(!Template.IsAvailableForEditing)" />
            </div>
        </div>


        @* Question Type Selection - Only show if section has no questions yet *@
        @if (ShowQuestionTypeSelection && !Section.Questions.Any())
        {
            <div class="question-type-selection mb-4">
                <div class="border-2 rounded p-0" style="border-color: var(--primary-color);">
                    <div class="p-3 rounded-top" style="background: var(--light-gray);">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-1" style="color: var(--primary-color);">
                                    <RadzenIcon Icon="add_circle" Class="me-2" />
                                    Choose Question Type
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                    Select the type of question you want to add to this section
                                </RadzenText>
                            </div>
                            <AsyncButton Icon="close"
                                        ButtonStyle="ButtonStyle.Light"
                                        Size="ButtonSize.Small"
                                        Click="@(() => OnCancelQuestionTypeSelection())"
                                        Title="Cancel" />
                        </div>
                    </div>
                    <div class="p-4">
                        <div class="row g-3">
                            <div class="col-md-4">
                                <div class="question-type-card assessment h-100 p-4 rounded-3 border-2 text-center position-relative cursor-pointer shadow-sm user-select-none"
                                     style="transition: all 0.15s ease-in-out; transform: scale(1);"
                                     @onclick="async () => await OnAddQuestionOfType(QuestionType.Assessment)"
                                     onmouseover="this.style.transform='scale(1.02)'; this.style.boxShadow='0 8px 25px rgba(15, 105, 255, 0.15)'; this.style.borderColor='var(--primary-color)'"
                                     onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='0 0.125rem 0.25rem rgba(0, 0, 0, 0.075)'; this.style.borderColor='var(--primary-color)'"
                                     onmousedown="this.style.transform='scale(0.98)'"
                                     onmouseup="this.style.transform='scale(1.02)'"
                                     tabindex="0"
                                     role="button"
                                     aria-label="Add Assessment Question">
                                    <div class="position-absolute top-0 start-50 translate-middle">
                                        <div class="bg-assessment text-white rounded-circle d-flex align-items-center justify-content-center" style="width: 24px; height: 24px; font-size: 0.75rem;">
                                            <RadzenIcon Icon="add" />
                                        </div>
                                    </div>
                                    <RadzenIcon Icon="self_improvement" Class="question-assessment fs-1 mb-3 mt-2" />
                                    <RadzenText TextStyle="TextStyle.Subtitle2" Class="fw-bold question-assessment mb-2">
                                        Assessment
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted mb-2">
                                        Rate competencies and skills on a scale
                                    </RadzenText>
                                    <div class="mt-3">
                                        <span class="badge badge-assessment px-2 py-1" style="font-size: 0.7rem;">Click to Add</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="question-type-card goal-achievement h-100 p-4 rounded-3 border-2 text-center position-relative cursor-pointer shadow-sm user-select-none"
                                     style="transition: all 0.15s ease-in-out; transform: scale(1);"
                                     @onclick="async () => await OnAddQuestionOfType(QuestionType.GoalAchievement)"
                                     onmouseover="this.style.transform='scale(1.02)'; this.style.boxShadow='0 8px 25px rgba(230, 191, 127, 0.15)'; this.style.borderColor='var(--golden-milk)'"
                                     onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='0 0.125rem 0.25rem rgba(0, 0, 0, 0.075)'; this.style.borderColor='var(--warning-color)'"
                                     onmousedown="this.style.transform='scale(0.98)'"
                                     onmouseup="this.style.transform='scale(1.02)'"
                                     tabindex="0"
                                     role="button"
                                     aria-label="Add Goal Review Question">
                                    <div class="position-absolute top-0 start-50 translate-middle">
                                        <div class="bg-goal-achievement text-dark rounded-circle d-flex align-items-center justify-content-center" style="width: 24px; height: 24px; font-size: 0.75rem;">
                                            <RadzenIcon Icon="add" />
                                        </div>
                                    </div>
                                    <RadzenIcon Icon="track_changes" Class="question-goal-achievement fs-1 mb-3 mt-2" />
                                    <RadzenText TextStyle="TextStyle.Subtitle2" Class="fw-bold question-goal-achievement mb-2">
                                        Goal Review
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted mb-2">
                                        Track progress and achievement status
                                    </RadzenText>
                                    <div class="mt-3">
                                        <span class="badge badge-goal-achievement px-2 py-1" style="font-size: 0.7rem;">Click to Add</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="question-type-card text-response h-100 p-4 rounded-3 border-2 text-center position-relative cursor-pointer shadow-sm user-select-none"
                                     style="transition: all 0.15s ease-in-out; transform: scale(1);"
                                     @onclick="async () => await OnAddQuestionOfType(QuestionType.TextQuestion)"
                                     onmouseover="this.style.transform='scale(1.02)'; this.style.boxShadow='0 8px 25px rgba(147, 91, 169, 0.15)'; this.style.borderColor='var(--purple-rain)'"
                                     onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='0 0.125rem 0.25rem rgba(0, 0, 0, 0.075)'; this.style.borderColor='var(--info-color)'"
                                     onmousedown="this.style.transform='scale(0.98)'"
                                     onmouseup="this.style.transform='scale(1.02)'"
                                     tabindex="0"
                                     role="button"
                                     aria-label="Add Text Response Question">
                                    <div class="position-absolute top-0 start-50 translate-middle">
                                        <div class="bg-text-response text-white rounded-circle d-flex align-items-center justify-content-center" style="width: 24px; height: 24px; font-size: 0.75rem;">
                                            <RadzenIcon Icon="add" />
                                        </div>
                                    </div>
                                    <RadzenIcon Icon="psychology" Class="question-text-response fs-1 mb-3 mt-2" />
                                    <RadzenText TextStyle="TextStyle.Subtitle2" Class="fw-bold question-text-response mb-2">
                                        Text Response
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted mb-2">
                                        Collect written feedback and insights
                                    </RadzenText>
                                    <div class="mt-3">
                                        <span class="badge badge-text-response px-2 py-1" style="font-size: 0.7rem;">Click to Add</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        @if (Section.Questions.Count == 0)
        {
            <div class="empty-questions text-center py-4">
                <RadzenIcon Icon="@GetSectionTypeIcon()" Style="@($"font-size: 1.5rem; color: {GetSectionTypeColor()}; opacity: 0.5;")" />
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mt-2">
                    No @GetSectionTypeName().ToLower() items yet
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                    Click "Add Item" to get started
                </RadzenText>
            </div>
        }
        else
        {
            @for (int questionIndex = 0; questionIndex < Section.Questions.Count; questionIndex++)
            {
                var question = Section.Questions[questionIndex];
                var currentQuestionIndex = questionIndex;

                <QuestionCard Question="@question"
                            Template="@Template"
                            CanMoveUp="@(currentQuestionIndex > 0)"
                            CanMoveDown="@(currentQuestionIndex < Section.Questions.Count - 1)"
                            QuestionTypeLabels="@QuestionTypeLabels"
                            OnEdit="@(() => OnEditQuestionInternal(currentQuestionIndex))"
                            OnMoveUp="@(() => OnMoveQuestionUpInternal(currentQuestionIndex))"
                            OnMoveDown="@(() => OnMoveQuestionDownInternal(currentQuestionIndex))"
                            OnDelete="@(() => OnDeleteQuestionInternal(currentQuestionIndex))"
                            OnRequiredChanged="@OnRequiredItemsChanged" />
            }
        }
    </div>
</div>


@code {
    [Parameter, EditorRequired] public QuestionSection Section { get; set; } = null!;
    [Parameter, EditorRequired] public QuestionnaireTemplate Template { get; set; } = null!;
    [Parameter, EditorRequired] public bool CanMoveUp { get; set; }
    [Parameter, EditorRequired] public bool CanMoveDown { get; set; }
    [Parameter, EditorRequired] public bool ShowQuestionTypeSelection { get; set; }
    [Parameter, EditorRequired] public Dictionary<QuestionType, string> QuestionTypeLabels { get; set; } = null!;

    [Parameter] public EventCallback OnMoveUp { get; set; }
    [Parameter] public EventCallback OnMoveDown { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    [Parameter] public EventCallback OnAddQuestion { get; set; }
    [Parameter] public EventCallback OnAddItemDirectly { get; set; }
    [Parameter] public EventCallback OnCancelQuestionSelection { get; set; }
    [Parameter] public EventCallback<QuestionType> OnAddQuestionType { get; set; }
    [Parameter] public EventCallback<int> OnEditQuestion { get; set; }
    [Parameter] public EventCallback<int> OnMoveQuestionUp { get; set; }
    [Parameter] public EventCallback<int> OnMoveQuestionDown { get; set; }
    [Parameter] public EventCallback<int> OnDeleteQuestion { get; set; }
    [Parameter] public EventCallback<string> OnTitleChanged { get; set; }
    [Parameter] public EventCallback<string> OnDescriptionChanged { get; set; }

    private async Task OnMoveUpClick() => await OnMoveUp.InvokeAsync();
    private async Task OnMoveDownClick() => await OnMoveDown.InvokeAsync();
    private async Task OnDeleteClick() => await OnDelete.InvokeAsync();
    private async Task OnAddQuestionClick() => await OnAddQuestion.InvokeAsync();
    private async Task OnAddItemClick()
    {
        // If section already has questions, add another of the same type
        if (Section.Questions.Any())
        {
            await OnAddItemDirectly.InvokeAsync();
        }
        else
        {
            // No questions yet, show question type selection
            await OnAddQuestion.InvokeAsync();
        }
    }
    private async Task OnCancelQuestionTypeSelection() => await OnCancelQuestionSelection.InvokeAsync();
    private async Task OnAddQuestionOfType(QuestionType type) => await OnAddQuestionType.InvokeAsync(type);

    private async Task OnSectionTitleChanged(string value)
    {
        Section.Title = value ?? "";
        await OnTitleChanged.InvokeAsync(value);
    }

    private async Task OnSectionDescriptionChanged(string value)
    {
        Section.Description = value ?? "";
        await OnDescriptionChanged.InvokeAsync(value);
    }

    private async Task OnEditQuestionInternal(int questionIndex) => await OnEditQuestion.InvokeAsync(questionIndex);
    private async Task OnMoveQuestionUpInternal(int questionIndex) => await OnMoveQuestionUp.InvokeAsync(questionIndex);
    private async Task OnMoveQuestionDownInternal(int questionIndex) => await OnMoveQuestionDown.InvokeAsync(questionIndex);
    private async Task OnDeleteQuestionInternal(int questionIndex) => await OnDeleteQuestion.InvokeAsync(questionIndex);

    private async Task OnRequiredItemsChanged()
    {
        // Force a refresh of the component to update the required count display
        StateHasChanged();
    }


    private string GetSectionNumber()
    {
        // This could be enhanced to get the actual section number from parent
        return (Section.Order + 1).ToString();
    }

    private int GetQuestionTypesCount()
    {
        // Count unique question types in this section
        return Section.Questions.Select(q => q.Type).Distinct().Count();
    }

    private int GetTotalItemsCount()
    {
        int totalItems = 0;

        foreach (var question in Section.Questions)
        {
            switch (question.Type)
            {
                case QuestionType.Assessment:
                    if (question.Configuration.TryGetValue("Competencies", out var competenciesObj))
                    {
                        if (competenciesObj is System.Text.Json.JsonElement jsonElement && jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                        {
                            try { totalItems += jsonElement.GetArrayLength(); } catch { }
                        }
                        else if (competenciesObj is System.Collections.ICollection collection)
                        {
                            totalItems += collection.Count;
                        }
                    }
                    break;
                case QuestionType.GoalAchievement:
                    if (question.Configuration.TryGetValue("GoalCategories", out var goalCategoriesObj))
                    {
                        if (goalCategoriesObj is System.Text.Json.JsonElement jsonElement && jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                        {
                            try { totalItems += jsonElement.GetArrayLength(); } catch { }
                        }
                        else if (goalCategoriesObj is System.Collections.ICollection collection)
                        {
                            totalItems += collection.Count;
                        }
                    }
                    break;
                case QuestionType.TextQuestion:
                    if (question.Configuration.TryGetValue("TextSections", out var textSectionsObj))
                    {
                        if (textSectionsObj is System.Text.Json.JsonElement jsonElement && jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                        {
                            try { totalItems += jsonElement.GetArrayLength(); } catch { }
                        }
                        else if (textSectionsObj is System.Collections.ICollection collection)
                        {
                            totalItems += collection.Count;
                        }
                    }
                    // Check for legacy format
                    else if (question.Configuration.ContainsKey("SectionTitle") || question.Configuration.ContainsKey("SectionDescription"))
                    {
                        totalItems += 1;
                    }
                    break;
                default:
                    totalItems += 1; // Fallback for unknown question types
                    break;
            }
        }

        return totalItems;
    }

    // New methods for simplified structure
    private string GetSectionTypeIcon()
    {
        return Section.Questions.FirstOrDefault()?.Type switch
        {
            QuestionType.Assessment => "self_improvement",
            QuestionType.GoalAchievement => "track_changes",
            QuestionType.TextQuestion => "psychology",
            _ => "help"
        };
    }

    private string GetSectionTypeName()
    {
        return Section.Questions.FirstOrDefault()?.Type switch
        {
            QuestionType.Assessment => "Assessment",
            QuestionType.GoalAchievement => "Goal Achievement",
            QuestionType.TextQuestion => "Text Question",
            _ => "Unknown"
        };
    }

    private string GetSectionTypeColor()
    {
        return Section.Questions.FirstOrDefault()?.Type switch
        {
            QuestionType.Assessment => "#0F60FF",
            QuestionType.GoalAchievement => "#00E6C8",
            QuestionType.TextQuestion => "#935BA9",
            _ => "#6c757d"
        };
    }

    private int GetItemCount()
    {
        return GetTotalItemsCount();
    }

    private int GetRequiredItemCount()
    {
        int requiredItems = 0;

        foreach (var question in Section.Questions)
        {
            switch (question.Type)
            {
                case QuestionType.Assessment:
                    if (question.Configuration.TryGetValue("Competencies", out var competenciesObj))
                    {
                        if (competenciesObj is System.Text.Json.JsonElement jsonElement && jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                        {
                            try
                            {
                                var competencies = System.Text.Json.JsonSerializer.Deserialize<List<CompetencyDefinition>>(jsonElement.GetRawText(), new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<CompetencyDefinition>();
                                requiredItems += competencies.Count(c => c.IsRequired);
                            }
                            catch { }
                        }
                        else if (competenciesObj is List<CompetencyDefinition> competenciesList)
                        {
                            requiredItems += competenciesList.Count(c => c.IsRequired);
                        }
                    }
                    break;
                case QuestionType.GoalAchievement:
                    if (question.Configuration.TryGetValue("GoalCategories", out var goalCategoriesObj))
                    {
                        if (goalCategoriesObj is System.Text.Json.JsonElement jsonElement && jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                        {
                            try
                            {
                                var categories = System.Text.Json.JsonSerializer.Deserialize<List<QuestionCard.GoalCategory>>(jsonElement.GetRawText(), new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<QuestionCard.GoalCategory>();
                                requiredItems += categories.Count(c => c.IsRequired);
                            }
                            catch { }
                        }
                        else if (goalCategoriesObj is List<QuestionCard.GoalCategory> categoriesList)
                        {
                            requiredItems += categoriesList.Count(c => c.IsRequired);
                        }
                        else if (goalCategoriesObj is List<object> objectList)
                        {
                            try
                            {
                                var json = System.Text.Json.JsonSerializer.Serialize(objectList);
                                var categories = System.Text.Json.JsonSerializer.Deserialize<List<QuestionCard.GoalCategory>>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<QuestionCard.GoalCategory>();
                                requiredItems += categories.Count(c => c.IsRequired);
                            }
                            catch { }
                        }
                    }
                    break;
                case QuestionType.TextQuestion:
                    if (question.Configuration.TryGetValue("TextSections", out var textSectionsObj))
                    {
                        if (textSectionsObj is System.Text.Json.JsonElement jsonElement && jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
                        {
                            try
                            {
                                var sections = System.Text.Json.JsonSerializer.Deserialize<List<QuestionCard.TextSection>>(jsonElement.GetRawText(), new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<QuestionCard.TextSection>();
                                requiredItems += sections.Count(s => s.IsRequired);
                            }
                            catch { }
                        }
                        else if (textSectionsObj is List<QuestionCard.TextSection> sectionsList)
                        {
                            requiredItems += sectionsList.Count(s => s.IsRequired);
                        }
                        else if (textSectionsObj is List<object> objectList)
                        {
                            try
                            {
                                var json = System.Text.Json.JsonSerializer.Serialize(objectList);
                                var sections = System.Text.Json.JsonSerializer.Deserialize<List<QuestionCard.TextSection>>(json, new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<QuestionCard.TextSection>();
                                requiredItems += sections.Count(s => s.IsRequired);
                            }
                            catch { }
                        }
                    }
                    // Check for legacy format
                    else if (question.Configuration.ContainsKey("SectionTitle") || question.Configuration.ContainsKey("SectionDescription"))
                    {
                        // Legacy text questions don't have individual required flags, so count as 0
                    }
                    break;
                default:
                    // For unknown question types, fall back to the question-level required flag
                    if (question.IsRequired) requiredItems += 1;
                    break;
            }
        }

        return requiredItems;
    }

    // Rating scale configuration methods for Assessment sections
    private int GetRatingScale(QuestionItem question)
    {
        if (question.Configuration.TryGetValue("RatingScale", out var scale))
        {
            // Handle JsonElement properly
            if (scale is System.Text.Json.JsonElement jsonElement)
            {
                return jsonElement.GetInt32();
            }
        }
        return 4; // Default
    }

    private void SetRatingScale(QuestionItem question, int value)
    {
        question.Configuration["RatingScale"] = value;
        // Apply to all questions in the section
        foreach (var q in Section.Questions.Where(q => q.Type == QuestionType.Assessment))
        {
            q.Configuration["RatingScale"] = value;
        }
        StateHasChanged();
    }

    private string GetScaleLowLabel(QuestionItem question)
    {
        if (question.Configuration.TryGetValue("ScaleLowLabel", out var label))
        {
            return label.ToString() ?? "Poor";
        }
        return "Poor";
    }

    private void SetScaleLowLabel(QuestionItem question, string value)
    {
        // Apply to all questions in the section
        foreach (var q in Section.Questions.Where(q => q.Type == QuestionType.Assessment))
        {
            q.Configuration["ScaleLowLabel"] = value ?? "Poor";
        }
        StateHasChanged();
    }

    private string GetScaleHighLabel(QuestionItem question)
    {
        if (question.Configuration.TryGetValue("ScaleHighLabel", out var label))
        {
            return label.ToString() ?? "Excellent";
        }
        return "Excellent";
    }

    private void SetScaleHighLabel(QuestionItem question, string value)
    {
        // Apply to all questions in the section
        foreach (var q in Section.Questions.Where(q => q.Type == QuestionType.Assessment))
        {
            q.Configuration["ScaleHighLabel"] = value ?? "Excellent";
        }
        StateHasChanged();
    }

    // Role selection support
    private List<RoleOption> roleOptions = new()
    {
        new() { Value = CompletionRole.Employee, Text = "Employee", Icon = "person" },
        new() { Value = CompletionRole.Manager, Text = "Manager", Icon = "supervisor_account" },
        new() { Value = CompletionRole.Both, Text = "Both", Icon = "groups" }
    };

    private List<RoleOption> GetFilteredRoleOptions()
    {
        // If manager review is not required, only allow Employee role
        if (!Template.RequiresManagerReview)
        {
            // Ensure section is set to Employee
            if (Section.CompletionRole != CompletionRole.Employee)
            {
                Section.CompletionRole = CompletionRole.Employee;
            }
            return roleOptions.Where(r => r.Value == CompletionRole.Employee).ToList();
        }
        return roleOptions;
    }

    private string GetCompletionRoleText()
    {
        return Section.CompletionRole switch
        {
            CompletionRole.Employee => "Employee",
            CompletionRole.Manager => "Manager",
            CompletionRole.Both => "Both",
            _ => "Unknown"
        };
    }

    public class RoleOption
    {
        public CompletionRole Value { get; set; }
        public string Text { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
    }
}