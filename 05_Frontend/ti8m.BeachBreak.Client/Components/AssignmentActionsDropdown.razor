@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models

<style>
    .action-dropdown {
        min-width: 120px;
    }

    .action-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 0.75rem;
        border-radius: 4px;
        transition: all 0.2s ease;
        cursor: pointer;
    }

    .action-item:hover {
        background: rgba(var(--blue-new-rgb), 0.1);
    }

    .action-item.destructive:hover {
        background: rgba(220, 53, 69, 0.1);
        color: #dc3545;
    }

    .action-item.destructive .action-icon {
        color: #dc3545;
    }

    .action-icon {
        font-size: 1rem;
        color: var(--blue-new);
    }

    .action-text {
        font-size: 0.875rem;
        font-weight: 500;
    }

    .dropdown-disabled {
        opacity: 0.6;
        pointer-events: none;
    }

    :root {
        --blue-new-rgb: 15, 105, 255;
    }
</style>

<RadzenDropDown Data="@GetAvailableActions()"
               TextProperty="Text"
               ValueProperty="Value"
               TValue="string"
               Placeholder="Actions"
               Change="@OnActionSelected"
               Class="@($"action-dropdown {(IsDisabled ? "dropdown-disabled" : "")}")"
               Disabled="@IsDisabled"
               Style="width: 100px;">
    <Template Context="action">
        <div class="action-item @(action.IsDestructive ? "destructive" : "")">
            <RadzenIcon Icon="@action.Icon" Class="action-icon" />
            <span class="action-text">@action.Text</span>
        </div>
    </Template>
</RadzenDropDown>

@code {
    [Parameter] public QuestionnaireAssignment Assignment { get; set; } = default!;
    [Parameter] public EventCallback<AssignmentActionEventArgs> OnActionExecuted { get; set; }
    [Parameter] public bool IsDisabled { get; set; } = false;
    [Parameter] public bool ShowViewAction { get; set; } = true;
    [Parameter] public bool ShowEditAction { get; set; } = true;
    [Parameter] public bool ShowReminderAction { get; set; } = true;
    [Parameter] public bool ShowCancelAction { get; set; } = true;

    private List<AssignmentAction> GetAvailableActions()
    {
        var actions = new List<AssignmentAction>();

        if (ShowViewAction)
        {
            actions.Add(new AssignmentAction
            {
                Text = "View Details",
                Value = "view",
                Icon = "visibility",
                IsDestructive = false,
                IsEnabled = true
            });
        }

        if (ShowEditAction && CanEdit())
        {
            actions.Add(new AssignmentAction
            {
                Text = "Edit Assignment",
                Value = "edit",
                Icon = "edit",
                IsDestructive = false,
                IsEnabled = true
            });
        }

        if (ShowReminderAction && CanSendReminder())
        {
            actions.Add(new AssignmentAction
            {
                Text = "Send Reminder",
                Value = "remind",
                Icon = "notifications",
                IsDestructive = false,
                IsEnabled = true
            });
        }

        if (ShowCancelAction && CanCancel())
        {
            actions.Add(new AssignmentAction
            {
                Text = "Cancel Assignment",
                Value = "cancel",
                Icon = "cancel",
                IsDestructive = true,
                IsEnabled = true
            });
        }

        return actions.Where(a => a.IsEnabled).ToList();
    }

    private bool CanEdit()
    {
        return Assignment.Status != AssignmentStatus.Completed &&
               Assignment.Status != AssignmentStatus.Cancelled;
    }

    private bool CanSendReminder()
    {
        return Assignment.Status == AssignmentStatus.Assigned ||
               Assignment.Status == AssignmentStatus.InProgress;
    }

    private bool CanCancel()
    {
        return Assignment.Status != AssignmentStatus.Completed &&
               Assignment.Status != AssignmentStatus.Cancelled;
    }

    private async Task OnActionSelected(object value)
    {
        var actionValue = value?.ToString();
        if (string.IsNullOrEmpty(actionValue)) return;

        var eventArgs = new AssignmentActionEventArgs
        {
            Assignment = Assignment,
            Action = actionValue
        };

        await OnActionExecuted.InvokeAsync(eventArgs);
    }

    public class AssignmentAction
    {
        public string Text { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public bool IsDestructive { get; set; } = false;
        public bool IsEnabled { get; set; } = true;
    }

    public class AssignmentActionEventArgs
    {
        public QuestionnaireAssignment Assignment { get; set; } = default!;
        public string Action { get; set; } = string.Empty;
    }
}