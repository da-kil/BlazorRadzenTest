@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components.Shared
@inherits ti8m.BeachBreak.Client.Components.Shared.OptimizedComponentBase

<TabbedDialog @ref="tabbedDialog"
              TModel="EditAssignmentModel"
              Title="Edit Assignment"
              Subtitle="Modify assignment details, change employees, and update settings"
              HeaderIcon="edit"
              Tabs="@dialogTabs"
              Model="@editModel"
              OnCancel="@HandleCancel"
              OnSave="@HandleSave"
              ShowForm="false"
              Width="1200px"
              Height="auto"
              MaxHeight="95vh">
    <HeaderActions>
        <!-- Current Assignment Overview -->
        <div class="current-assignment">
            <RadzenText TextStyle="TextStyle.Body2" Class="text-white-75 mb-2">Current Assignment</RadzenText>
            <div class="assignment-overview">
                <div class="employee-avatar">
                    @GetEmployeeInitials()
                </div>
                <div class="assignment-info">
                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="text-white fw-bold">@Assignment.EmployeeName</RadzenText>
                    <RadzenText TextStyle="TextStyle.Caption" Class="text-white-75">@Assignment.EmployeeEmail</RadzenText>
                    <RadzenText TextStyle="TextStyle.Caption" Class="text-white-75">Assigned @Assignment.AssignedDate.ToString("MMM dd, yyyy")</RadzenText>
                </div>
                @if (Questionnaire != null)
                {
                    <div class="questionnaire-badge">
                        <RadzenIcon Icon="quiz" Style="margin-right: 0.5rem;" />
                        @Questionnaire.Name
                    </div>
                }
            </div>
        </div>
    </HeaderActions>
    <FooterEndActions>
        <AsyncButton Text="Save Changes"
                    ProcessingText="Saving"
                    ButtonStyle="ButtonStyle.Success"
                    Icon="save"
                    ProcessingIcon="hourglass_empty"
                    Click="@(() => HandleSave(editModel))"
                    Disabled="@(IsLoading || !IsValid() || !HasChanges())"
                    Size="ButtonSize.Medium" />
    </FooterEndActions>
</TabbedDialog>

@code {
    [Parameter] public QuestionnaireAssignment Assignment { get; set; } = default!;
    [Parameter] public QuestionnaireTemplate? Questionnaire { get; set; }
    [Parameter] public List<EmployeeDto> AllEmployees { get; set; } = new();
    [Parameter] public EventCallback<EditAssignmentModel> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public bool IsLoading { get; set; } = false;

    private TabbedDialog<EditAssignmentModel>? tabbedDialog;
    private List<TabbedDialog<EditAssignmentModel>.DialogTab> dialogTabs = new();
    private EditAssignmentModel editModel = new();
    private Dictionary<string, string> validationErrors = new();
    private string employeeSearchText = "";
    private List<EmployeeDto> filteredEmployees = new();
    private List<string> selectedEmployeeIds = new();

    protected override async Task OnParametersSetAsync()
    {
        editModel = new EditAssignmentModel
        {
            WorkflowState = Assignment.WorkflowState,
            DueDate = Assignment.DueDate,
            Notes = Assignment.Notes ?? string.Empty,
            AssignedBy = Assignment.AssignedBy ?? string.Empty
        };

        // Initialize with current assignee
        selectedEmployeeIds = new List<string> { Assignment.EmployeeId.ToString() };

        await FilterEmployees();
        validationErrors.Clear();
        InitializeTabs();
    }

    private void InitializeTabs()
    {
        dialogTabs = new List<TabbedDialog<EditAssignmentModel>.DialogTab>
        {
            new()
            {
                Title = "Assigned Employees",
                Icon = "people",
                Content = @<div>@RenderEmployeesTab()</div>
            },
            new()
            {
                Title = "Assignment Details",
                Icon = "settings",
                Content = @<div>@RenderDetailsTab()</div>
            },
            new()
            {
                Title = "Review Changes",
                Icon = "preview",
                Content = @<div>@RenderReviewTab()</div>
            }
        };
    }

    private RenderFragment RenderEmployeesTab() => __builder =>
    {
        <RadzenText TextStyle="TextStyle.H6" Class="mb-3">Select Employees for Assignment</RadzenText>
        <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-4">
            Choose which employees should receive this questionnaire. The current assignee is highlighted in green.
        </RadzenText>

        <div class="employee-search">
            <div style="flex: 1;">
                <RadzenLabel Text="Search Employees" Class="form-label" />
                <RadzenTextBox @bind-Value="@employeeSearchText"
                              Placeholder="Search by name, email, or department..."
                              Class="w-100"
                              @oninput="@(async (args) => { employeeSearchText = args.Value?.ToString() ?? ""; await FilterEmployees(); })"
                              Icon="search" />
            </div>
            <div>
                <AsyncButton Text="Select All Filtered"
                            ButtonStyle="ButtonStyle.Secondary"
                            Size="ButtonSize.Small"
                            Icon="select_all"
                            Click="@SelectAllFilteredEmployees" />
            </div>
            <div>
                <AsyncButton Text="Clear Selection"
                            ButtonStyle="ButtonStyle.Light"
                            Size="ButtonSize.Small"
                            Icon="clear"
                            Click="@ClearEmployeeSelection" />
            </div>
        </div>

        <EmployeeSelectionGrid Employees="@filteredEmployees"
                              SelectedEmployeeIds="@selectedEmployeeIds"
                              CurrentAssigneeId="@Assignment.EmployeeId.ToString()"
                              OnEmployeeToggle="@ToggleEmployeeSelection"
                              ShowSelectionSummary="false" />

        @if (selectedEmployeeIds.Any())
        {
            <div class="selection-summary">
                <RadzenText TextStyle="TextStyle.H6" Class="mb-2">Selection Summary</RadzenText>
                <div class="summary-grid">
                    <div class="summary-item">
                        <span class="summary-number">@selectedEmployeeIds.Count</span>
                        <div class="summary-label">Selected Employees</div>
                    </div>
                    <div class="summary-item">
                        <span class="summary-number">@(selectedEmployeeIds.Contains(Assignment.EmployeeId.ToString()) ? "Yes" : "No")</span>
                        <div class="summary-label">Includes Current Assignee</div>
                    </div>
                    <div class="summary-item">
                        <span class="summary-number">@(selectedEmployeeIds.Count - (selectedEmployeeIds.Contains(Assignment.EmployeeId.ToString()) ? 1 : 0))</span>
                        <div class="summary-label">New Assignments</div>
                    </div>
                </div>
            </div>
        }

        @if (validationErrors.ContainsKey("Employees"))
        {
            <div class="validation-error mt-2">
                <RadzenIcon Icon="error" />
                @validationErrors["Employees"]
            </div>
        }
    };

    private RenderFragment RenderDetailsTab() => __builder =>
    {
        <div class="form-section">
            <div class="section-title">
                <div class="section-icon">
                    <RadzenIcon Icon="flag" />
                </div>
                <div>
                    <RadzenText TextStyle="TextStyle.H6" Class="mb-0">Assignment Status</RadzenText>
                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">Update the current status</RadzenText>
                </div>
            </div>

            <div class="form-field">
                <span class="form-label">Current Workflow State *</span>
                <div class="status-options">
                    @foreach (var state in GetAvailableStates())
                    {
                        <div class="status-option @(editModel.WorkflowState == state.Value ? "selected" : "") status-@state.Value.ToString().ToLower()"
                             @onclick="() => editModel.WorkflowState = state.Value">
                            <div class="status-indicator"></div>
                            <span>@state.Text</span>
                        </div>
                    }
                </div>
                @if (validationErrors.ContainsKey("WorkflowState"))
                {
                    <div class="validation-error">
                        <RadzenIcon Icon="error" />
                        @validationErrors["WorkflowState"]
                    </div>
                }
            </div>
        </div>

        <div class="form-section">
            <div class="section-title">
                <div class="section-icon">
                    <RadzenIcon Icon="schedule" />
                </div>
                <div>
                    <RadzenText TextStyle="TextStyle.H6" Class="mb-0">Schedule & Timing</RadzenText>
                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">Set deadline for completion</RadzenText>
                </div>
            </div>

            <div class="form-field">
                <RadzenLabel Text="Due Date" Class="form-label" />
                <RadzenDatePicker @bind-Value="@editModel.DueDate"
                                 TValue="DateTime?"
                                 DateFormat="dd/MM/yyyy"
                                 Min="@DateTime.Today"
                                 Class="w-100"
                                 Placeholder="Select due date (optional)"
                                 ShowCalendarWeek="true" />
            </div>
        </div>

        <div class="form-section">
            <div class="section-title">
                <div class="section-icon">
                    <RadzenIcon Icon="note" />
                </div>
                <div>
                    <RadzenText TextStyle="TextStyle.H6" Class="mb-0">Notes & Instructions</RadzenText>
                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">Add context for employees</RadzenText>
                </div>
            </div>

            <div class="form-field">
                <RadzenLabel Text="Assignment Notes" Class="form-label" />
                <RadzenTextArea @bind-Value="@editModel.Notes"
                               Placeholder="Add notes or instructions for this assignment..."
                               Rows="4"
                               Class="w-100"
                               MaxLength="1000" />
                <div style="font-size: 0.75rem; color: #6c757d; text-align: right; margin-top: 0.25rem;">
                    @(editModel.Notes?.Length ?? 0)/1000 characters
                </div>
            </div>

            <div class="form-field">
                <RadzenLabel Text="Assigned By" Class="form-label" />
                <RadzenTextBox @bind-Value="@editModel.AssignedBy"
                              Class="w-100"
                              Placeholder="Enter who assigned this questionnaire"
                              Icon="person" />
            </div>
        </div>
    };

    private RenderFragment RenderReviewTab() => __builder =>
    {
        <RadzenText TextStyle="TextStyle.H6" Class="mb-3">Review Your Changes</RadzenText>
        <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-4">
            Please review the changes below before saving the assignment.
        </RadzenText>

        @if (HasChanges())
        {
            <div class="changes-summary">
                <RadzenText TextStyle="TextStyle.H6" Class="mb-3">
                    <RadzenIcon Icon="summarize" Class="me-2" />
                    Changes Summary
                </RadzenText>

                <ul style="list-style: none; padding: 0; margin: 0;">
                    @foreach (var change in GetAllChanges())
                    {
                        <li style="display: flex; align-items: center; gap: 0.5rem; padding: 0.5rem 0; color: #495057;">
                            <RadzenIcon Icon="arrow_forward" Style="color: #fd7e14;" />
                            @change
                        </li>
                    }
                </ul>
            </div>
        }
        else
        {
            <div style="text-align: center; padding: 3rem; color: #6c757d;">
                <RadzenIcon Icon="check_circle" Style="font-size: 3rem; margin-bottom: 1rem; color: #28a745;" />
                <RadzenText TextStyle="TextStyle.H6">No Changes to Save</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">Make changes in the other tabs to see them here.</RadzenText>
            </div>
        }
    };

    public async Task ShowAsync()
    {
        await tabbedDialog!.ShowAsync(editModel);
    }

    private string GetEmployeeInitials()
    {
        var names = Assignment.EmployeeName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (names.Length >= 2)
        {
            return $"{names[0][0]}{names[1][0]}".ToUpper();
        }
        return names.Length > 0 ? names[0][0].ToString().ToUpper() : "?";
    }

    private async Task FilterEmployees()
    {
        await Task.Delay(1); // Prevent blocking UI

        if (string.IsNullOrWhiteSpace(employeeSearchText))
        {
            filteredEmployees = AllEmployees.Where(e => !e.IsDeleted).ToList();
        }
        else
        {
            filteredEmployees = AllEmployees.Where(e =>
                !e.IsDeleted &&
                (e.FullName.Contains(employeeSearchText, StringComparison.OrdinalIgnoreCase) ||
                 e.EMail.Contains(employeeSearchText, StringComparison.OrdinalIgnoreCase) ||
                 e.Department.Contains(employeeSearchText, StringComparison.OrdinalIgnoreCase) ||
                 e.Role.Contains(employeeSearchText, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }
        StateHasChanged();
    }

    private void ToggleEmployeeSelection(EmployeeDto employee)
    {
        var employeeId = employee.Id.ToString();
        if (selectedEmployeeIds.Contains(employeeId))
        {
            selectedEmployeeIds.Remove(employeeId);
        }
        else
        {
            selectedEmployeeIds.Add(employeeId);
        }
        StateHasChanged();
    }

    private void SelectAllFilteredEmployees()
    {
        foreach (var employee in filteredEmployees)
        {
            if (!selectedEmployeeIds.Contains(employee.Id.ToString()))
            {
                selectedEmployeeIds.Add(employee.Id.ToString());
            }
        }
        StateHasChanged();
    }

    private void ClearEmployeeSelection()
    {
        selectedEmployeeIds.Clear();
        StateHasChanged();
    }

    private List<WorkflowStateOption> GetAvailableStates()
    {
        var options = new List<WorkflowStateOption>
        {
            new("Assigned", WorkflowState.Assigned),
            new("Employee In Progress", WorkflowState.EmployeeInProgress),
            new("Manager In Progress", WorkflowState.ManagerInProgress),
            new("Both In Progress", WorkflowState.BothInProgress),
            new("Employee Submitted", WorkflowState.EmployeeSubmitted),
            new("Manager Submitted", WorkflowState.ManagerSubmitted),
            new("Both Submitted", WorkflowState.BothSubmitted),
            new("In Review", WorkflowState.InReview),
            new("Employee Review Confirmed", WorkflowState.EmployeeReviewConfirmed),
            new("Manager Review Confirmed", WorkflowState.ManagerReviewConfirmed),
            new("Finalized", WorkflowState.Finalized)
        };

        return options;
    }

    private bool IsValid()
    {
        validationErrors.Clear();

        if (!selectedEmployeeIds.Any())
        {
            validationErrors["Employees"] = "At least one employee must be selected";
        }

        if (editModel.WorkflowState == default)
        {
            validationErrors["WorkflowState"] = "Workflow state is required";
        }

        return !validationErrors.Any();
    }

    private bool HasChanges()
    {
        var hasDetailChanges = editModel.WorkflowState != Assignment.WorkflowState ||
                               editModel.DueDate != Assignment.DueDate ||
                               editModel.Notes != (Assignment.Notes ?? string.Empty) ||
                               editModel.AssignedBy != (Assignment.AssignedBy ?? string.Empty);

        var hasEmployeeChanges = selectedEmployeeIds.Count != 1 || !selectedEmployeeIds.Contains(Assignment.EmployeeId.ToString());

        return hasDetailChanges || hasEmployeeChanges;
    }

    private List<string> GetAllChanges()
    {
        var changes = new List<string>();

        // Employee changes
        if (selectedEmployeeIds.Count != 1 || !selectedEmployeeIds.Contains(Assignment.EmployeeId.ToString()))
        {
            if (selectedEmployeeIds.Count == 1 && !selectedEmployeeIds.Contains(Assignment.EmployeeId.ToString()))
            {
                var newEmployee = AllEmployees.FirstOrDefault(e => e.Id.ToString() == selectedEmployeeIds.First());
                changes.Add($"Assignment transferred to: {newEmployee?.FullName ?? "Unknown Employee"}");
            }
            else if (selectedEmployeeIds.Count > 1)
            {
                changes.Add($"Assignment will be duplicated to {selectedEmployeeIds.Count} employees");
                if (!selectedEmployeeIds.Contains(Assignment.EmployeeId.ToString()))
                {
                    changes.Add("Original assignment will be removed");
                }
            }
            else
            {
                changes.Add("Original assignment will be removed");
            }
        }

        // Detail changes
        if (editModel.WorkflowState != Assignment.WorkflowState)
        {
            changes.Add($"Workflow State: {Assignment.WorkflowState} → {editModel.WorkflowState}");
        }

        if (editModel.DueDate != Assignment.DueDate)
        {
            var oldDate = Assignment.DueDate?.ToString("dd/MM/yyyy") ?? "No due date";
            var newDate = editModel.DueDate?.ToString("dd/MM/yyyy") ?? "No due date";
            changes.Add($"Due Date: {oldDate} → {newDate}");
        }

        if (editModel.Notes != (Assignment.Notes ?? string.Empty))
        {
            changes.Add("Assignment notes updated");
        }

        if (editModel.AssignedBy != (Assignment.AssignedBy ?? string.Empty))
        {
            changes.Add($"Assigned By updated");
        }

        return changes;
    }

    private async Task HandleCancel(EditAssignmentModel? model)
    {
        await OnCancel.InvokeAsync();
    }

    private async Task HandleSave(EditAssignmentModel? model)
    {
        if (IsValid() && HasChanges())
        {
            editModel.SelectedEmployeeIds = selectedEmployeeIds;
            await OnSave.InvokeAsync(editModel);
        }
    }

    public class EditAssignmentModel
    {
        public WorkflowState WorkflowState { get; set; }
        public DateTime? DueDate { get; set; }
        public string Notes { get; set; } = string.Empty;
        public string AssignedBy { get; set; } = string.Empty;
        public List<string> SelectedEmployeeIds { get; set; } = new();
    }

    public class WorkflowStateOption
    {
        public WorkflowStateOption(string text, WorkflowState value)
        {
            Text = text;
            Value = value;
        }

        public string Text { get; set; }
        public WorkflowState Value { get; set; }
    }
}