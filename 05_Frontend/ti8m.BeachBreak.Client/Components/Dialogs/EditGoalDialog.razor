@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Models.Dto
@using ti8m.BeachBreak.Client.Components.Shared
@using ti8m.BeachBreak.Client.Services
@inject DialogService DialogService

<div class="edit-goal-dialog">
    <RadzenStack Gap="1rem">
        <ValidationErrorAlert Errors="@validationErrors" />

        <GoalDetailsFieldset @bind-ObjectiveDescription="@objectiveDescription"
                            @bind-MeasurementMetric="@measurementMetric" />

        <GoalTimeframeFieldset @bind-TimeframeFrom="@timeframeFrom"
                              @bind-TimeframeTo="@timeframeTo" />

        @if (IsInReviewMode)
        {
            <RadzenFieldset>
                <HeaderTemplate>
                    <RadzenIcon Icon="percent" Class="me-2" />
                    <span class="fw-bold">Weighting</span>
                </HeaderTemplate>
                <ChildContent>
                    <div>
                        <RadzenLabel Text="Weighting Percentage*" Component="weightingPercentage" Class="fw-bold mb-1" />
                        <RadzenNumeric @bind-Value="@weightingPercentage"
                                     Name="weightingPercentage"
                                     Min="0"
                                     Max="100"
                                     Step="5"
                                     ShowUpDown="true"
                                     Class="w-100" />
                        <RadzenText TextStyle="TextStyle.Caption" Class="text-muted mt-1">
                            Percentage of total goals (0-100%). Set weighting to allocate importance across goals.
                        </RadzenText>
                    </div>
                </ChildContent>
            </RadzenFieldset>

            <RadzenFieldset>
                <HeaderTemplate>
                    <RadzenIcon Icon="edit_note" Class="me-2" />
                    <span class="fw-bold">Reason for Change*</span>
                </HeaderTemplate>
                <ChildContent>
                    <RadzenTextArea @bind-Value="@changeReason"
                                  Name="changeReason"
                                  Placeholder="Explain why this goal is being modified..."
                                  Rows="2"
                                  Class="w-100"
                                  MaxLength="500" />
                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                        @changeReason.Length / 500 characters
                    </RadzenText>
                </ChildContent>
            </RadzenFieldset>
        }

        <RadzenFieldset>
            <HeaderTemplate>
                <RadzenIcon Icon="person" Class="me-2" />
                <span class="fw-bold">Modified By</span>
            </HeaderTemplate>
            <ChildContent>
                <RadzenBadge Text="@ModifiedByRole" BadgeStyle="BadgeStyle.Info" IsPill="true" />
                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted ms-2">
                    This modification will be attributed to @ModifiedByRole
                </RadzenText>
            </ChildContent>
        </RadzenFieldset>

        <div class="d-flex justify-content-end gap-2 mt-3">
            <RadzenButton Text="Cancel"
                        ButtonStyle="ButtonStyle.Light"
                        Click="@Cancel"
                        Disabled="@isSubmitting" />
            <RadzenButton Text="@(isSubmitting ? "Updating Goal..." : "Update Goal")"
                        Icon="@(isSubmitting ? "" : "save")"
                        ButtonStyle="ButtonStyle.Primary"
                        Click="@Submit"
                        Disabled="@isSubmitting" />
        </div>
    </RadzenStack>
</div>

@code {
    [Parameter] public Guid AssignmentId { get; set; }
    [Parameter] public Guid QuestionId { get; set; }
    [Parameter] public Guid GoalId { get; set; }
    [Parameter] public string ModifiedByRole { get; set; } = "Employee";
    [Parameter] public WorkflowState AssignmentWorkflowState { get; set; } = WorkflowState.EmployeeInProgress;

    // Pre-populated values
    [Parameter] public string InitialObjective { get; set; } = "";
    [Parameter] public string InitialMeasurement { get; set; } = "";
    [Parameter] public DateTime InitialTimeframeFrom { get; set; } = DateTime.Today;
    [Parameter] public DateTime InitialTimeframeTo { get; set; } = DateTime.Today.AddMonths(6);
    [Parameter] public decimal InitialWeighting { get; set; } = 0;

    // Helper property to determine if weighting and reason fields should be shown
    private bool IsInReviewMode => AssignmentWorkflowState == WorkflowState.InReview;

    private string objectiveDescription = "";
    private string measurementMetric = "";
    private DateTime? timeframeFrom = DateTime.Today;
    private DateTime? timeframeTo = DateTime.Today.AddMonths(6);
    private decimal weightingPercentage = 0;
    private string changeReason = "";

    private List<string> validationErrors = new();
    private bool isSubmitting = false;

    protected override void OnParametersSet()
    {
        // Pre-populate form with existing values
        objectiveDescription = InitialObjective;
        measurementMetric = InitialMeasurement;
        timeframeFrom = InitialTimeframeFrom;
        timeframeTo = InitialTimeframeTo;
        weightingPercentage = InitialWeighting;
    }

    private bool ValidateForm()
    {
        validationErrors = GoalFormValidator.ValidateGoalDetails(
            objectiveDescription,
            measurementMetric,
            timeframeFrom,
            timeframeTo,
            IsInReviewMode,
            weightingPercentage,
            changeReason);

        return !validationErrors.Any();
    }

    private void Submit()
    {
        if (!ValidateForm())
        {
            StateHasChanged();
            return;
        }

        // Return (GoalId, DTO) to parent component (OptimizedGoalQuestion)
        // Parent will queue this operation and execute it when "Save Progress" or "Submit" is clicked
        var dto = new ModifyGoalDto
        {
            ObjectiveDescription = objectiveDescription.Trim(),
            MeasurementMetric = measurementMetric.Trim(),
            TimeframeFrom = timeframeFrom!.Value,
            TimeframeTo = timeframeTo!.Value,
            // Only include weighting and change reason when in review mode
            WeightingPercentage = IsInReviewMode ? weightingPercentage : null,
            ModifiedByRole = ModifiedByRole,
            ChangeReason = IsInReviewMode ? changeReason.Trim() : string.Empty
        };

        // Return tuple (GoalId, DTO)
        DialogService.Close((GoalId, dto));
    }

    private void Cancel()
    {
        DialogService.Close(false);
    }
}

<style>
.edit-goal-dialog {
    padding: 1rem;
    max-width: 700px;
}
</style>
