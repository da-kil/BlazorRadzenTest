@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components.Shared
@inject IEmployeeApiService EmployeeApiService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject ICategoryApiService CategoryApiService

<RadzenCard Class="department-details-dialog">
    <div class="dialog-header mb-4">
        <div class="d-flex align-items-center justify-content-between">
            <div class="d-flex align-items-center">
                <div class="department-icon-large me-3">
                    <RadzenIcon Icon="business" Size="3rem" Class="text-primary" />
                </div>
                <div>
                    <RadzenText TextStyle="TextStyle.H4" Class="mb-1 fw-bold">@DepartmentName</RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="text-muted mb-1">@DepartmentEmployees.Count employees</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">@DepartmentAssignments.Count total assignments</RadzenText>
                </div>
            </div>
            <div class="department-status">
                @if (GetDepartmentOverdueCount() > 0)
                {
                    <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="@($"{GetDepartmentOverdueCount()} Overdue")" Class="mb-2" />
                }
                else if (GetDepartmentProgressPercentage() >= 80)
                {
                    <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="On Track" Class="mb-2" />
                }
                else
                {
                    <RadzenBadge BadgeStyle="BadgeStyle.Warning" Text="In Progress" Class="mb-2" />
                }
            </div>
        </div>
    </div>

    <!-- Department Stats Overview -->
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6 col-12 mb-3">
            <RadzenCard Class="text-center stats-card stats-employees">
                <RadzenIcon Icon="people" Size="2rem" Class="text-primary mb-2" />
                <RadzenText TextStyle="TextStyle.H4" Class="mb-1">@DepartmentEmployees.Count</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Employees</RadzenText>
            </RadzenCard>
        </div>
        <div class="col-lg-3 col-md-6 col-12 mb-3">
            <RadzenCard Class="text-center stats-card stats-assignments">
                <RadzenIcon Icon="assignment" Size="2rem" Class="text-info mb-2" />
                <RadzenText TextStyle="TextStyle.H4" Class="mb-1">@DepartmentAssignments.Count</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Assignments</RadzenText>
            </RadzenCard>
        </div>
        <div class="col-lg-3 col-md-6 col-12 mb-3">
            <RadzenCard Class="text-center stats-card stats-completed">
                <RadzenIcon Icon="task_alt" Size="2rem" Class="text-success mb-2" />
                <RadzenText TextStyle="TextStyle.H4" Class="mb-1">@GetDepartmentCompletedCount()</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Completed</RadzenText>
            </RadzenCard>
        </div>
        <div class="col-lg-3 col-md-6 col-12 mb-3">
            <RadzenCard Class="text-center stats-card stats-progress">
                <RadzenIcon Icon="trending_up" Size="2rem" Class="text-purple mb-2" />
                <RadzenText TextStyle="TextStyle.H4" Class="mb-1">@GetDepartmentProgressPercentage()%</RadzenText>
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Progress</RadzenText>
            </RadzenCard>
        </div>
    </div>

    <!-- Department Performance Overview -->
    <RadzenCard Class="mb-4 department-performance-overview">
        <RadzenText TextStyle="TextStyle.H6" Class="mb-3">
            <RadzenIcon Icon="analytics" Class="me-2 text-info" />
            Department Performance Analysis
        </RadzenText>
        <div class="row">
            <div class="col-md-8">
                <RadzenText TextStyle="TextStyle.Body2" Class="mb-2">Overall Department Progress</RadzenText>
                <RadzenProgressBar Value="@GetDepartmentProgressPercentage()" Max="100" ProgressBarStyle="@GetDepartmentProgressStyle()" Class="mb-2" />
                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                    @GetDepartmentCompletedCount() of @DepartmentAssignments.Count assignments completed
                </RadzenText>
            </div>
            <div class="col-md-4 text-end">
                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted mb-1">Department Rating</RadzenText>
                <RadzenText TextStyle="TextStyle.H5" Class="@GetDepartmentPerformanceClass()">
                    @GetDepartmentPerformanceText()
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                    Avg completion: @GetDepartmentAverageCompletionDays() days
                </RadzenText>
            </div>
        </div>
    </RadzenCard>

    <!-- Department Insights -->
    <div class="row mb-4">
        <div class="col-md-6">
            <RadzenCard Class="h-100">
                <RadzenText TextStyle="TextStyle.H6" Class="mb-3">
                    <RadzenIcon Icon="insights" Class="me-2 text-warning" />
                    Key Insights
                </RadzenText>
                <div class="insights-list">
                    @if (departmentInsights != null)
                    {
                        @foreach (var insight in departmentInsights)
                        {
                            <div class="insight-item mb-3">
                                <RadzenIcon Icon="@insight.Icon" Class="@($"{insight.ColorClass} me-2")" />
                                <RadzenText TextStyle="TextStyle.Body2">@insight.Message</RadzenText>
                            </div>
                        }
                    }
                </div>
            </RadzenCard>
        </div>
        <div class="col-md-6">
            <RadzenCard Class="h-100">
                <RadzenText TextStyle="TextStyle.H6" Class="mb-3">
                    <RadzenIcon Icon="leaderboard" Class="me-2 text-success" />
                    Top Performers
                </RadzenText>
                <div class="top-performers-list">
                    @foreach (var performer in GetTopPerformers().Take(5))
                    {
                        <div class="performer-item d-flex justify-content-between align-items-center mb-2">
                            <div class="d-flex align-items-center">
                                <div class="performer-avatar me-2">
                                    <RadzenIcon Icon="person" Size="1.2rem" Class="text-primary" />
                                </div>
                                <div>
                                    <RadzenText TextStyle="TextStyle.Body2" Class="fw-bold">@performer.Employee.FullName</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">@performer.Employee.Role</RadzenText>
                                </div>
                            </div>
                            <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="@($"{performer.CompletionRate}%")" />
                        </div>
                    }
                </div>
            </RadzenCard>
        </div>
    </div>

    <!-- Detailed Views -->
    <RadzenTabs @bind-SelectedIndex="selectedTabIndex" Class="mb-4">
        <Tabs>
            <RadzenTabsItem Text="@($"Employees ({DepartmentEmployees.Count})")">
                @RenderEmployeesView()
            </RadzenTabsItem>
            <RadzenTabsItem Text="@($"Assignments ({DepartmentAssignments.Count})")">
                @RenderAssignmentsView()
            </RadzenTabsItem>
            <RadzenTabsItem Text="@($"Categories ({(departmentCategories?.Count ?? 0)})")">
                @RenderCategoriesView()
            </RadzenTabsItem>
            <RadzenTabsItem Text="Trends & Analytics">
                @RenderTrendsView()
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>

    <!-- Action Buttons -->
    <div class="d-flex justify-content-between">
        <div class="d-flex gap-2">
            @if (GetDepartmentOverdueCount() > 0)
            {
                <AsyncButton Text="Send Department Reminder"
                            ProcessingText="Sending Reminder"
                            Icon="email"
                            ButtonStyle="ButtonStyle.Warning"
                            Click="@SendDepartmentReminder"
                            Size="ButtonSize.Medium" />
            }
            <AsyncButton Text="Schedule Department Meeting"
                        ProcessingText="Scheduling"
                        Icon="event"
                        ButtonStyle="ButtonStyle.Info"
                        Click="@ScheduleMeeting"
                        Size="ButtonSize.Medium" />
        </div>
        <div class="d-flex gap-2">
            <AsyncButton Text="Export Department Report"
                        ProcessingText="Exporting"
                        Icon="download"
                        ButtonStyle="ButtonStyle.Success"
                        Click="@ExportDepartmentReport"
                        Size="ButtonSize.Medium" />
            <AsyncButton Text="Close"
                        Icon="close"
                        ButtonStyle="ButtonStyle.Secondary"
                        Click="@Close"
                        Size="ButtonSize.Medium" />
        </div>
    </div>
</RadzenCard>

@code {
    [Parameter] public string DepartmentName { get; set; } = string.Empty;
    [Parameter] public List<EmployeeDto> DepartmentEmployees { get; set; } = new();
    [Parameter] public List<QuestionnaireAssignment> DepartmentAssignments { get; set; } = new();
    [Parameter] public List<QuestionnaireTemplate> Templates { get; set; } = new();

    private int selectedTabIndex = 0;
    private List<dynamic>? departmentInsights;
    private List<Category>? departmentCategories;

    protected override async Task OnInitializedAsync()
    {
        departmentInsights = await GetDepartmentInsights();
        departmentCategories = await GetDepartmentCategories();
    }

    private RenderFragment RenderEmployeesView()
    {
        var employeesWithStats = GetEmployeesWithStats();

        return @<div>
            <div class="row">
                @foreach (var employee in employeesWithStats)
                {
                    <div class="col-lg-4 col-md-6 col-12 mb-3">
                        @RenderEmployeeCard(employee)
                    </div>
                }
            </div>
        </div>;
    }

    private RenderFragment RenderEmployeeCard(dynamic employee)
    {
        return @<RadzenCard Class="@($"employee-card {GetEmployeeCardClass(employee.Assignments)} h-100")">
            <div class="text-center">
                <div class="employee-avatar mb-2">
                    <RadzenIcon Icon="person" Size="1.5rem" Class="text-primary" />
                </div>
                <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-1">@employee.Employee.FullName</RadzenText>
                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted mb-2">@employee.Employee.Role</RadzenText>

                @if (employee.OverdueCount > 0)
                {
                    <RadzenBadge BadgeStyle="BadgeStyle.Danger" Text="@($"{employee.OverdueCount} Overdue")" Class="mb-2" />
                }
                else if (employee.InProgressCount > 0)
                {
                    <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="In Progress" Class="mb-2" />
                }
                else if (employee.CompletionRate == 100)
                {
                    <RadzenBadge BadgeStyle="BadgeStyle.Success" Text="Complete" Class="mb-2" />
                }
                else
                {
                    <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Text="Assigned" Class="mb-2" />
                }

                <div class="employee-stats">
                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">@employee.CompletedCount/@employee.TotalCount completed</RadzenText>
                    @if (employee.TotalCount > 0)
                    {
                        <RadzenProgressBar Value="@employee.CompletionRate" Max="100" ProgressBarStyle="@GetEmployeeProgressStyle(employee.CompletionRate)" Size="ProgressBarSize.ExtraSmall" Class="mt-1" />
                    }
                </div>

                <div class="mt-2">
                    <AsyncButton Text="View Details"
                                Icon="visibility"
                                ButtonStyle="ButtonStyle.Light"
                                Click="@(() => ViewEmployeeDetails(employee.Employee))"
                                Size="ButtonSize.ExtraSmall" />
                </div>
            </div>
        </RadzenCard>;
    }

    private RenderFragment RenderAssignmentsView()
    {
        var assignmentsByStatus = DepartmentAssignments.GroupBy(a => a.WorkflowState).ToDictionary(g => g.Key, g => g.ToList());

        return @<div>
            <div class="row">
                @foreach (var statusGroup in assignmentsByStatus)
                {
                    <div class="col-12 mb-4">
                        <RadzenCard>
                            <RadzenText TextStyle="TextStyle.H6" Class="mb-3">
                                @statusGroup.Key (@statusGroup.Value.Count)
                            </RadzenText>
                            <div class="row">
                                @foreach (var assignment in statusGroup.Value.Take(6))
                                {
                                    <div class="col-lg-4 col-md-6 col-12 mb-3">
                                        @RenderAssignmentSummaryCard(assignment)
                                    </div>
                                }
                            </div>
                            @if (statusGroup.Value.Count > 6)
                            {
                                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                    And @(statusGroup.Value.Count - 6) more...
                                </RadzenText>
                            }
                        </RadzenCard>
                    </div>
                }
            </div>
        </div>;
    }

    private RenderFragment RenderAssignmentSummaryCard(QuestionnaireAssignment assignment)
    {
        var template = Templates.FirstOrDefault(t => t.Id == assignment.TemplateId);
        var employee = DepartmentEmployees.FirstOrDefault(e => e.Id == assignment.EmployeeId);

        return @<RadzenCard Class="assignment-summary-card">
            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-1">
                @(template?.Name ?? "Questionnaire")
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-2">
                @(employee?.FullName ?? "Unknown Employee")
            </RadzenText>
            <WorkflowStateBadge WorkflowState="@assignment.WorkflowState" />
            @if (assignment.DueDate.HasValue)
            {
                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted mt-1">
                    Due: @assignment.DueDate.Value.ToString("MMM dd")
                </RadzenText>
            }
        </RadzenCard>;
    }

    private async Task<RenderFragment> RenderCategoriesView()
    {
        var categoryStats = await GetDepartmentCategoryStats();

        return @<div>
            <div class="row">
                @foreach (var category in categoryStats)
                {
                    <div class="col-lg-4 col-md-6 col-12 mb-3">
                        <RadzenCard Class="category-stats-card">
                            <RadzenText TextStyle="TextStyle.H6" Class="mb-2 fw-bold">@category.Category</RadzenText>
                            <div class="category-metrics">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <RadzenText TextStyle="TextStyle.Body2">Assignments</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2" Class="fw-bold">@category.TotalAssignments</RadzenText>
                                </div>
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <RadzenText TextStyle="TextStyle.Body2">Completed</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2" Class="text-success fw-bold">@category.CompletedAssignments</RadzenText>
                                </div>
                                <RadzenProgressBar Value="@category.CompletionRate" Max="100" ProgressBarStyle="@GetCategoryProgressStyle(category.CompletionRate)" />
                                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted mt-1">@category.CompletionRate% completion rate</RadzenText>
                            </div>
                        </RadzenCard>
                    </div>
                }
            </div>
        </div>;
    }

    private RenderFragment RenderTrendsView()
    {
        return @<div>
            <div class="row">
                <div class="col-md-6 mb-4">
                    <RadzenCard Class="h-100">
                        <RadzenText TextStyle="TextStyle.H6" Class="mb-3">
                            <RadzenIcon Icon="timeline" Class="me-2 text-info" />
                            Completion Trends
                        </RadzenText>
                        <div class="trend-chart-placeholder">
                            <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Completion trend chart would be displayed here</RadzenText>
                        </div>
                    </RadzenCard>
                </div>
                <div class="col-md-6 mb-4">
                    <RadzenCard Class="h-100">
                        <RadzenText TextStyle="TextStyle.H6" Class="mb-3">
                            <RadzenIcon Icon="bar_chart" Class="me-2 text-success" />
                            Department Benchmarks
                        </RadzenText>
                        <div class="benchmark-metrics">
                            <div class="metric-item mb-3">
                                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">vs. Organization Average</RadzenText>
                                <RadzenText TextStyle="TextStyle.H6" Class="text-success">+12%</RadzenText>
                            </div>
                            <div class="metric-item mb-3">
                                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Response Time</RadzenText>
                                <RadzenText TextStyle="TextStyle.H6" Class="text-info">2.3 days faster</RadzenText>
                            </div>
                            <div class="metric-item">
                                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Quality Score</RadzenText>
                                <RadzenText TextStyle="TextStyle.H6" Class="text-primary">4.7/5.0</RadzenText>
                            </div>
                        </div>
                    </RadzenCard>
                </div>
            </div>
        </div>
    ;
    }

    // Helper methods
    private int GetDepartmentCompletedCount() => DepartmentAssignments.Count(a => a.WorkflowState == WorkflowState.Finalized);
    private int GetDepartmentOverdueCount() => DepartmentAssignments.Count(IsOverdue);

    private int GetDepartmentProgressPercentage()
    {
        return DepartmentAssignments.Any() ? (GetDepartmentCompletedCount() * 100 / DepartmentAssignments.Count) : 0;
    }

    private ProgressBarStyle GetDepartmentProgressStyle()
    {
        var progress = GetDepartmentProgressPercentage();
        return progress switch
        {
            >= 80 => ProgressBarStyle.Success,
            >= 60 => ProgressBarStyle.Info,
            >= 40 => ProgressBarStyle.Warning,
            _ => ProgressBarStyle.Danger
        };
    }

    private string GetDepartmentPerformanceClass()
    {
        var progress = GetDepartmentProgressPercentage();
        return progress switch
        {
            >= 80 => "text-success",
            >= 60 => "text-info",
            >= 40 => "text-warning",
            _ => "text-danger"
        };
    }

    private string GetDepartmentPerformanceText()
    {
        var progress = GetDepartmentProgressPercentage();
        return progress switch
        {
            >= 80 => "Excellent",
            >= 60 => "Good",
            >= 40 => "Fair",
            _ => "Needs Attention"
        };
    }

    private double GetDepartmentAverageCompletionDays()
    {
        var completed = DepartmentAssignments.Where(a => a.WorkflowState == WorkflowState.Finalized && a.CompletedDate.HasValue);
        if (!completed.Any()) return 0;

        return Math.Round(completed.Average(a => (a.CompletedDate!.Value - a.AssignedDate).TotalDays), 1);
    }

    private List<dynamic> GetEmployeesWithStats()
    {
        return DepartmentEmployees.Select(employee =>
        {
            var employeeAssignments = DepartmentAssignments.Where(a => a.EmployeeId == employee.Id).ToList();
            var completed = employeeAssignments.Count(a => a.WorkflowState == WorkflowState.Finalized);
            var overdue = employeeAssignments.Count(IsOverdue);
            var inProgress = employeeAssignments.Count(a =>
                a.WorkflowState == WorkflowState.EmployeeInProgress ||
                a.WorkflowState == WorkflowState.ManagerInProgress ||
                a.WorkflowState == WorkflowState.BothInProgress);

            return new
            {
                Employee = employee,
                Assignments = employeeAssignments,
                TotalCount = employeeAssignments.Count,
                CompletedCount = completed,
                OverdueCount = overdue,
                InProgressCount = inProgress,
                CompletionRate = employeeAssignments.Any() ? (completed * 100 / employeeAssignments.Count) : 0
            };
        }).OrderByDescending(x => x.CompletionRate).Cast<dynamic>().ToList();
    }

    private List<dynamic> GetTopPerformers()
    {
        return GetEmployeesWithStats().Where(x => x.TotalCount > 0).OrderByDescending(x => x.CompletionRate).Take(5).ToList();
    }

    private async Task<List<Category>> GetDepartmentCategories()
    {
        var categories = await CategoryApiService.GetAllCategoriesAsync();
        var templateIds = DepartmentAssignments.Select(a => a.TemplateId).Distinct();
        return categories.Where(o => Templates.Where(t => templateIds.Contains(t.Id)).Select(t => t.CategoryId).Distinct().Contains(o.Id)).ToList();
    }

    private async Task<List<dynamic>> GetDepartmentCategoryStats()
    {
        return (await GetDepartmentCategories()).Select(category =>
        {
            var categoryTemplateIds = Templates.Where(t => t.CategoryId == category.Id).Select(t => t.Id).ToHashSet();
            var categoryAssignments = DepartmentAssignments.Where(a => categoryTemplateIds.Contains(a.TemplateId)).ToList();
            var completed = categoryAssignments.Count(a => a.WorkflowState == WorkflowState.Finalized);

            return new
            {
                Category = category,
                TotalAssignments = categoryAssignments.Count,
                CompletedAssignments = completed,
                CompletionRate = categoryAssignments.Any() ? (completed * 100 / categoryAssignments.Count) : 0
            };
        }).Cast<dynamic>().ToList();
    }

    private async Task<List<dynamic>> GetDepartmentInsights()
    {
        var insights = new List<dynamic>();

        var topCategory = (await GetDepartmentCategoryStats()).OrderByDescending(x => x.CompletionRate).FirstOrDefault();
        if (topCategory != null)
        {
            insights.Add(new { Icon = "trending_up", ColorClass = "text-success", Message = $"{topCategory.Category} questionnaires have the highest completion rate ({topCategory.CompletionRate}%)" });
        }

        var overdueCount = GetDepartmentOverdueCount();
        if (overdueCount > 0)
        {
            insights.Add(new { Icon = "warning", ColorClass = "text-danger", Message = $"{overdueCount} assignments are overdue and need immediate attention" });
        }

        var avgCompletion = GetDepartmentAverageCompletionDays();
        if (avgCompletion > 0)
        {
            insights.Add(new { Icon = "schedule", ColorClass = "text-info", Message = $"Average completion time is {avgCompletion} days" });
        }

        var topPerformer = GetTopPerformers().FirstOrDefault();
        if (topPerformer != null)
        {
            insights.Add(new { Icon = "star", ColorClass = "text-warning", Message = $"{topPerformer.Employee.FullName} is the top performer with {topPerformer.CompletionRate}% completion rate" });
        }

        return insights;
    }

    private bool IsOverdue(QuestionnaireAssignment assignment)
    {
        return assignment.DueDate.HasValue &&
               assignment.DueDate < DateTime.Now &&
               assignment.WorkflowState != WorkflowState.Finalized;
    }

    private string GetEmployeeCardClass(List<QuestionnaireAssignment> assignments)
    {
        if (assignments.Any(IsOverdue)) return "employee-overdue";
        if (assignments.All(a => a.WorkflowState == WorkflowState.Finalized)) return "employee-completed";
        return "employee-normal";
    }

    private ProgressBarStyle GetEmployeeProgressStyle(int progress)
    {
        return progress switch
        {
            >= 80 => ProgressBarStyle.Success,
            >= 60 => ProgressBarStyle.Info,
            >= 40 => ProgressBarStyle.Warning,
            _ => ProgressBarStyle.Danger
        };
    }

    private ProgressBarStyle GetCategoryProgressStyle(int progress)
    {
        return progress switch
        {
            >= 80 => ProgressBarStyle.Success,
            >= 60 => ProgressBarStyle.Info,
            >= 40 => ProgressBarStyle.Warning,
            _ => ProgressBarStyle.Danger
        };
    }

    // Action methods
    private async Task SendDepartmentReminder()
    {
        NotificationService.Notify(NotificationSeverity.Info, "Reminder Sent", $"Department-wide reminder sent to {DepartmentName}");
    }

    private async Task ScheduleMeeting()
    {
        NotificationService.Notify(NotificationSeverity.Info, "Meeting Scheduled", "Department meeting has been scheduled");
    }

    private async Task ExportDepartmentReport()
    {
        NotificationService.Notify(NotificationSeverity.Info, "Export", $"Department report for {DepartmentName} would be exported");
    }

    private async Task ViewEmployeeDetails(EmployeeDto employee)
    {
        NotificationService.Notify(NotificationSeverity.Info, "Employee Details", $"Details for {employee.FullName} would open");
    }

    private void Close()
    {
        DialogService.Close();
    }
}

<style>
    /* Component-specific styles */
    .department-details-dialog {
        min-width: 900px;
        max-width: 1200px;
    }

    .text-purple {
        color: var(--purple-rain) !important;
    }

    .category-stats-card {
        border-left-color: var(--purple-rain);
    }

    @@media (max-width: 768px) {
        .department-details-dialog {
            min-width: unset;
            width: 100%;
        }

        .dialog-header .d-flex {
            flex-direction: column;
            align-items: flex-start !important;
        }

        .department-status {
            margin-top: 1rem;
        }
    }
</style>
<!-- Shared dashboard patterns loaded from dashboard-patterns.css -->