@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Components.ValidationHelpers

<style>
    .assignment-dialog {
        min-width: 600px;
        max-width: 800px;
    }

    .assignment-header {
        background: linear-gradient(135deg, var(--blue-new) 0%, var(--purple-rain) 100%);
        margin: -1.5rem -1.5rem 2rem -1.5rem;
        padding: 2rem 1.5rem;
        color: white;
        border-radius: 8px 8px 0 0;
    }

    .assignment-step {
        background: rgba(var(--blue-new-rgb), 0.05);
        border: 2px solid rgba(var(--blue-new-rgb), 0.1);
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        transition: all 0.3s ease;
    }

    .assignment-step.active {
        border-color: var(--blue-new);
        background: rgba(var(--blue-new-rgb), 0.08);
        box-shadow: 0 4px 20px rgba(var(--blue-new-rgb), 0.15);
    }

    .step-number {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: var(--blue-new);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        margin-right: 1rem;
        flex-shrink: 0;
    }

    .employee-card {
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 0.5rem;
        transition: all 0.2s ease;
        cursor: pointer;
        background: white;
    }

    .employee-card:hover {
        border-color: var(--blue-new);
        transform: translateY(-2px);
        box-shadow: 0 4px 20px rgba(var(--blue-new-rgb), 0.1);
    }

    .employee-card.selected {
        border-color: var(--blue-new);
        background: rgba(var(--blue-new-rgb), 0.05);
    }

    .questionnaire-card {
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 1.25rem;
        margin-bottom: 0.75rem;
        transition: all 0.2s ease;
        cursor: pointer;
        background: white;
        position: relative;
    }

    .questionnaire-card:hover {
        border-color: var(--purple-rain);
        transform: translateY(-2px);
        box-shadow: 0 4px 20px rgba(var(--purple-rain-rgb), 0.1);
    }

    .questionnaire-card.selected {
        border-color: var(--purple-rain);
        background: rgba(var(--purple-rain-rgb), 0.05);
    }

    .questionnaire-badge {
        position: absolute;
        top: -8px;
        right: 12px;
        background: var(--golden-milk);
        color: #fff;
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .assignment-summary {
        background: linear-gradient(135deg, rgba(var(--green-new-rgb), 0.1) 0%, rgba(var(--blue-new-rgb), 0.1) 100%);
        border: 2px solid var(--green-new);
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1.5rem 0;
    }

    .priority-selector {
        display: flex;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .priority-option {
        flex: 1;
        text-align: center;
        padding: 0.75rem;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
        background: white;
    }

    .priority-option.selected {
        border-color: var(--blue-new);
        background: rgba(var(--blue-new-rgb), 0.1);
        color: var(--blue-new);
        font-weight: 600;
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 2rem;
        padding-top: 1.5rem;
        border-top: 1px solid #e9ecef;
    }

    .search-container {
        position: relative;
        margin-bottom: 1rem;
    }

    .search-icon {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        z-index: 1;
    }

    .search-input {
        padding-left: 2.5rem !important;
    }

    :root {
        --blue-new-rgb: 15, 105, 255;
        --purple-rain-rgb: 147, 91, 169;
        --green-new-rgb: 0, 230, 200;
        --golden-milk-rgb: 230, 191, 127;
    }
</style>

<EditForm Model="@assignmentModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="assignment-dialog" role="dialog" aria-labelledby="dialog-title" aria-describedby="dialog-description">
        <div class="assignment-header">
            <div class="d-flex align-items-center">
                <RadzenIcon Icon="assignment_ind" Style="font-size: 2.5rem; margin-right: 1rem;" />
                <div>
                    <RadzenText TextStyle="TextStyle.H4" Class="mb-2" id="dialog-title">Assign Questionnaire</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1" Style="opacity: 0.9;" id="dialog-description">
                        Create a new questionnaire assignment with beautiful workflows
                    </RadzenText>
                </div>
            </div>
        </div>

        <!-- Step 1: Select Employee -->
        <div class="assignment-step @(currentStep >= 1 ? "active" : "")">
            <div class="d-flex align-items-start">
                <div class="step-number">1</div>
                <div class="flex-grow-1">
                    <RadzenText TextStyle="TextStyle.H6" Class="mb-3">Select Employee</RadzenText>

                    <div class="search-container">
                        <RadzenIcon Icon="search" Class="search-icon" />
                        <RadzenTextBox @bind-Value="@employeeSearch"
                                      Placeholder="Search employees by name, email, or department..."
                                      Class="w-100 search-input"
                                      oninput="@FilterEmployees" />
                    </div>

                    <div style="max-height: 200px; overflow-y: auto;">
                        @foreach (var employee in filteredEmployees.Take(5))
                        {
                            <div class="employee-card @(assignmentModel.SelectedEmployeeId == employee.Id ? "selected" : "")"
                                 @onclick="() => SelectEmployee(employee)">
                                <div class="d-flex align-items-center">
                                    <RadzenGravatar Email="@employee.Email" Style="margin-right: 1rem;" />
                                    <div class="flex-grow-1">
                                        <RadzenText TextStyle="TextStyle.Subtitle2" Class="fw-bold">@employee.Name</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">@employee.Email</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">@employee.Department â€¢ @employee.Role</RadzenText>
                                    </div>
                                    @if (assignmentModel.SelectedEmployeeId == employee.Id)
                                    {
                                        <RadzenIcon Icon="check_circle" Style="color: var(--green-new); font-size: 1.5rem;" />
                                    }
                                </div>
                            </div>
                        }
                    </div>

                    <ValidationMessage For="@(() => assignmentModel.SelectedEmployeeId)" class="text-danger small mt-2" />
                </div>
            </div>
        </div>

        <!-- Step 2: Select Questionnaire -->
        <div class="assignment-step @(currentStep >= 2 ? "active" : "")">
            <div class="d-flex align-items-start">
                <div class="step-number">2</div>
                <div class="flex-grow-1">
                    <RadzenText TextStyle="TextStyle.H6" Class="mb-3">Choose Questionnaire</RadzenText>

                    <div style="max-height: 250px; overflow-y: auto;">
                        @foreach (var questionnaire in availableQuestionnaires)
                        {
                            <div class="questionnaire-card @(assignmentModel.SelectedQuestionnaireId == questionnaire.Id ? "selected" : "")"
                                 @onclick="() => SelectQuestionnaire(questionnaire)">
                                <div class="questionnaire-badge">@questionnaire.Category</div>
                                <div class="d-flex align-items-start">
                                    <RadzenIcon Icon="@GetQuestionnaireIcon(questionnaire.Category)"
                                              Style="font-size: 2rem; margin-right: 1rem; color: var(--purple-rain);" />
                                    <div class="flex-grow-1">
                                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold mb-1">@questionnaire.Title</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-2">@questionnaire.Description</RadzenText>
                                        <div class="d-flex align-items-center gap-3">
                                            <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                                <RadzenIcon Icon="schedule" Style="font-size: 0.9rem; margin-right: 4px;" />
                                                ~@questionnaire.EstimatedDuration min
                                            </RadzenText>
                                            <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                                <RadzenIcon Icon="quiz" Style="font-size: 0.9rem; margin-right: 4px;" />
                                                @questionnaire.QuestionCount questions
                                            </RadzenText>
                                        </div>
                                    </div>
                                    @if (assignmentModel.SelectedQuestionnaireId == questionnaire.Id)
                                    {
                                        <RadzenIcon Icon="check_circle" Style="color: var(--green-new); font-size: 1.5rem;" />
                                    }
                                </div>
                            </div>
                        }
                    </div>

                    <ValidationMessage For="@(() => assignmentModel.SelectedQuestionnaireId)" class="text-danger small mt-2" />
                </div>
            </div>
        </div>

        <!-- Step 3: Assignment Details -->
        <div class="assignment-step @(currentStep >= 3 ? "active" : "")">
            <div class="d-flex align-items-start">
                <div class="step-number">3</div>
                <div class="flex-grow-1">
                    <RadzenText TextStyle="TextStyle.H6" Class="mb-3">Assignment Details</RadzenText>

                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Body2" Class="mb-2 fw-semibold">Due Date</RadzenText>
                            <RadzenDatePicker @bind-Value="@assignmentModel.DueDate"
                                            DateFormat="dd/MM/yyyy"
                                            Min="@DateTime.Today"
                                            Class="w-100"
                                            Placeholder="Select due date (optional)" />
                            <ValidationMessage For="@(() => assignmentModel.DueDate)" class="text-danger small mt-1" />
                        </RadzenColumn>

                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Body2" Class="mb-2 fw-semibold">Priority</RadzenText>
                            <div class="priority-selector">
                                <div class="priority-option @(assignmentModel.Priority == "Low" ? "selected" : "")"
                                     @onclick="() => SetPriority(GetLowPriority())">
                                    <RadzenIcon Icon="keyboard_arrow_down" Style="color: var(--green-new);" />
                                    <div>Low</div>
                                </div>
                                <div class="priority-option @(assignmentModel.Priority == "Normal" ? "selected" : "")"
                                     @onclick="() => SetPriority(GetNormalPriority())">
                                    <RadzenIcon Icon="remove" Style="color: var(--blue-new);" />
                                    <div>Normal</div>
                                </div>
                                <div class="priority-option @(assignmentModel.Priority == "High" ? "selected" : "")"
                                     @onclick="() => SetPriority(GetHighPriority())">
                                    <RadzenIcon Icon="keyboard_arrow_up" Style="color: var(--peach-kiss);" />
                                    <div>High</div>
                                </div>
                            </div>
                        </RadzenColumn>
                    </RadzenRow>

                    <div class="mt-3">
                        <RadzenText TextStyle="TextStyle.Body2" Class="mb-2 fw-semibold">Additional Notes (Optional)</RadzenText>
                        <RadzenTextArea @bind-Value="@assignmentModel.Notes"
                                       Placeholder="Add any specific instructions or context for this assignment..."
                                       Rows="3"
                                       Class="w-100" />
                    </div>

                    <div class="mt-3">
                        <RadzenCheckBox @bind-Value="@assignmentModel.SendEmailNotification" Name="emailNotification" />
                        <RadzenLabel Text="Send email notification to employee" Component="emailNotification" Class="ms-2" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Assignment Summary -->
        @if (IsReadyToAssign())
        {
            <div class="assignment-summary">
                <RadzenText TextStyle="TextStyle.H6" Class="mb-3 d-flex align-items-center">
                    <RadzenIcon Icon="preview" Class="me-2" />
                    Assignment Summary
                </RadzenText>

                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12" SizeMD="6">
                        <div class="d-flex align-items-center mb-2">
                            <RadzenIcon Icon="person" Class="me-2" Style="color: var(--blue-new);" />
                            <RadzenText TextStyle="TextStyle.Body2" Class="fw-semibold">Employee:</RadzenText>
                        </div>
                        <RadzenText TextStyle="TextStyle.Body2" Class="ms-4">@GetSelectedEmployeeName()</RadzenText>
                    </RadzenColumn>

                    <RadzenColumn Size="12" SizeMD="6">
                        <div class="d-flex align-items-center mb-2">
                            <RadzenIcon Icon="quiz" Class="me-2" Style="color: var(--purple-rain);" />
                            <RadzenText TextStyle="TextStyle.Body2" Class="fw-semibold">Questionnaire:</RadzenText>
                        </div>
                        <RadzenText TextStyle="TextStyle.Body2" Class="ms-4">@GetSelectedQuestionnaireName()</RadzenText>
                    </RadzenColumn>
                </RadzenRow>

                @if (assignmentModel.DueDate.HasValue)
                {
                    <div class="mt-2">
                        <div class="d-flex align-items-center mb-2">
                            <RadzenIcon Icon="event" Class="me-2" Style="color: var(--golden-milk);" />
                            <RadzenText TextStyle="TextStyle.Body2" Class="fw-semibold">Due Date:</RadzenText>
                        </div>
                        <RadzenText TextStyle="TextStyle.Body2" Class="ms-4">@assignmentModel.DueDate.Value.ToString("dddd, MMMM dd, yyyy")</RadzenText>
                    </div>
                }
            </div>
        }

        <!-- Form Actions -->
        <div class="form-actions">
            <RadzenButton Text="Cancel"
                         ButtonStyle="ButtonStyle.Light"
                         Icon="close"
                         Click="@Close" />

            <RadzenButton Text="@(isLoading ? "Creating Assignment..." : "Create Assignment")"
                         ButtonStyle="ButtonStyle.Primary"
                         Icon="@(isLoading ? "hourglass_empty" : "assignment_turned_in")"
                         ButtonType="ButtonType.Submit"
                         Disabled="@(!IsReadyToAssign() || isLoading)"
                         Style="min-width: 180px;" />
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public EventCallback<AssignmentModel> OnAssignmentCreated { get; set; }
    [Parameter] public EventCallback OnClosed { get; set; }

    [Inject] protected DialogService DialogService { get; set; } = default!;
    [Inject] protected NotificationService NotificationService { get; set; } = default!;

    private AssignmentModel assignmentModel = new();
    private List<Employee> availableEmployees = new();
    private List<Employee> filteredEmployees = new();
    private List<Questionnaire> availableQuestionnaires = new();
    private string employeeSearch = "";
    private int currentStep = 1;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        FilterEmployees();
    }

    private async Task LoadData()
    {
        // In real app, load from API
        availableEmployees = new List<Employee>
        {
            new() { Id = Guid.NewGuid(), Name = "Alice Johnson", Email = "alice.johnson@company.com", Department = "Engineering", Role = "Senior Developer" },
            new() { Id = Guid.NewGuid(), Name = "Bob Smith", Email = "bob.smith@company.com", Department = "Marketing", Role = "Marketing Manager" },
            new() { Id = Guid.NewGuid(), Name = "Carol Davis", Email = "carol.davis@company.com", Department = "HR", Role = "HR Specialist" },
            new() { Id = Guid.NewGuid(), Name = "David Wilson", Email = "david.wilson@company.com", Department = "Sales", Role = "Sales Representative" },
            new() { Id = Guid.NewGuid(), Name = "Eva Brown", Email = "eva.brown@company.com", Department = "Engineering", Role = "Product Manager" },
        };

        availableQuestionnaires = new List<Questionnaire>
        {
            new() { Id = Guid.NewGuid(), Title = "Annual Performance Review", Description = "Comprehensive evaluation of employee performance, goals, and development areas", Category = "Performance", EstimatedDuration = 15, QuestionCount = 25 },
            new() { Id = Guid.NewGuid(), Title = "Team Collaboration Assessment", Description = "Evaluate teamwork, communication skills, and collaborative effectiveness", Category = "Team", EstimatedDuration = 10, QuestionCount = 18 },
            new() { Id = Guid.NewGuid(), Title = "Leadership Skills Evaluation", Description = "Assessment of leadership capabilities and potential for growth", Category = "Leadership", EstimatedDuration = 20, QuestionCount = 30 },
            new() { Id = Guid.NewGuid(), Title = "Technical Competency Check", Description = "Evaluate technical skills and knowledge in specific domains", Category = "Technical", EstimatedDuration = 25, QuestionCount = 35 },
            new() { Id = Guid.NewGuid(), Title = "Customer Service Excellence", Description = "Assessment of customer interaction and service delivery skills", Category = "Service", EstimatedDuration = 12, QuestionCount = 20 },
        };

        assignmentModel.Priority = "Normal";
        assignmentModel.SendEmailNotification = true;
    }

    private void FilterEmployees()
    {
        if (string.IsNullOrWhiteSpace(employeeSearch))
        {
            filteredEmployees = availableEmployees.ToList();
        }
        else
        {
            filteredEmployees = availableEmployees.Where(e =>
                e.Name.Contains(employeeSearch, StringComparison.OrdinalIgnoreCase) ||
                e.Email.Contains(employeeSearch, StringComparison.OrdinalIgnoreCase) ||
                e.Department.Contains(employeeSearch, StringComparison.OrdinalIgnoreCase) ||
                e.Role.Contains(employeeSearch, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        StateHasChanged();
    }

    private void SelectEmployee(Employee employee)
    {
        assignmentModel.SelectedEmployeeId = employee.Id;
        assignmentModel.SelectedEmployeeName = employee.Name;
        currentStep = Math.Max(currentStep, 2);
        StateHasChanged();
    }

    private void SelectQuestionnaire(Questionnaire questionnaire)
    {
        assignmentModel.SelectedQuestionnaireId = questionnaire.Id;
        assignmentModel.SelectedQuestionnaireName = questionnaire.Title;
        currentStep = Math.Max(currentStep, 3);
        StateHasChanged();
    }

    private void SetPriority(string priority)
    {
        assignmentModel.Priority = priority;
        StateHasChanged();
    }

    private string GetLowPriority() => "Low";
    private string GetNormalPriority() => "Normal";
    private string GetHighPriority() => "High";

    private string GetQuestionnaireIcon(string category)
    {
        return category switch
        {
            "Performance" => "trending_up",
            "Team" => "groups",
            "Leadership" => "emoji_events",
            "Technical" => "engineering",
            "Service" => "support_agent",
            _ => "quiz"
        };
    }

    private bool IsReadyToAssign()
    {
        return assignmentModel.SelectedEmployeeId != Guid.Empty &&
               assignmentModel.SelectedQuestionnaireId != Guid.Empty;
    }

    private string GetSelectedEmployeeName()
    {
        return availableEmployees.FirstOrDefault(e => e.Id == assignmentModel.SelectedEmployeeId)?.Name ?? "";
    }

    private string GetSelectedQuestionnaireName()
    {
        return availableQuestionnaires.FirstOrDefault(q => q.Id == assignmentModel.SelectedQuestionnaireId)?.Title ?? "";
    }

    private async Task HandleValidSubmit()
    {
        if (!IsReadyToAssign()) return;

        // Perform custom validation
        var validationErrors = assignmentModel.ValidateAssignment();
        if (validationErrors.Any())
        {
            foreach (var error in validationErrors)
            {
                NotificationService.Notify(NotificationSeverity.Warning, "Validation Error", error);
            }
            return;
        }

        isLoading = true;
        StateHasChanged();

        try
        {
            // Simulate network delay and potential errors
            await Task.Delay(1500);

            // Simulate random failure for demo (5% chance)
            if (Random.Shared.Next(100) < 5)
            {
                throw new InvalidOperationException("Network error occurred");
            }

            await OnAssignmentCreated.InvokeAsync(assignmentModel);

            NotificationService.Notify(NotificationSeverity.Success,
                "Assignment Created Successfully",
                $"Questionnaire '{GetSelectedQuestionnaireName()}' has been assigned to {GetSelectedEmployeeName()}",
                duration: 6000);

            await Close();
        }
        catch (InvalidOperationException ex)
        {
            NotificationService.Notify(NotificationSeverity.Error,
                "Network Error",
                "Unable to connect to server. Please check your connection and try again.");
        }
        catch (UnauthorizedAccessException)
        {
            NotificationService.Notify(NotificationSeverity.Error,
                "Permission Denied",
                "You don't have permission to create assignments. Please contact your administrator.");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error,
                "Assignment Failed",
                "An unexpected error occurred. Please try again or contact support if the problem persists.");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task Close()
    {
        await OnClosed.InvokeAsync();
        DialogService.Close();
    }

    // Model classes
    public class AssignmentModel
    {
        [NotEmptyGuid(ErrorMessage = "Please select an employee")]
        public Guid SelectedEmployeeId { get; set; } = Guid.Empty;

        public string SelectedEmployeeName { get; set; } = "";

        [NotEmptyGuid(ErrorMessage = "Please select a questionnaire")]
        public Guid SelectedQuestionnaireId { get; set; } = Guid.Empty;

        public string SelectedQuestionnaireName { get; set; } = "";

        [FutureDate(allowToday: true)]
        [MaxDateRange(maxYears: 1)]
        public DateTime? DueDate { get; set; }

        [Required(ErrorMessage = "Please select a priority level")]
        public string Priority { get; set; } = "Normal";

        [MaxLength(1000, ErrorMessage = "Notes cannot exceed 1000 characters")]
        public string Notes { get; set; } = "";

        public bool SendEmailNotification { get; set; } = true;
    }

    public class Employee
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Department { get; set; } = "";
        public string Role { get; set; } = "";
    }

    public class Questionnaire
    {
        public Guid Id { get; set; }
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Category { get; set; } = "";
        public int EstimatedDuration { get; set; }
        public int QuestionCount { get; set; }
    }
}