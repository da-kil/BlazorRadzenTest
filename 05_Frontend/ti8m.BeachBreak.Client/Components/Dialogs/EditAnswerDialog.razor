@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Components.Questions
@using ti8m.BeachBreak.Client.Components.Shared
@inject DialogService DialogService
@inject NotificationService NotificationService

<style>
    .role-indicator {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
        font-size: 0.875rem;
        font-weight: 600;
        background: rgba(102, 126, 234, 0.1);
        color: #667eea;
        margin-bottom: 1rem;
    }

    .answer-editor {
        padding: 0 0.5rem;
    }

    /* Ensure competency cards fit well in dialog */
    .answer-editor .rz-card {
        margin-bottom: 0 !important;
    }

    .answer-editor .competency-card {
        margin-bottom: 1rem !important;
    }

    /* Common Question Item Styles - Reused from Review Mode */
    .question-item-title {
        font-weight: 600;
        font-size: 1rem;
        margin-bottom: 0.5rem;
        color: #212529;
    }

    .question-item-description {
        color: #6c757d;
        font-size: 0.875rem;
        margin-bottom: 0.75rem;
    }
</style>

<RadzenStack Gap="0" Style="height: 100%; min-height: 500px; display: flex; flex-direction: column;" JustifyContent="JustifyContent.SpaceBetween">
    <RadzenStack Gap="1rem" Style="flex: 1; overflow-y: auto;">
        <div class="role-indicator">
            <RadzenIcon Icon="@GetRoleIcon()" />
            Editing @CompletionRole's Answer
        </div>

        <div class="answer-editor">
        @if (Question.Type == QuestionType.TextQuestion)
        {
            <OptimizedTextQuestion Question="@Question"
                                  Response="@editResponse"
                                  OnResponseChanged="@HandleResponseChanged"
                                  IsReadOnly="false"
                                  HideHeader="true" />
        }
        else if (Question.Type == QuestionType.Assessment)
        {
            <OptimizedAssessmentQuestion Question="@Question"
                                        Response="@editResponse"
                                        OnResponseChanged="@HandleResponseChanged"
                                        IsReadOnly="false"
                                        HideHeader="true" />
        }
        else if (Question.Type == QuestionType.GoalAchievement)
        {
            <OptimizedGoalQuestion Question="@Question"
                                  Response="@editResponse"
                                  OnResponseChanged="@HandleResponseChanged"
                                  IsReadOnly="false"
                                  HideHeader="true" />
        }
        else
        {
            <RadzenTextBox @bind-Value="@SimpleTextValue"
                          Placeholder="Enter your answer..."
                          Style="width: 100%;" />
        }
        </div>
    </RadzenStack>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="1rem" Style="padding-top: 1rem; border-top: 1px solid #e9ecef; flex-shrink: 0;">
        <AsyncButton Text="Cancel"
                    ButtonStyle="ButtonStyle.Light"
                    Click="@Cancel" />
        <AsyncButton Text="Save Changes"
                    ProcessingText="Saving"
                    ButtonStyle="ButtonStyle.Success"
                    Icon="save"
                    Click="@SaveChanges" />
    </RadzenStack>
</RadzenStack>

@code {
    [Parameter] public QuestionItem Question { get; set; } = null!;
    [Parameter] public object? CurrentAnswer { get; set; }
    [Parameter] public CompletionRole CompletionRole { get; set; }
    [Parameter] public string SectionTitle { get; set; } = string.Empty;

    private QuestionResponse editResponse = new();

    // Helper property for simple text binding
    private string SimpleTextValue
    {
        get => editResponse.ComplexValue?.TryGetValue("value", out var val) == true ? val?.ToString() ?? "" : "";
        set
        {
            if (editResponse.ComplexValue == null)
                editResponse.ComplexValue = new Dictionary<string, object>();
            editResponse.ComplexValue["value"] = value;
        }
    }

    protected override void OnInitialized()
    {
        editResponse = new QuestionResponse
        {
            QuestionId = Question.Id,
            QuestionType = Question.Type,
            LastModified = DateTime.Now
        };

        if (CurrentAnswer is Dictionary<string, object> complexValue)
        {
            editResponse.ComplexValue = new Dictionary<string, object>(complexValue);
        }
        else if (Question.Type == QuestionType.TextQuestion)
        {
            // Initialize empty ComplexValue for text sections
            editResponse.ComplexValue = new Dictionary<string, object>();
        }
    }

    private async Task HandleResponseChanged(QuestionResponse response)
    {
        // Update is already handled by the component
        // This is just to track changes
        await Task.CompletedTask;
    }

    private string GetRoleIcon()
    {
        return CompletionRole switch
        {
            CompletionRole.Employee => "person",
            CompletionRole.Manager => "supervisor_account",
            CompletionRole.Both => "groups",
            _ => "help"
        };
    }

    private void Cancel()
    {
        DialogService.Close(null);
    }

    private void SaveChanges()
    {
        // Validate required field
        if (Question.IsRequired && !IsAnswerValid())
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Required Field", "This field is required and cannot be empty.");
            return;
        }

        // Build complete QuestionResponse structure (same as regular questionnaire)
        var questionResponse = new QuestionResponse
        {
            QuestionId = Question.Id,
            QuestionType = Question.Type,
            LastModified = DateTime.Now,
            ComplexValue = editResponse.ComplexValue
        };

        DialogService.Close(questionResponse);
    }

    private bool IsAnswerValid()
    {
        if (Question.Type == QuestionType.TextQuestion)
        {
            if (editResponse.ComplexValue == null || !editResponse.ComplexValue.Any())
                return false;

            // Check for single section format ("value" key)
            if (editResponse.ComplexValue.ContainsKey("value"))
            {
                return !string.IsNullOrWhiteSpace(editResponse.ComplexValue["value"]?.ToString());
            }

            // Check for multiple sections format ("section_0", "section_1", etc.)
            var sectionKeys = editResponse.ComplexValue.Keys.Where(k => k.StartsWith("section_")).ToList();
            if (sectionKeys.Any())
            {
                // At least one section must have content
                return sectionKeys.Any(key =>
                    !string.IsNullOrWhiteSpace(editResponse.ComplexValue[key]?.ToString()));
            }

            return false;
        }

        return Question.Type switch
        {
            QuestionType.Assessment => editResponse.ComplexValue != null &&
                                      editResponse.ComplexValue.Any(kvp => kvp.Key.StartsWith("rating_") &&
                                                                           kvp.Value != null &&
                                                                           !kvp.Value.Equals(0)),
            QuestionType.GoalAchievement => editResponse.ComplexValue != null &&
                                           editResponse.ComplexValue.ContainsKey("Description") &&
                                           !string.IsNullOrWhiteSpace(editResponse.ComplexValue["Description"]?.ToString()),
            _ => !string.IsNullOrWhiteSpace(SimpleTextValue) || editResponse.ComplexValue != null
        };
    }
}
