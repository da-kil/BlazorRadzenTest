@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@implements IDisposable

<style>
    .goal-achievement-editor {
        --primary-color: #007bff;
        --border-color: #e9ecef;
        --hover-bg: #f8f9fa;
        --text-muted: #6c757d;
    }

    .section-header .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--rz-text-color);
        margin: 0;
    }

    .section-description {
        font-size: 0.875rem;
        color: var(--text-muted);
    }

    .btn-link {
        background: none;
        border: none;
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
        cursor: pointer;
        text-decoration: none;
        border-radius: 0.25rem;
        transition: all 0.15s ease-in-out;
    }

    .btn-link:hover {
        background-color: var(--hover-bg);
        text-decoration: none;
    }

    .empty-state {
        color: var(--text-muted);
        padding: 3rem 1rem;
    }

    .goal-category-card {
        border: 1px solid var(--border-color);
        border-radius: 0.5rem;
        background: white;
        transition: all 0.15s ease-in-out;
    }

    .goal-category-card:hover {
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .card-header {
        border-bottom: 1px solid var(--border-color);
        background-color: #fafafa;
    }

    .category-selector {
        flex-shrink: 0;
    }

    .drag-handle {
        flex-shrink: 0;
        padding: 0.25rem;
    }

    .drag-handle:hover {
        background-color: var(--hover-bg);
        border-radius: 0.25rem;
    }

    .category-title {
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        color: var(--rz-text-color);
        transition: color 0.15s ease-in-out;
    }

    .category-title:hover {
        color: var(--primary-color);
    }

    .title-editor {
        font-size: 1rem;
        font-weight: 500;
        border: 1px solid var(--primary-color);
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .btn-icon {
        background: none;
        border: none;
        padding: 0.25rem;
        cursor: pointer;
        border-radius: 0.25rem;
        transition: all 0.15s ease-in-out;
    }

    .btn-icon:hover {
        background-color: var(--hover-bg);
    }

    .rotated {
        transform: rotate(180deg);
    }

    .card-body {
        border-top: 1px solid var(--border-color);
    }

    .description-textarea {
        border: 1px solid var(--border-color);
        transition: border-color 0.15s ease-in-out;
    }

    .description-textarea:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .auto-save-indicator {
        font-size: 0.75rem;
        opacity: 0.9;
    }

    .small-badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }

    .context-menu {
        background: white;
        border-radius: 0.375rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .context-menu-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        z-index: 999;
    }

    .dropdown-menu {
        min-width: 8rem;
        padding: 0.5rem 0;
    }

    .dropdown-item {
        display: flex;
        align-items: center;
        width: 100%;
        padding: 0.375rem 0.75rem;
        background: none;
        border: none;
        text-align: left;
        font-size: 0.875rem;
        cursor: pointer;
        transition: background-color 0.15s ease-in-out;
    }

    .dropdown-item:hover {
        background-color: var(--hover-bg);
    }

    .dropdown-item.text-danger:hover {
        background-color: rgba(220, 53, 69, 0.1);
        color: #dc3545;
    }

    @@media (max-width: 768px) {
        .section-header .d-flex {
            flex-direction: column;
            align-items: stretch;
            gap: 1rem;
        }

        .category-actions {
            flex-direction: column;
            width: 100%;
        }
    }
</style>

<div class="goal-achievement-editor">
    <div class="section-header mb-4">
        <div class="d-flex align-items-center justify-content-between">
            <div>
                <h3 class="section-title mb-1">Goal Achievement Review</h3>
                <p class="section-description mb-0 text-muted">@GetItemCountText() • @GetRequiredCountText()</p>
            </div>
            <div class="d-flex align-items-center gap-2">
                @if (GoalCategories.Count > 1)
                {
                    <RadzenCheckBox @bind-Value="@SelectAllChecked"
                                   @bind-Value:after="ToggleSelectAll"
                                   Class="me-2"
                                   Title="Select all categories" />
                    <span class="text-muted me-3">Select all</span>
                }
                <RadzenButton Text="@($"× {SelectedCount}")"
                            ButtonStyle="ButtonStyle.Danger"
                            Size="ButtonSize.Small"
                            Visible="@(SelectedCount > 0)"
                            Click="@DeleteSelected"
                            Title="Delete selected categories" />
                <button type="button" class="btn-link text-primary" @onclick="AddGoalCategory">
                    + Add goal category
                </button>
            </div>
        </div>
    </div>

    @if (GoalCategories.Count == 0)
    {
        <div class="empty-state text-center py-5">
            <RadzenIcon Icon="track_changes" Style="font-size: 3rem; color: var(--rz-text-disabled-color); margin-bottom: 1rem;" />
            <p class="text-muted mb-3">No goal categories yet</p>
            <button type="button" class="btn-link text-primary" @onclick="AddGoalCategory">
                + Add your first goal category
            </button>
        </div>
    }

    @for (int i = 0; i < GoalCategories.Count; i++)
    {
        var categoryIndex = i;
        var category = GoalCategories[categoryIndex];

        <div class="goal-category-card mb-3"
             @oncontextmenu="@(args => ShowContextMenu(args, categoryIndex))"
             @oncontextmenu:preventDefault="true">
            <div class="card-header d-flex align-items-center gap-3 p-3">
                <RadzenCheckBox @bind-Value="@category.IsSelected"
                               @bind-Value:after="UpdateSelectionCount"
                               Class="category-selector" />
                <div class="drag-handle" title="Drag to reorder">
                    <RadzenIcon Icon="drag_indicator" Style="color: var(--rz-text-disabled-color); cursor: grab;" />
                </div>
                <div class="category-title-section flex-grow-1">
                    @if (category.IsEditingTitle)
                    {
                        <RadzenTextBox @bind-Value="@category.Name"
                                      @onblur="@(() => FinishEditingTitle(categoryIndex))"
                                      @onkeypress="@(args => HandleTitleKeyPress(args, categoryIndex))"
                                      Class="title-editor"
                                      Placeholder="@($"Goal Category {categoryIndex + 1}")"
                                      @ref="@titleEditors[categoryIndex]" />
                    }
                    else
                    {
                        <h4 class="category-title mb-0"
                           @onclick="@(() => StartEditingTitle(categoryIndex))"
                           title="Click to edit">
                            @(string.IsNullOrWhiteSpace(category.Name) ? $"Goal Category {categoryIndex + 1}" : category.Name)
                            @if (IsCategoryRequired(category))
                            {
                                <span class="text-danger">*</span>
                            }
                        </h4>
                    }
                </div>
                <div class="category-actions d-flex align-items-center gap-2">
                    <RadzenButton Icon="expand_more"
                                 ButtonStyle="ButtonStyle.Light"
                                 Size="ButtonSize.ExtraSmall"
                                 Class="@(category.IsExpanded == true ? "rotated" : "")"
                                 Click="@(() => ToggleExpanded(categoryIndex))"
                                 Title="@(category.IsExpanded == true ? "Collapse" : "Expand")" />
                    <button type="button" class="btn-icon" @onclick="@(() => RemoveGoalCategory(categoryIndex))" title="Delete category">
                        <RadzenIcon Icon="close" Style="font-size: 1rem; color: var(--rz-text-disabled-color);" />
                    </button>
                </div>
            </div>

            @if (category.IsExpanded == true)
            {
                <div class="card-body p-3 pt-0">
                    <div class="mb-3">
                        <RadzenTextArea @bind-Value="@category.Description"
                                       @bind-Value:after="@(() => ShowAutoSaveIndicator(categoryIndex))"
                                       Placeholder="Describe what goals this category covers..."
                                       Rows="3"
                                       Class="w-100 description-textarea" />
                        @if (category.ShowAutoSave)
                        {
                            <small class="text-success mt-1 d-block auto-save-indicator">
                                <RadzenIcon Icon="check_circle" Style="font-size: 0.8rem;" /> Auto-saved
                            </small>
                        }
                    </div>

                    <div class="mb-3">
                        <p class="mb-2 text-muted" style="font-size: 0.875rem;">Achievement Levels</p>
                        <div class="achievement-levels d-flex gap-2 flex-wrap">
                            <RadzenBadge Text="Not Achieved" BadgeStyle="BadgeStyle.Danger" Class="px-2 py-1 small-badge" />
                            <RadzenBadge Text="Partially Achieved" BadgeStyle="BadgeStyle.Warning" Class="px-2 py-1 small-badge" />
                            <RadzenBadge Text="Fully Achieved" BadgeStyle="BadgeStyle.Success" Class="px-2 py-1 small-badge" />
                            <RadzenBadge Text="Exceeded" BadgeStyle="BadgeStyle.Info" Class="px-2 py-1 small-badge" />
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <div class="d-flex justify-content-end gap-2 mt-4">
        <RadzenButton Text="Cancel"
                     ButtonStyle="ButtonStyle.Light"
                     Click="@Cancel" />
        <RadzenButton Text="Save"
                     ButtonStyle="ButtonStyle.Success"
                     Icon="save"
                     Click="@Save"
                     Disabled="@(!CanSave())" />
    </div>
</div>

@* Context Menu *@
@if (ShowContextMenuVisible)
{
    <div class="context-menu" style="position: fixed; top: @(ContextMenuY)px; left: @(ContextMenuX)px; z-index: 1000;">
        <div class="dropdown-menu show">
            <button class="dropdown-item" @onclick="@(() => DuplicateCategory(ContextMenuCategoryIndex))">
                <RadzenIcon Icon="content_copy" Class="me-2" /> Duplicate
            </button>
            <button class="dropdown-item text-danger" @onclick="@(() => RemoveGoalCategory(ContextMenuCategoryIndex))">
                <RadzenIcon Icon="delete" Class="me-2" /> Delete
            </button>
        </div>
    </div>
    <div class="context-menu-backdrop" @onclick="HideContextMenu"></div>
}

@code {
    [Parameter] public QuestionItem Question { get; set; } = default!;
    [Parameter] public List<GoalCategory> GoalCategories { get; set; } = new();

    [Inject] protected DialogService DialogService { get; set; } = default!;

    // UI State
    private bool SelectAllChecked = false;
    private int SelectedCount = 0;
    private bool ShowContextMenuVisible = false;
    private double ContextMenuX = 0;
    private double ContextMenuY = 0;
    private int ContextMenuCategoryIndex = -1;
    private Dictionary<int, RadzenTextBox> titleEditors = new();
    private Dictionary<int, Timer> autoSaveTimers = new();

    protected override void OnInitialized()
    {
        // Ensure we have a working copy of goal categories
        if (GoalCategories == null)
        {
            GoalCategories = new List<GoalCategory>();
        }

        // If no categories are provided, start with a default one with smart defaults
        if (GoalCategories.Count == 0)
        {
            GoalCategories.Add(new GoalCategory
            {
                Name = "Goal Category 1",
                Description = "",
                IsExpanded = true,
                IsEditingTitle = false,
                IsSelected = false,
                ShowAutoSave = false
            });
        }

        // Initialize expanded state for existing categories
        foreach (var category in GoalCategories)
        {
            if (!category.IsExpanded.HasValue)
                category.IsExpanded = false;
        }

        StateHasChanged();
    }

    private void AddGoalCategory()
    {
        var newIndex = GoalCategories.Count + 1;
        GoalCategories.Add(new GoalCategory
        {
            Name = $"Goal Category {newIndex}",
            Description = "",
            IsExpanded = true,
            IsEditingTitle = false,
            IsSelected = false,
            ShowAutoSave = false
        });
        StateHasChanged();
    }

    private void RemoveGoalCategory(int index)
    {
        if (index >= 0 && index < GoalCategories.Count)
        {
            GoalCategories.RemoveAt(index);
        }
    }

    private bool CanSave()
    {
        return GoalCategories.Count > 0 &&
               GoalCategories.All(c => !string.IsNullOrWhiteSpace(c.Name) && !string.IsNullOrWhiteSpace(c.Description));
    }

    // Helper methods for UI state
    private string GetItemCountText()
    {
        var count = GoalCategories.Count;
        return count == 1 ? "1 item" : $"{count} items";
    }

    private string GetRequiredCountText()
    {
        var requiredCount = GoalCategories.Count(c => IsCategoryRequired(c));
        return requiredCount == 1 ? "1 required" : $"{requiredCount} required";
    }

    private bool IsCategoryRequired(GoalCategory category)
    {
        // For now, all categories are required if they have content
        return !string.IsNullOrWhiteSpace(category.Name) || !string.IsNullOrWhiteSpace(category.Description);
    }

    // Selection management
    private void UpdateSelectionCount()
    {
        SelectedCount = GoalCategories.Count(c => c.IsSelected);
        SelectAllChecked = SelectedCount == GoalCategories.Count && GoalCategories.Count > 0;
        StateHasChanged();
    }

    private void ToggleSelectAll()
    {
        foreach (var category in GoalCategories)
        {
            category.IsSelected = SelectAllChecked;
        }
        UpdateSelectionCount();
    }

    private void DeleteSelected()
    {
        GoalCategories.RemoveAll(c => c.IsSelected);
        SelectedCount = 0;
        SelectAllChecked = false;
        StateHasChanged();
    }

    // Expansion management
    private void ToggleExpanded(int index)
    {
        if (index >= 0 && index < GoalCategories.Count)
        {
            GoalCategories[index].IsExpanded = !(GoalCategories[index].IsExpanded ?? false);
            StateHasChanged();
        }
    }

    // Inline editing
    private void StartEditingTitle(int index)
    {
        if (index >= 0 && index < GoalCategories.Count)
        {
            GoalCategories[index].IsEditingTitle = true;
            StateHasChanged();
        }
    }

    private void FinishEditingTitle(int index)
    {
        if (index >= 0 && index < GoalCategories.Count)
        {
            var category = GoalCategories[index];
            category.IsEditingTitle = false;
            if (string.IsNullOrWhiteSpace(category.Name))
            {
                category.Name = $"Goal Category {index + 1}";
            }
            StateHasChanged();
        }
    }

    private void HandleTitleKeyPress(KeyboardEventArgs args, int index)
    {
        if (args.Key == "Enter")
        {
            FinishEditingTitle(index);
        }
    }

    // Context menu
    private void ShowContextMenu(MouseEventArgs args, int categoryIndex)
    {
        ContextMenuX = args.ClientX;
        ContextMenuY = args.ClientY;
        ContextMenuCategoryIndex = categoryIndex;
        ShowContextMenuVisible = true;
        StateHasChanged();
    }

    private void HideContextMenu()
    {
        ShowContextMenuVisible = false;
        StateHasChanged();
    }

    private void DuplicateCategory(int index)
    {
        if (index >= 0 && index < GoalCategories.Count)
        {
            var originalCategory = GoalCategories[index];
            var duplicateCategory = new GoalCategory
            {
                Name = $"{originalCategory.Name} (Copy)",
                Description = originalCategory.Description,
                IsExpanded = true,
                IsEditingTitle = false,
                IsSelected = false,
                ShowAutoSave = false
            };
            GoalCategories.Insert(index + 1, duplicateCategory);
        }
        HideContextMenu();
    }

    // Auto-save indicator
    private void ShowAutoSaveIndicator(int index)
    {
        if (index >= 0 && index < GoalCategories.Count)
        {
            var category = GoalCategories[index];
            category.ShowAutoSave = true;

            // Clear existing timer
            if (autoSaveTimers.ContainsKey(index))
            {
                autoSaveTimers[index].Dispose();
            }

            // Set new timer to hide indicator after 2 seconds
            autoSaveTimers[index] = new Timer(_ => {
                category.ShowAutoSave = false;
                InvokeAsync(StateHasChanged);
                autoSaveTimers[index].Dispose();
                autoSaveTimers.Remove(index);
            }, null, 2000, Timeout.Infinite);

            StateHasChanged();
        }
    }

    private void Cancel()
    {
        DialogService.Close(null);
    }

    private void Save()
    {
        if (CanSave())
        {
            DialogService.Close(GoalCategories);
        }
    }

    // Dispose timers when component is disposed
    public void Dispose()
    {
        foreach (var timer in autoSaveTimers.Values)
        {
            timer?.Dispose();
        }
        autoSaveTimers.Clear();
    }

    public class GoalCategory
    {
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public bool? IsExpanded { get; set; } = false;
        public bool IsEditingTitle { get; set; } = false;
        public bool IsSelected { get; set; } = false;
        public bool ShowAutoSave { get; set; } = false;
    }
}