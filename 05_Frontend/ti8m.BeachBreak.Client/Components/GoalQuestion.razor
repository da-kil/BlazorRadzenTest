@using Radzen
@using Radzen.Blazor
@implements IDisposable

<style>
    .goal-question-card {
        --primary-color: #007bff;
        --success-color: #28a745;
        --warning-color: #ffc107;
        --border-color: #e9ecef;
        --hover-bg: #f8f9fa;
        --text-muted: #6c757d;
        --focus-color: rgba(0, 123, 255, 0.25);

        border-radius: 1rem;
        background: white;
        border: 1px solid var(--border-color);
        transition: all 0.2s ease-in-out;
        position: relative;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .goal-question-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 4px;
        background: linear-gradient(90deg, var(--primary-color), var(--success-color));
    }

    .goal-question-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 12px 35px rgba(0,0,0,0.12);
    }

    .card-header {
        background: linear-gradient(135deg, #fafafa 0%, #f0f0f0 100%);
        padding: 1.5rem;
        border-bottom: 1px solid var(--border-color);
    }

    .goal-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--primary-color);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .card-body {
        padding: 2rem;
    }

    .goal-field {
        margin-bottom: 2rem;
        position: relative;
    }

    .field-label {
        font-weight: 600;
        color: var(--rz-text-color);
        margin-bottom: 0.75rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1rem;
    }

    .field-input {
        border: 2px solid var(--border-color);
        border-radius: 0.75rem;
        transition: all 0.2s ease-in-out;
        font-size: 0.95rem;
        position: relative;
        background: white;
    }

    .field-input:focus {
        border-color: var(--primary-color);
        box-shadow: 0 0 0 0.2rem var(--focus-color);
        outline: none;
        background: rgba(0, 123, 255, 0.02);
    }

    .field-input:not(:placeholder-shown):not(:focus) {
        border-color: var(--success-color);
        background: rgba(40, 167, 69, 0.02);
    }

    .date-field {
        position: relative;
    }

    .date-field::after {
        content: '';
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        width: 1.2rem;
        height: 1.2rem;
        background: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23007bff'%3e%3cpath d='M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zM4.5 7.5a.5.5 0 0 0 0 1h5.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H4.5z'/%3e%3c/svg%3e") no-repeat center;
        background-size: contain;
        pointer-events: none;
        opacity: 0.6;
    }

    .textarea-field {
        min-height: 120px;
        resize: vertical;
        padding: 1rem;
        line-height: 1.6;
    }

    .numeric-field {
        text-align: center;
        font-weight: 600;
        font-size: 1.1rem;
        position: relative;
    }

    .field-helper {
        font-size: 0.8rem;
        color: var(--text-muted);
        margin-top: 0.5rem;
        font-style: italic;
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .auto-save-indicator {
        position: absolute;
        top: -0.5rem;
        right: 1rem;
        background: var(--success-color);
        color: white;
        padding: 0.25rem 0.6rem;
        border-radius: 1rem;
        font-size: 0.7rem;
        font-weight: 500;
        opacity: 0;
        transform: translateY(-5px);
        transition: all 0.3s ease-in-out;
        z-index: 10;
    }

    .auto-save-indicator.show {
        opacity: 1;
        transform: translateY(0);
    }

    .field-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
    }

    .completion-indicator {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 0.75rem;
        padding: 1.5rem;
        margin-top: 1.5rem;
        border-left: 4px solid var(--primary-color);
    }

    .completion-stats {
        display: flex;
        justify-content: space-around;
        align-items: center;
        text-align: center;
    }

    .stat-item {
        flex: 1;
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--primary-color);
        margin-bottom: 0.25rem;
    }

    .stat-label {
        font-size: 0.8rem;
        color: var(--text-muted);
        text-transform: uppercase;
        font-weight: 500;
        letter-spacing: 0.5px;
    }

    .progress-ring {
        width: 60px;
        height: 60px;
        position: relative;
    }

    .progress-circle {
        width: 100%;
        height: 100%;
        border-radius: 50%;
        background: conic-gradient(var(--success-color) 0deg, var(--success-color) calc(var(--progress) * 3.6deg), #e9ecef calc(var(--progress) * 3.6deg));
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .progress-inner {
        width: 70%;
        height: 70%;
        background: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 0.8rem;
        color: var(--primary-color);
    }

    @@media (max-width: 768px) {
        .field-row {
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        .card-body {
            padding: 1.5rem;
        }

        .completion-stats {
            flex-direction: column;
            gap: 1rem;
        }
    }
</style>

<div class="goal-question-card mb-4">
    <div class="auto-save-indicator @(ShowAutoSave ? "show" : "")">
        <RadzenIcon Icon="check_circle" Style="font-size: 0.7rem;" /> Auto-saved
    </div>

    <div class="card-header">
        <h2 class="goal-title">
            <RadzenIcon Icon="flag" />
            Goal Setting
        </h2>
    </div>

    <div class="card-body">
        <div class="field-row">
            <div class="goal-field date-field">
                <div class="field-label">
                    <RadzenIcon Icon="schedule" />
                    Start Date
                </div>
                <RadzenDatePicker @bind-Value="@TimeFrameFrom"
                                @bind-Value:after="@(() => { OnTimeFrameFromChanged(); ShowAutoSaveIndicator(); })"
                                ShowTime="false"
                                DateFormat="dd/MM/yyyy"
                                Class="w-100 field-input"
                                Placeholder="Select start date" />
                <div class="field-helper">
                    <RadzenIcon Icon="info" Style="font-size: 0.7rem;" />
                    When will you begin working on this goal?
                </div>
            </div>

            <div class="goal-field date-field">
                <div class="field-label">
                    <RadzenIcon Icon="event" />
                    End Date
                </div>
                <RadzenDatePicker @bind-Value="@TimeFrameTo"
                                @bind-Value:after="@(() => { OnTimeFrameToChanged(); ShowAutoSaveIndicator(); })"
                                ShowTime="false"
                                DateFormat="dd/MM/yyyy"
                                Class="w-100 field-input"
                                Placeholder="Select target date" />
                <div class="field-helper">
                    <RadzenIcon Icon="info" Style="font-size: 0.7rem;" />
                    Target completion date for this goal
                </div>
            </div>
        </div>

        <div class="goal-field">
            <div class="field-label">
                <RadzenIcon Icon="description" />
                Goal Description
            </div>
            <RadzenTextArea @bind-Value="@GoalDescription"
                          @bind-Value:after="@(() => { OnGoalDescriptionChanged(); ShowAutoSaveIndicator(); })"
                          Rows="4"
                          Placeholder="Describe your goal in detail. Be specific about what you want to achieve and why it matters..."
                          Class="w-100 field-input textarea-field" />
            <div class="field-helper">
                <RadzenIcon Icon="lightbulb" Style="font-size: 0.7rem;" />
                Make it SMART: Specific, Measurable, Achievable, Relevant, Time-bound
            </div>
        </div>

        <div class="goal-field">
            <div class="field-label">
                <RadzenIcon Icon="analytics" />
                Measurement Criteria
            </div>
            <RadzenTextBox @bind-Value="@MeasurementVariable"
                         @bind-Value:after="@(() => { OnMeasurementVariableChanged(); ShowAutoSaveIndicator(); })"
                         Placeholder="How will success be measured? Define specific, quantifiable metrics..."
                         Class="w-100 field-input" />
            <div class="field-helper">
                <RadzenIcon Icon="trending_up" Style="font-size: 0.7rem;" />
                Examples: "Increase sales by 20%", "Complete 5 training courses", "Reduce errors to &lt;2%"
            </div>
        </div>

        <div class="goal-field">
            <div class="field-label">
                <RadzenIcon Icon="percent" />
                Goal Weighting (%)
            </div>
            <RadzenNumeric @bind-Value="@Weighting"
                         @bind-Value:after="@(() => { OnWeightingChanged(); ShowAutoSaveIndicator(); })"
                         Min="0"
                         Max="100"
                         Step="5"
                         Format="0"
                         Class="w-100 field-input numeric-field"
                         Placeholder="0" />
            <div class="field-helper">
                <RadzenIcon Icon="balance" Style="font-size: 0.7rem;" />
                How important is this goal relative to your other objectives?
            </div>
        </div>

        @if (TimeFrameFrom.HasValue && TimeFrameTo.HasValue)
        {
            var duration = (TimeFrameTo.Value - TimeFrameFrom.Value).Days;
            var progressPercentage = GetCompletionPercentage();

            <div class="completion-indicator">
                <div class="completion-stats">
                    <div class="stat-item">
                        <div class="stat-value">@duration</div>
                        <div class="stat-label">Days Duration</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-value">@(duration / 30.0).ToString("F1")</div>
                        <div class="stat-label">Months</div>
                    </div>
                    <div class="stat-item">
                        <div class="progress-ring">
                            <div class="progress-circle" style="--progress: @progressPercentage">
                                <div class="progress-inner">
                                    @(progressPercentage)%
                                </div>
                            </div>
                        </div>
                        <div class="stat-label">Complete</div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public DateTime? TimeFrameFrom { get; set; }
    [Parameter] public EventCallback<DateTime?> TimeFrameFromChanged { get; set; }

    [Parameter] public DateTime? TimeFrameTo { get; set; }
    [Parameter] public EventCallback<DateTime?> TimeFrameToChanged { get; set; }

    [Parameter] public string GoalDescription { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> GoalDescriptionChanged { get; set; }

    [Parameter] public string MeasurementVariable { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> MeasurementVariableChanged { get; set; }

    [Parameter] public decimal Weighting { get; set; }
    [Parameter] public EventCallback<decimal> WeightingChanged { get; set; }

    private bool ShowAutoSave = false;
    private Timer? autoSaveTimer;

    private async Task OnTimeFrameFromChanged()
    {
        await TimeFrameFromChanged.InvokeAsync(TimeFrameFrom);
    }

    private async Task OnTimeFrameToChanged()
    {
        await TimeFrameToChanged.InvokeAsync(TimeFrameTo);
    }

    private async Task OnGoalDescriptionChanged()
    {
        await GoalDescriptionChanged.InvokeAsync(GoalDescription);
    }

    private async Task OnMeasurementVariableChanged()
    {
        await MeasurementVariableChanged.InvokeAsync(MeasurementVariable);
    }

    private async Task OnWeightingChanged()
    {
        await WeightingChanged.InvokeAsync(Weighting);
    }

    private void ShowAutoSaveIndicator()
    {
        ShowAutoSave = true;
        StateHasChanged();

        // Clear existing timer
        autoSaveTimer?.Dispose();

        // Set new timer to hide indicator after 2 seconds
        autoSaveTimer = new Timer(_ => {
            ShowAutoSave = false;
            InvokeAsync(StateHasChanged);
        }, null, 2000, Timeout.Infinite);
    }

    private int GetCompletionPercentage()
    {
        var fieldsCompleted = 0;
        var totalFields = 5;

        if (TimeFrameFrom.HasValue) fieldsCompleted++;
        if (TimeFrameTo.HasValue) fieldsCompleted++;
        if (!string.IsNullOrWhiteSpace(GoalDescription)) fieldsCompleted++;
        if (!string.IsNullOrWhiteSpace(MeasurementVariable)) fieldsCompleted++;
        if (Weighting > 0) fieldsCompleted++;

        return (int)Math.Round((double)fieldsCompleted / totalFields * 100);
    }

    public void Dispose()
    {
        autoSaveTimer?.Dispose();
    }
}