@using Radzen
@using Radzen.Blazor
@inherits ti8m.BeachBreak.Client.Components.Shared.AutoSaveComponentBase

<style>
    .goal-section {
        margin-bottom: var(--spacing-3xl);
    }

    .section-title {
        font-size: var(--font-size-2xl);
        font-weight: var(--font-weight-bold);
        color: var(--text-color);
        margin: 0 0 var(--spacing-2xl) 0;
        letter-spacing: -0.025em;
    }

    .goal-fields {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-2xl);
    }

    .field-group {
        display: flex;
        flex-direction: column;
        gap: var(--spacing-sm);
    }

    .field-label {
        font-size: 0.875rem;
        font-weight: 600;
        color: var(--text-color);
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .field-input {
        border: var(--input-border-width) solid var(--border-light);
        border-radius: var(--input-border-radius);
        padding: var(--input-padding);
        font-size: var(--font-size-sm);
        line-height: var(--line-height-relaxed);
        background: var(--background-color);
        transition: var(--transition-fast);
        font-family: var(--font-family-base);
    }

    .field-input:focus {
        border-color: var(--focus-border);
        box-shadow: 0 0 0 3px var(--focus-ring);
        outline: none;
    }

    .field-input:not(:placeholder-shown) {
        border-color: var(--primary-color);
    }

    .field-input::placeholder {
        color: var(--text-muted);
    }

    .textarea-field {
        min-height: 100px;
        resize: vertical;
    }

    .date-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: var(--spacing-lg);
    }


    @@media (max-width: 768px) {
        .section-title {
            font-size: var(--font-size-xl);
            margin-bottom: var(--spacing-lg);
        }

        .date-row {
            grid-template-columns: 1fr;
            gap: var(--spacing-2xl);
        }

        .field-input {
            padding: var(--spacing-md);
        }
    }

    .auto-save-indicator {
        position: fixed;
        top: var(--spacing-md);
        right: var(--spacing-md);
        background: var(--success-color);
        color: white;
        padding: var(--spacing-sm) var(--spacing-md);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-lg);
        font-size: var(--font-size-sm);
        font-weight: var(--font-weight-medium);
        display: flex;
        align-items: center;
        gap: var(--spacing-xs);
        z-index: var(--z-notification);
        animation: fadeInOut 2s ease-in-out;
    }

    @@keyframes fadeInOut {
        0% {
            opacity: 0;
            transform: translateX(100%);
        }
        10%, 85% {
            opacity: 1;
            transform: translateX(0);
        }
        100% {
            opacity: 0;
            transform: translateX(100%);
        }
    }
</style>

@if (ShowAutoSave)
{
    <div class="auto-save-indicator">
        <RadzenIcon Icon="cloud_done" />
        <span>Auto-saved</span>
    </div>
}

<div class="goal-section">
    <h2 class="section-title">Goal Achievement Review</h2>

    <div class="goal-fields">
        <div class="date-row">
            <div class="field-group">
                <label class="field-label">Start Date</label>
                <RadzenDatePicker @bind-Value="@TimeFrameFrom"
                                @bind-Value:after="@OnTimeFrameFromChangedWithAutoSave"
                                ShowTime="false"
                                DateFormat="dd/MM/yyyy"
                                Class="field-input"
                                Placeholder="Select start date" />
            </div>

            <div class="field-group">
                <label class="field-label">End Date</label>
                <RadzenDatePicker @bind-Value="@TimeFrameTo"
                                @bind-Value:after="@OnTimeFrameToChangedWithAutoSave"
                                ShowTime="false"
                                DateFormat="dd/MM/yyyy"
                                Class="field-input"
                                Placeholder="Select target date" />
            </div>
        </div>

        <div class="field-group">
            <label class="field-label">Goal Description</label>
            <RadzenTextArea @bind-Value="@GoalDescription"
                          @bind-Value:after="@OnGoalDescriptionChangedWithAutoSave"
                          Placeholder="Describe your goal..."
                          Class="field-input textarea-field" />
        </div>

        <div class="field-group">
            <label class="field-label">Measurement Criteria</label>
            <RadzenTextBox @bind-Value="@MeasurementVariable"
                         @bind-Value:after="@OnMeasurementVariableChangedWithAutoSave"
                         Placeholder="How will success be measured?"
                         Class="field-input" />
        </div>

        <div class="field-group">
            <label class="field-label">Achievement Percentage (%)</label>
            <RadzenNumeric @bind-Value="@Weighting"
                         @bind-Value:after="@OnWeightingChangedWithAutoSave"
                         Min="0"
                         Max="100"
                         Step="5"
                         Format="0"
                         Class="field-input"
                         Placeholder="0" />
        </div>
    </div>
</div>

@code {
    [Parameter] public DateTime? TimeFrameFrom { get; set; }
    [Parameter] public EventCallback<DateTime?> TimeFrameFromChanged { get; set; }

    [Parameter] public DateTime? TimeFrameTo { get; set; }
    [Parameter] public EventCallback<DateTime?> TimeFrameToChanged { get; set; }

    [Parameter] public string GoalDescription { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> GoalDescriptionChanged { get; set; }

    [Parameter] public string MeasurementVariable { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> MeasurementVariableChanged { get; set; }

    [Parameter] public decimal Weighting { get; set; }
    [Parameter] public EventCallback<decimal> WeightingChanged { get; set; }

    private async Task OnTimeFrameFromChangedWithAutoSave()
    {
        await UpdateWithAutoSave(TimeFrameFrom, TimeFrameFromChanged);
    }

    private async Task OnTimeFrameToChangedWithAutoSave()
    {
        await UpdateWithAutoSave(TimeFrameTo, TimeFrameToChanged);
    }

    private async Task OnGoalDescriptionChangedWithAutoSave()
    {
        await UpdateWithAutoSave(GoalDescription, GoalDescriptionChanged);
    }

    private async Task OnMeasurementVariableChangedWithAutoSave()
    {
        await UpdateWithAutoSave(MeasurementVariable, MeasurementVariableChanged);
    }

    private async Task OnWeightingChangedWithAutoSave()
    {
        await UpdateWithAutoSave(Weighting, WeightingChanged);
    }

    private int GetCompletionPercentage()
    {
        var fieldsCompleted = 0;
        var totalFields = 5;

        if (TimeFrameFrom.HasValue) fieldsCompleted++;
        if (TimeFrameTo.HasValue) fieldsCompleted++;
        if (!string.IsNullOrWhiteSpace(GoalDescription)) fieldsCompleted++;
        if (!string.IsNullOrWhiteSpace(MeasurementVariable)) fieldsCompleted++;
        if (Weighting > 0) fieldsCompleted++;

        return (int)Math.Round((double)fieldsCompleted / totalFields * 100);
    }
}