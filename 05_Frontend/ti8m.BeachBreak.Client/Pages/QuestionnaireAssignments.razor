@page "/questionnaire-assignments"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@using System.Linq
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components
@using ti8m.BeachBreak.Client.Components.Dialogs
@using ti8m.BeachBreak.Client.Components.Shared
@inject IEmployeeApiService EmployeeApiService
@inject ICategoryApiService CategoryApiService
@inject IQuestionnaireAssignmentService AssignmentService
@inject IQuestionnaireTemplateService TemplateService
@inject NotificationService NotificationService
@inject DialogService DialogService

<PageTitle>Questionnaire Assignments</PageTitle>

<link href="css/assignment-dialogs.css" rel="stylesheet" />

<style>
    .assignment-header {
        background: linear-gradient(135deg, var(--blue-new) 0%, var(--purple-rain) 100%);
        color: white;
        padding: 2rem;
        border-radius: 12px;
        margin-bottom: 2rem;
    }

    .assignment-form {
        background: rgba(var(--blue-new-rgb), 0.05);
        border: 2px solid rgba(var(--blue-new-rgb), 0.1);
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 2rem;
    }

    .form-section {
        background: white;
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    /* Employee card styles moved to shared css/assignment-dialogs.css */

    .questionnaire-item {
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 1rem;
        margin-bottom: 0.75rem;
        cursor: pointer;
        transition: all 0.2s ease;
        background: white;
    }

    .questionnaire-item:hover {
        border-color: var(--purple-rain);
        background: rgba(var(--purple-rain-rgb), 0.05);
    }

    .questionnaire-item.selected {
        border-color: var(--purple-rain);
        background: rgba(var(--purple-rain-rgb), 0.1);
    }

    .selected-summary {
        background: linear-gradient(135deg, rgba(var(--green-new-rgb), 0.1), rgba(var(--blue-new-rgb), 0.1));
        border: 2px solid var(--green-new);
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1.5rem 0;
    }

    .assignment-grid {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.05);
    }

    :root {
        --blue-new-rgb: 15, 105, 255;
        --purple-rain-rgb: 147, 91, 169;
        --green-new-rgb: 0, 230, 200;
    }

    /* Employee card responsive behavior moved to shared css/assignment-dialogs.css */
</style>

<div class="container-fluid">
    <!-- Header -->
    <div class="assignment-header">
        <div class="d-flex align-items-center">
            <RadzenIcon Icon="assignment_ind" Style="font-size: 3rem; margin-right: 1.5rem;" />
            <div>
                <RadzenText TextStyle="TextStyle.H3" Class="mb-2">Questionnaire Assignments</RadzenText>
                <RadzenText TextStyle="TextStyle.H6" Style="opacity: 0.9;">
                    Create and manage questionnaire assignments with real-time API integration
                </RadzenText>
            </div>
        </div>
    </div>

    <RadzenTabs>
        <Tabs>
            <!-- Create Assignment Tab -->
            <RadzenTabsItem Text="Create Assignment">
                <div class="p-3">
                    @if (isLoading)
                    {
                        <div class="text-center p-5">
                            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary"
                                                     Value="100"
                                                     Size="ProgressBarCircularSize.Large" />
                            <RadzenText TextStyle="TextStyle.H6" Class="mt-3">Loading data...</RadzenText>
                        </div>
                    }
                    else
                    {
                        <div class="assignment-form">
                            <RadzenRow Gap="2rem">
                                <!-- Employee Selection -->
                                <RadzenColumn Size="12" SizeMD="6">
                                    <div class="form-section">
                                        <RadzenText TextStyle="TextStyle.H5" Class="mb-3 d-flex align-items-center">
                                            <RadzenIcon Icon="people" Class="me-2" Style="color: var(--blue-new);" />
                                            Select Employees
                                        </RadzenText>

                                        <div class="mb-3">
                                            <RadzenTextBox @bind-Value="@employeeSearchText"
                                                         Placeholder="Search employees by name, email, or department..."
                                                         Class="w-100 mb-2"
                                                         @oninput="@(async (args) => { employeeSearchText = args.Value?.ToString() ?? ""; FilterEmployees(); })" />

                                            <div class="d-flex gap-2 mb-2">
                                                <AsyncButton Text="@($"Select All Filtered ({filteredEmployees.Count})")"
                                                            ButtonStyle="ButtonStyle.Secondary"
                                                            Size="ButtonSize.Small"
                                                            Icon="select_all"
                                                            Click="@SelectAllFilteredEmployees" />
                                                <AsyncButton Text="Clear Selection"
                                                            ButtonStyle="ButtonStyle.Light"
                                                            Size="ButtonSize.Small"
                                                            Icon="clear"
                                                            Click="@ClearEmployeeSelection" />
                                            </div>
                                        </div>

                                        <EmployeeSelectionGrid Employees="@filteredEmployees"
                                                              SelectedEmployeeIds="@selectedEmployeeIds.Select(id => id.ToString()).ToList()"
                                                              OnEmployeeToggle="@ToggleEmployeeSelection" />
                                    </div>
                                </RadzenColumn>

                                <!-- Questionnaire Selection -->
                                <RadzenColumn Size="12" SizeMD="6">
                                    <div class="form-section">
                                        <RadzenText TextStyle="TextStyle.H5" Class="mb-3 d-flex align-items-center">
                                            <RadzenIcon Icon="quiz" Class="me-2" Style="color: var(--purple-rain);" />
                                            Select Questionnaire
                                        </RadzenText>

                                        <div class="mb-3">
                                            <RadzenDropDown @bind-Value="@selectedCategoryId"
                                                          Data="@availableCategories"
                                                          TextProperty="NameEn"
                                                          ValueProperty="Id"
                                                          AllowClear="true"
                                                          Placeholder="Filter by category"
                                                          Change="@FilterQuestionnaires"
                                                          Class="w-100" />
                                        </div>

                                        <div style="max-height: 400px; overflow-y: auto;">
                                            @if (filteredQuestionnaires.Any())
                                            {
                                                @foreach (var questionnaire in filteredQuestionnaires)
                                                {
                                                    <div class="questionnaire-item @(selectedQuestionnaireId.HasValue && selectedQuestionnaireId.Value == questionnaire.Id ? "selected" : "")"
                                                         @onclick="() => SelectQuestionnaire(questionnaire.Id)">
                                                        <div class="d-flex align-items-start">
                                                            <div class="flex-grow-1">
                                                                <div class="d-flex justify-content-between align-items-start">
                                                                    <RadzenText TextStyle="TextStyle.Subtitle2" Class="fw-bold">@questionnaire.Name</RadzenText>
                                                                    <RadzenBadge Text="@GetCategoryName(questionnaire.CategoryId)" BadgeStyle="BadgeStyle.Info" />
                                                                </div>
                                                                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mt-1">@questionnaire.Description</RadzenText>
                                                                <div class="d-flex gap-3 mt-2">
                                                                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                                                        <RadzenIcon Icon="layers" Style="font-size: 0.85rem; margin-right: 4px;" />
                                                                        @questionnaire.Sections.Count sections
                                                                    </RadzenText>
                                                                </div>
                                                            </div>
                                                            @if (selectedQuestionnaireId.HasValue && selectedQuestionnaireId.Value == questionnaire.Id)
                                                            {
                                                                <RadzenIcon Icon="check_circle" Style="color: var(--green-new); font-size: 1.5rem;" />
                                                            }
                                                        </div>
                                                    </div>
                                                }
                                            }
                                            else
                                            {
                                                <div class="text-center text-muted p-3">
                                                    <RadzenIcon Icon="quiz" Style="font-size: 2rem; margin-bottom: 0.5rem;" />
                                                    <RadzenText TextStyle="TextStyle.Body2">No questionnaires available.</RadzenText>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </RadzenColumn>
                            </RadzenRow>

                            <!-- Assignment Configuration -->
                            <div class="form-section">
                                <RadzenText TextStyle="TextStyle.H5" Class="mb-3 d-flex align-items-center">
                                    <RadzenIcon Icon="settings" Class="me-2" Style="color: var(--golden-milk);" />
                                    Assignment Settings
                                </RadzenText>

                                <RadzenRow Gap="1rem">
                                    <RadzenColumn Size="12" SizeMD="4">
                                        <RadzenLabel Text="Due Date (Optional)" />
                                        <RadzenDatePicker @bind-Value="@assignmentDueDate"
                                                        DateFormat="dd/MM/yyyy"
                                                        Min="@DateTime.Today"
                                                        Class="w-100" />
                                    </RadzenColumn>

                                    <RadzenColumn Size="12" SizeMD="8">
                                        <RadzenLabel Text="Notes (Optional)" />
                                        <RadzenTextArea @bind-Value="@assignmentNotes"
                                                       Placeholder="Add any specific instructions or context for this assignment..."
                                                       Rows="3"
                                                       Class="w-100" />
                                    </RadzenColumn>
                                </RadzenRow>
                            </div>

                            <!-- Assignment Summary -->
                            @if (CanCreateAssignment())
                            {
                                <div class="selected-summary">
                                    <RadzenText TextStyle="TextStyle.H6" Class="mb-3 d-flex align-items-center">
                                        <RadzenIcon Icon="preview" Class="me-2" />
                                        Assignment Summary
                                    </RadzenText>

                                    <RadzenRow Gap="1rem">
                                        <RadzenColumn Size="12" SizeMD="4">
                                            <div class="text-center">
                                                <RadzenIcon Icon="people" Style="font-size: 2rem; color: var(--blue-new); margin-bottom: 0.5rem;" />
                                                <RadzenText TextStyle="TextStyle.H4" Class="fw-bold">@selectedEmployeeIds.Count</RadzenText>
                                                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Employee(s)</RadzenText>
                                            </div>
                                        </RadzenColumn>

                                        <RadzenColumn Size="12" SizeMD="4">
                                            <div class="text-center">
                                                <RadzenIcon Icon="quiz" Style="font-size: 2rem; color: var(--purple-rain); margin-bottom: 0.5rem;" />
                                                <RadzenText TextStyle="TextStyle.H4" Class="fw-bold">1</RadzenText>
                                                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Questionnaire</RadzenText>
                                            </div>
                                        </RadzenColumn>

                                        <RadzenColumn Size="12" SizeMD="4">
                                            <div class="text-center">
                                                <RadzenIcon Icon="event" Style="font-size: 2rem; color: var(--golden-milk); margin-bottom: 0.5rem;" />
                                                <RadzenText TextStyle="TextStyle.H4" Class="fw-bold">@(assignmentDueDate?.ToString("dd/MM") ?? "No Date")</RadzenText>
                                                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Due Date</RadzenText>
                                            </div>
                                        </RadzenColumn>
                                    </RadzenRow>

                                    <div class="mt-3">
                                        <RadzenText TextStyle="TextStyle.Body1" Class="fw-semibold">Selected Questionnaire:</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Body1">@GetSelectedQuestionnaireName()</RadzenText>
                                    </div>
                                </div>
                            }

                            <!-- Create Assignment Button -->
                            <div class="text-center mt-4">
                                <AsyncButton Text="Create Assignment"
                                            ProcessingText="Creating Assignments"
                                            ButtonStyle="ButtonStyle.Primary"
                                            Icon="assignment_turned_in"
                                            ProcessingIcon="hourglass_empty"
                                            Size="ButtonSize.Large"
                                            Disabled="@(!CanCreateAssignment() || isCreatingAssignment)"
                                            Click="@CreateAssignment"
                                            Style="min-width: 250px; padding: 1rem 2rem;" />
                            </div>
                        </div>
                    }
                </div>
            </RadzenTabsItem>

            <!-- Existing Assignments Tab -->
            <RadzenTabsItem Text="Manage Assignments">
                <div class="p-3">
                    <div class="assignment-grid">
                        <!-- Filters -->
                        <div class="p-3 border-bottom">
                            <RadzenRow Gap="1rem" AlignItems="AlignItems.End">
                                <RadzenColumn Size="12" SizeMD="3">
                                    <RadzenLabel Text="Filter by Status" />
                                    <RadzenDropDown @bind-Value="@statusFilter"
                                                   Data="@statusOptions"
                                                   TextProperty="Text"
                                                   ValueProperty="Value"
                                                   AllowClear="true"
                                                   Change="@FilterAssignments"
                                                   Class="w-100" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="6">
                                    <RadzenLabel Text="Search" />
                                    <RadzenTextBox @bind-Value="@searchText"
                                                  Placeholder="Search by employee name or email..."
                                                  oninput="@(() => FilterAssignments())"
                                                  Class="w-100" />
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="3">
                                    <AsyncButton Text="Refresh"
                                                ProcessingText="Loading"
                                                ButtonStyle="ButtonStyle.Secondary"
                                                Icon="refresh"
                                                Click="@(() => LoadAssignments())"
                                                Class="w-100" />
                                </RadzenColumn>
                            </RadzenRow>
                        </div>

                        <!-- Assignments Grid -->
                        <RadzenDataGrid @ref="assignmentsGrid"
                                       Data="@filteredAssignments"
                                       AllowFiltering="true"
                                       AllowColumnResize="true"
                                       AllowAlternatingRows="true"
                                       FilterMode="FilterMode.Advanced"
                                       AllowSorting="true"
                                       PageSize="20"
                                       AllowPaging="true"
                                       PagerHorizontalAlign="HorizontalAlign.Left"
                                       ShowPagingSummary="true"
                                       LoadData="@LoadAssignments">

                            <Columns>
                                <RadzenDataGridColumn Property="@nameof(QuestionnaireAssignment.EmployeeName)" Title="Employee" Frozen="true" Width="200px">
                                    <Template Context="assignment">
                                        <div>
                                            <RadzenText TextStyle="TextStyle.Body2" Class="fw-bold">@assignment.EmployeeName</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">@assignment.EmployeeEmail</RadzenText>
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Property="TemplateName" Title="Questionnaire" Width="250px">
                                    <Template Context="assignment">
                                        <div>
                                            <RadzenText TextStyle="TextStyle.Body2" Class="fw-bold">@GetTemplateName(assignment.TemplateId)</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">@GetTemplateCategory(assignment.TemplateId)</RadzenText>
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Property="@nameof(QuestionnaireAssignment.WorkflowState)" Title="Status" Width="180px">
                                    <Template Context="assignment">
                                        <RadzenBadge Text="@WorkflowStateHelper.GetStateDisplayName(assignment.WorkflowState)"
                                                   BadgeStyle="BadgeStyle.Light"
                                                   Style="@($"font-size: 0.75rem; background-color: {WorkflowStateHelper.GetStateColor(assignment.WorkflowState)}; color: white;")" />
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Property="@nameof(QuestionnaireAssignment.AssignedDate)" Title="Assigned" Width="120px" FormatString="{0:dd/MM/yyyy}" />

                                <RadzenDataGridColumn Property="@nameof(QuestionnaireAssignment.DueDate)" Title="Due Date" Width="120px">
                                    <Template Context="assignment">
                                        @if (assignment.DueDate.HasValue)
                                        {
                                            var isOverdue = assignment.DueDate < DateTime.Now && assignment.WorkflowState != WorkflowState.Finalized;
                                            <RadzenText TextStyle="TextStyle.Body2"
                                                       Class="@(isOverdue ? "text-danger fw-bold" : "")">
                                                @assignment.DueDate.Value.ToString("dd/MM/yyyy")
                                                @if (isOverdue) { <RadzenIcon Icon="warning" Class="ms-1" /> }
                                            </RadzenText>
                                        }
                                        else
                                        {
                                            <span class="text-muted">No due date</span>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Property="@nameof(QuestionnaireAssignment.FinalizedDate)" Title="Completed" Width="120px">
                                    <Template Context="assignment">
                                        @if (assignment.FinalizedDate.HasValue)
                                        {
                                            <RadzenText TextStyle="TextStyle.Body2">@assignment.FinalizedDate.Value.ToString("dd/MM/yyyy")</RadzenText>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Property="@nameof(QuestionnaireAssignment.AssignedBy)" Title="Assigned By" Width="150px" />

                                <RadzenDataGridColumn Filterable="false" Sortable="false" Width="250px" TextAlign="TextAlign.Center" Title="Actions">
                                    <Template Context="assignment">
                                        <div class="d-flex justify-content-center">
                                            <AssignmentActionButtons Assignment="@assignment"
                                                                   OnActionClick="@HandleAssignmentActionClick"
                                                                   ShowViewAction="true"
                                                                   ShowEditAction="true"
                                                                   ShowReminderAction="true"
                                                                   ShowCancelAction="true" />
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </div>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>
</div>

@code {

    // Data
    private List<EmployeeDto> allEmployees = new();
    private List<EmployeeDto> filteredEmployees = new();
    private List<QuestionnaireTemplate> allQuestionnaires = new();
    private List<QuestionnaireTemplate> filteredQuestionnaires = new();
    private List<QuestionnaireAssignment> assignments = new();
    private List<QuestionnaireAssignment> filteredAssignments = new();
    private List<Category> categories = new();

    // UI State
    private RadzenDataGrid<QuestionnaireAssignment> assignmentsGrid = default!;
    private bool isLoading = true;
    private bool isCreatingAssignment = false;
    private bool isProcessingAction = false;

    // Form State
    private string employeeSearchText = "";
    private List<Guid> selectedEmployeeIds = new();
    private Guid? selectedQuestionnaireId = null;
    private DateTime? assignmentDueDate;
    private string assignmentNotes = "";

    // Filters
    private string searchText = "";
    private WorkflowState? statusFilter;
    private Guid selectedCategoryId;
    private List<Category> availableCategories = new();

    private readonly List<StatusOption> statusOptions = new()
    {
        new("All", null),
        new("Assigned", WorkflowState.Assigned),
        new("Employee In Progress", WorkflowState.EmployeeInProgress),
        new("Manager In Progress", WorkflowState.ManagerInProgress),
        new("Both In Progress", WorkflowState.BothInProgress),
        new("Employee Submitted", WorkflowState.EmployeeSubmitted),
        new("Manager Submitted", WorkflowState.ManagerSubmitted),
        new("Both Submitted", WorkflowState.BothSubmitted),
        new("In Review", WorkflowState.InReview),
        new("Employee Review Confirmed", WorkflowState.EmployeeReviewConfirmed),
        new("Manager Review Confirmed", WorkflowState.ManagerReviewConfirmed),
        new("Finalized", WorkflowState.Finalized)
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Load employees and questionnaires in parallel
            var employeesTask = EmployeeApiService.GetAllEmployeesAsync();
            var questionnairesTask = TemplateService.GetAllTemplatesAsync();
            var assignmentsTask = AssignmentService.GetAllAssignmentsAsync();
            var categoriesTask = CategoryApiService.GetAllCategoriesAsync();

            await Task.WhenAll(employeesTask, questionnairesTask, assignmentsTask, categoriesTask);

            allEmployees = await employeesTask;
            allQuestionnaires = await questionnairesTask;
            assignments = await assignmentsTask;
            categories = await categoriesTask;

            // Set up initial filtered data
            filteredEmployees = allEmployees.ToList();
            // Filter for published templates that aren't archived
            filteredQuestionnaires = allQuestionnaires.Where(q =>
                q.Status == TemplateStatus.Published).ToList();
            filteredAssignments = assignments.ToList();

            // Extract available categories
            availableCategories = categories.Where(o=> allQuestionnaires.Select(q => q.CategoryId).Distinct().Contains(o.Id)).ToList();

            NotificationService.Notify(NotificationSeverity.Success,
                "Data Loaded",
                $"Loaded {allEmployees.Count} employees ({filteredEmployees.Count} available), {allQuestionnaires.Count} questionnaires ({filteredQuestionnaires.Count} published)");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error,
                "Loading Failed",
                "Failed to load initial data. Please refresh the page.");
            Console.WriteLine($"Error loading initial data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterEmployees()
    {
        if (string.IsNullOrWhiteSpace(employeeSearchText))
        {
            filteredEmployees = allEmployees.ToList();
        }
        else
        {
            filteredEmployees = allEmployees.Where(e =>
                (e.FullName.Contains(employeeSearchText, StringComparison.OrdinalIgnoreCase) ||
                 e.EMail.Contains(employeeSearchText, StringComparison.OrdinalIgnoreCase) ||
                 e.Department.Contains(employeeSearchText, StringComparison.OrdinalIgnoreCase) ||
                 e.Role.Contains(employeeSearchText, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }
        StateHasChanged();
    }

    private void FilterQuestionnaires()
    {
        if (selectedCategoryId == Guid.Empty)
        {
            filteredQuestionnaires = allQuestionnaires.Where(q => q.Status == TemplateStatus.Published).ToList();
        }
        else
        {
            filteredQuestionnaires = allQuestionnaires.Where(q =>
                q.Status == TemplateStatus.Published && q.CategoryId == selectedCategoryId
            ).ToList();
        }
        StateHasChanged();
    }

    private void FilterAssignments()
    {
        filteredAssignments = assignments.Where(a =>
            (statusFilter == null || a.WorkflowState == statusFilter) &&
            (string.IsNullOrWhiteSpace(searchText) ||
             a.EmployeeName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             a.EmployeeEmail.Contains(searchText, StringComparison.OrdinalIgnoreCase))
        ).ToList();

        StateHasChanged();
    }

    private void ToggleEmployeeSelection(EmployeeDto employee)
    {
        var employeeId = employee.Id;
        if (selectedEmployeeIds.Contains(employeeId))
        {
            selectedEmployeeIds.Remove(employeeId);
        }
        else
        {
            selectedEmployeeIds.Add(employeeId);
        }
        StateHasChanged();
    }

    private void SelectAllFilteredEmployees()
    {
        foreach (var employee in filteredEmployees)
        {
            if (!selectedEmployeeIds.Contains(employee.Id))
            {
                selectedEmployeeIds.Add(employee.Id);
            }
        }
        StateHasChanged();
    }

    private void ClearEmployeeSelection()
    {
        selectedEmployeeIds.Clear();
        StateHasChanged();
    }

    private void SelectQuestionnaire(Guid questionnaireId)
    {
        selectedQuestionnaireId = questionnaireId;
        StateHasChanged();
    }

    private bool CanCreateAssignment()
    {
        return selectedEmployeeIds.Any() && selectedQuestionnaireId.HasValue;
    }

    private async Task CreateAssignment()
    {
        if (!CanCreateAssignment()) return;

        isCreatingAssignment = true;
        StateHasChanged();

        try
        {
            // Get the selected employees with full data
            var selectedEmployees = allEmployees.Where(e => selectedEmployeeIds.Contains(e.Id)).ToList();

            var newAssignments = await AssignmentService.CreateAssignmentsAsync(
                selectedQuestionnaireId!.Value,
                selectedEmployees,
                assignmentDueDate,
                assignmentNotes
            );

            // Handle null or empty results
            if (newAssignments != null && newAssignments.Any())
            {
                assignments.AddRange(newAssignments);
                FilterAssignments();

                NotificationService.Notify(NotificationSeverity.Success,
                    "Assignments Created",
                    $"Successfully created {newAssignments.Count} questionnaire assignments",
                    duration: 6000);

                // Reset form
                selectedEmployeeIds.Clear();
                selectedQuestionnaireId = null;
                assignmentDueDate = null;
                assignmentNotes = "";
                employeeSearchText = "";
                FilterEmployees();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Warning,
                    "No Assignments Created",
                    "No assignments were created. Please check your selection and try again.");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error,
                "Assignment Creation Failed",
                $"An error occurred while creating assignments: {ex.Message}");
            Console.WriteLine($"Error creating assignments: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
        finally
        {
            isCreatingAssignment = false;
            StateHasChanged();
        }
    }

    private async Task LoadAssignments(LoadDataArgs? args = null)
    {
        try
        {
            assignments = await AssignmentService.GetAllAssignmentsAsync();
            FilterAssignments();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to load assignments");
            Console.WriteLine($"Error loading assignments: {ex.Message}");
        }
    }

    private string GetSelectedQuestionnaireName()
    {
        return selectedQuestionnaireId.HasValue
            ? allQuestionnaires.FirstOrDefault(q => q.Id == selectedQuestionnaireId.Value)?.Name ?? ""
            : "";
    }

    private string GetTemplateName(Guid templateId)
    {
        return allQuestionnaires.FirstOrDefault(q => q.Id == templateId)?.Name ?? "Unknown Questionnaire";
    }

    private string GetCategoryName(Guid categoryId)
    {
        var category = categories.FirstOrDefault(c => c.Id == categoryId);
        return category?.NameEn ?? "Uncategorized";
    }

    private Guid GetTemplateCategory(Guid templateId)
    {
        return allQuestionnaires.FirstOrDefault(q => q.Id == templateId)?.CategoryId ?? Guid.Empty;
    }

    private async Task HandleAssignmentActionClick(AssignmentActionButtons.AssignmentActionEventArgs eventArgs)
    {
        if (isProcessingAction) return;

        switch (eventArgs.Action)
        {
            case "view":
                await HandleViewAction(eventArgs.Assignment);
                break;
            case "edit":
                await HandleEditAction(eventArgs.Assignment);
                break;
            case "remind":
                await HandleReminderAction(eventArgs.Assignment);
                break;
            case "cancel":
                await HandleCancelAction(eventArgs.Assignment);
                break;
        }
    }

    private async Task HandleViewAction(QuestionnaireAssignment assignment)
    {
        try
        {
            var questionnaire = allQuestionnaires.FirstOrDefault(q => q.Id == assignment.TemplateId);

            await DialogService.OpenAsync<AssignmentDetailsDialog>("Assignment Details",
                new Dictionary<string, object>
                {
                    { "Assignment", assignment },
                    { "Questionnaire", questionnaire! },
                    { "OnEditClick", EventCallback.Factory.Create(this, () => HandleEditAction(assignment)) },
                    { "OnCloseClick", EventCallback.Factory.Create(this, () => DialogService.Close()) },
                    { "OnAssignToMoreClick", EventCallback.Factory.Create(this, () => HandleAssignToMoreAction(assignment)) }
                },
                new DialogOptions
                {
                    Width = "1000px",
                    Height = "auto",
                    Resizable = true,
                    Draggable = true,
                    CloseDialogOnOverlayClick = true,
                    ShowClose = true
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error",
                $"Failed to open assignment details: {ex.Message}");
        }
    }

    private async Task HandleEditAction(QuestionnaireAssignment assignment)
    {
        try
        {
            var questionnaire = allQuestionnaires.FirstOrDefault(q => q.Id == assignment.TemplateId);

            var result = await DialogService.OpenAsync<EditAssignmentDialog>("Edit Assignment",
                new Dictionary<string, object>
                {
                    { "Assignment", assignment },
                    { "Questionnaire", questionnaire! },
                    { "AllEmployees", allEmployees },
                    { "OnSave", EventCallback.Factory.Create<EditAssignmentDialog.EditAssignmentModel>(this, (model) => SaveAssignmentChanges(assignment, model)) },
                    { "OnCancel", EventCallback.Factory.Create(this, () => DialogService.Close()) },
                    { "IsLoading", isProcessingAction }
                },
                new DialogOptions
                {
                    Width = "1200px",
                    Height = "auto",
                    Resizable = true,
                    Draggable = true,
                    CloseDialogOnOverlayClick = false,
                    ShowClose = true
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error",
                $"Failed to open edit dialog: {ex.Message}");
        }
    }

    private async Task HandleReminderAction(QuestionnaireAssignment assignment)
    {
        isProcessingAction = true;
        StateHasChanged();

        try
        {
            // Show confirmation for sending reminder
            var confirmed = await DialogService.Confirm(
                $"Send a reminder notification to {assignment.EmployeeName}?",
                "Send Reminder",
                new ConfirmOptions { OkButtonText = "Send", CancelButtonText = "Cancel" });

            if (confirmed == true)
            {
                // TODO: Implement actual reminder API call
                await Task.Delay(1000); // Simulate API call

                NotificationService.Notify(NotificationSeverity.Success,
                    "Reminder Sent",
                    $"Reminder notification sent successfully to {assignment.EmployeeName}",
                    duration: 5000);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error",
                $"Failed to send reminder: {ex.Message}");
        }
        finally
        {
            isProcessingAction = false;
            StateHasChanged();
        }
    }

    private async Task HandleCancelAction(QuestionnaireAssignment assignment)
    {
        isProcessingAction = true;
        StateHasChanged();

        try
        {
            // Show confirmation dialog for destructive action
            var options = new ConfirmOptions
            {
                OkButtonText = "Cancel Assignment",
                CancelButtonText = "Keep Assignment"
            };

            var confirmed = await DialogService.Confirm(
                $"Are you sure you want to cancel the assignment for {assignment.EmployeeName}? This action cannot be undone.",
                "Cancel Assignment",
                options);

            if (confirmed == true)
            {
                // TODO: Call actual API to update assignment status
                await Task.Delay(1000); // Simulate API call

                // Note: Cancelling assignments needs to be implemented with proper workflow state transitions
                NotificationService.Notify(NotificationSeverity.Warning,
                    "Not Implemented",
                    "Assignment cancellation will be implemented with proper workflow state management",
                    duration: 5000);
                FilterAssignments();
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error",
                $"Failed to cancel assignment: {ex.Message}");
        }
        finally
        {
            isProcessingAction = false;
            StateHasChanged();
        }
    }

    private async Task SaveAssignmentChanges(QuestionnaireAssignment assignment, EditAssignmentDialog.EditAssignmentModel editModel)
    {
        isProcessingAction = true;
        StateHasChanged();

        try
        {
            // Handle employee changes - create new assignments for additional employees
            if (editModel.SelectedEmployeeIds.Count > 1)
            {
                var newEmployeeGuids = editModel.SelectedEmployeeIds.Select(Guid.Parse).Where(id => id != assignment.EmployeeId).ToList();

                if (newEmployeeGuids.Any())
                {
                    // Get the selected employees with full data
                    var newEmployees = allEmployees.Where(e => newEmployeeGuids.Contains(e.Id)).ToList();

                    // Create additional assignments for new employees
                    var newAssignments = await AssignmentService.CreateAssignmentsAsync(
                        assignment.TemplateId,
                        newEmployees,
                        editModel.DueDate,
                        editModel.Notes
                    );

                    if (newAssignments.Any())
                    {
                        assignments.AddRange(newAssignments);

                        NotificationService.Notify(NotificationSeverity.Info,
                            "Additional Assignments Created",
                            $"Created {newAssignments.Count} additional assignments for other selected employees",
                            duration: 5000);
                    }
                }
            }

            // Update the original assignment
            // TODO: Implement actual API call to update assignment
            await Task.Delay(1000); // Simulate API call

            // Update the local assignment object
            assignment.WorkflowState = editModel.WorkflowState;
            assignment.DueDate = editModel.DueDate;
            assignment.Notes = editModel.Notes;
            assignment.AssignedBy = editModel.AssignedBy;

            // Refresh the filtered assignments
            FilterAssignments();

            var totalAssignments = editModel.SelectedEmployeeIds.Count;
            var message = totalAssignments > 1
                ? $"Assignment updated and {totalAssignments - 1} additional assignments created"
                : $"Assignment for {assignment.EmployeeName} has been updated successfully";

            NotificationService.Notify(NotificationSeverity.Success,
                "Assignment Updated",
                message,
                duration: 5000);

            DialogService.Close();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error",
                $"Failed to update assignment: {ex.Message}");
        }
        finally
        {
            isProcessingAction = false;
            StateHasChanged();
        }
    }

    private async Task HandleAssignToMoreAction(QuestionnaireAssignment assignment)
    {
        try
        {
            // Close the current details dialog first
            DialogService.Close();

            // Open the bulk assignment dialog with the same questionnaire pre-selected
            var questionnaire = allQuestionnaires.FirstOrDefault(q => q.Id == assignment.TemplateId);

            if (questionnaire != null)
            {
                // TODO: Open a bulk assignment dialog with the questionnaire pre-selected
                // For now, show a notification
                NotificationService.Notify(NotificationSeverity.Info,
                    "Assign to More Employees",
                    $"Bulk assignment feature will open with '{questionnaire.Name}' pre-selected");

                // You can implement a BulkAssignmentDialog here similar to the existing ones
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error",
                $"Failed to open bulk assignment: {ex.Message}");
        }
    }

    private string GetEmployeeInitials(string name)
    {
        var names = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (names.Length >= 2)
        {
            return $"{names[0][0]}{names[1][0]}".ToUpper();
        }
        return names.Length > 0 ? names[0][0].ToString().ToUpper() : "?";
    }

    // Helper classes
    public class StatusOption
    {
        public StatusOption(string text, WorkflowState? value)
        {
            Text = text;
            Value = value;
        }
        public string Text { get; set; }
        public WorkflowState? Value { get; set; }
    }

}