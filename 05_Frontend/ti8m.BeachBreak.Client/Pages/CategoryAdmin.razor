@page "/admin/categories"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components
@using ti8m.BeachBreak.Client.Components.Shared
@inject ICategoryApiService CategoryService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inherits OptimizedComponentBase

<PageTitle>Category Administration</PageTitle>

<div class="container-fluid">
    <RadzenCard Class="p-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <RadzenText TextStyle="TextStyle.H3" Class="text-primary">
                    <RadzenIcon Icon="category" Class="me-2" />
                    Category Administration
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Subtitle1" Class="text-muted">
                    Manage questionnaire categories
                </RadzenText>
            </div>
            <div class="d-flex gap-2">
                <RadzenButton Text="Add New Category"
                             ButtonStyle="ButtonStyle.Primary"
                             Icon="add"
                             Click="@ShowAddCategoryDialog" />
            </div>
        </div>

        <div class="mb-3 d-flex justify-content-between">
            <RadzenTextBox @bind-Value="@searchText"
                          Placeholder="Search categories..."
                          @oninput="@OnSearchTextChanged" />
            <RadzenToggleButton @bind-Value="@showInactiveCategories"
                               Text="Show Inactive"
                               Change="@LoadCategories" />
        </div>

        <RadzenDataGrid @ref="categoriesGrid" Data="@filteredCategories" TItem="Category"
                       AllowFiltering="true" AllowColumnResize="true" AllowSorting="true"
                       EditMode="DataGridEditMode.Single" AllowAlternatingRows="false">
            <Columns>
                <RadzenDataGridColumn TItem="Category" Property="NameEn" Title="Name EN" Width="200px">
                    <Template Context="category">
                        <RadzenText TextStyle="TextStyle.Body1">@category.NameEn</RadzenText>
                    </Template>
                    <EditTemplate Context="category">
                        <RadzenTextBox @bind-Value="category.NameEn" Class="w-100" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Category" Property="NameDe" Title="Name DE" Width="200px">
                    <Template Context="category">
                        <RadzenText TextStyle="TextStyle.Body1">@category.NameDe</RadzenText>
                    </Template>
                    <EditTemplate Context="category">
                        <RadzenTextBox @bind-Value="category.NameDe" Class="w-100" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Category" Property="DescriptionEn" Title="Description EN" Width="250px">
                    <Template Context="category">
                        <RadzenText TextStyle="TextStyle.Body2">@category.DescriptionEn</RadzenText>
                    </Template>
                    <EditTemplate Context="category">
                        <RadzenTextArea @bind-Value="category.DescriptionEn" Rows="2" Class="w-100" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Category" Property="DescriptionDe" Title="Description DE" Width="250px">
                    <Template Context="category">
                        <RadzenText TextStyle="TextStyle.Body2">@category.DescriptionDe</RadzenText>
                    </Template>
                    <EditTemplate Context="category">
                        <RadzenTextArea @bind-Value="category.DescriptionDe" Rows="2" Class="w-100" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Category" Property="SortOrder" Title="Sort Order" Width="120px">
                    <Template Context="category">
                        <RadzenBadge Text="@category.SortOrder.ToString()" Variant="Variant.Outlined" />
                    </Template>
                    <EditTemplate Context="category">
                        <RadzenNumeric @bind-Value="category.SortOrder" TValue="int" Class="w-100" Min="0" Max="1000" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Category" Property="IsActive" Title="Status" Width="120px">
                    <Template Context="category">
                        @if (category.IsActive)
                        {
                            <RadzenBadge Text="Active" BadgeStyle="BadgeStyle.Success" />
                        }
                        else
                        {
                            <RadzenBadge Text="Inactive" BadgeStyle="BadgeStyle.Secondary" />
                        }
                    </Template>
                    <EditTemplate Context="category">
                        <RadzenSwitch @bind-Value="category.IsActive" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Category" Property="CreatedDate" Title="Created" Width="150px">
                    <Template Context="category">
                        <RadzenText TextStyle="TextStyle.Caption">@category.CreatedDate.ToString("MMM dd, yyyy")</RadzenText>
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Category" Filterable="false" Sortable="false" Width="180px" Title="Actions">
                    <Template Context="category">
                        <div class="d-flex gap-1">
                            <RadzenButton ButtonStyle="ButtonStyle.Light"
                                         Icon="edit"
                                         Size="ButtonSize.ExtraSmall"
                                         Click="@(() => EditRow(category))"
                                         Tooltip="Edit Category" />
                            <RadzenButton ButtonStyle="ButtonStyle.Danger"
                                         Icon="delete"
                                         Size="ButtonSize.ExtraSmall"
                                         Click="@(() => DeleteCategory(category))"
                                         Tooltip="Delete Category" />
                        </div>
                    </Template>
                    <EditTemplate Context="category">
                        <div class="d-flex gap-1">
                            <RadzenButton ButtonStyle="ButtonStyle.Success"
                                         Icon="save"
                                         Size="ButtonSize.ExtraSmall"
                                         Click="@(() => SaveRow(category))"
                                         Tooltip="Save Changes" />
                            <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                         Icon="cancel"
                                         Size="ButtonSize.ExtraSmall"
                                         Click="@(() => CancelEdit(category))"
                                         Tooltip="Cancel Edit" />
                        </div>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenCard>
</div>

@code {

    private List<Category> categories = new();
    private List<Category> filteredCategories = new();
    private RadzenDataGrid<Category>? categoriesGrid;
    private string searchText = "";
    private bool showInactiveCategories = false;
    private Category? categoryBeingEdited;

    protected override async Task OnInitializedAsync()
    {
        await ExecuteSafelyAsync(async () =>
        {
            await LoadCategories();
        }, "InitializeCategoryAdmin");
    }

    protected override bool HasStateChanged()
    {
        return HasParameterChanged(nameof(categories), categories.Count) ||
               HasParameterChanged(nameof(searchText), searchText) ||
               HasParameterChanged(nameof(showInactiveCategories), showInactiveCategories);
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await CategoryService.GetAllCategoriesAsync(showInactiveCategories);
            FilterCategories();
            NotifyStateChanged();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to load categories: {ex.Message}");
        }
    }

    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";
        FilterCategories();
    }

    private void FilterCategories()
    {
        filteredCategories = categories
            .Where(c => string.IsNullOrEmpty(searchText) ||
                       c.NameEn.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                       c.NameDe.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                       c.DescriptionEn.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                       c.DescriptionDe.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .OrderBy(c => c.SortOrder)
            .ThenBy(c => c.NameEn)
            .ToList();

        InvokeAsync(StateHasChanged);
    }

    private async Task ShowAddCategoryDialog()
    {
        var newCategory = new Category
        {
            Id = Guid.NewGuid(),
            NameEn = "New Category",
            NameDe = "Neue Kategorie",
            DescriptionEn = "",
            DescriptionDe = "",
            IsActive = true,
            SortOrder = categories.Count > 0 ? categories.Max(c => c.SortOrder) + 10 : 10,
            CreatedDate = DateTime.Now
        };

        // Add to local collections without API call
        categories.Add(newCategory);
        FilterCategories();

        // Immediately put the new category in edit mode
        await EditRow(newCategory);
    }

    private async Task EditRow(Category category)
    {
        // Store original values for cancel functionality
        categoryBeingEdited = new Category
        {
            Id = category.Id,
            NameEn = category.NameEn,
            NameDe = category.NameDe,
            DescriptionEn = category.DescriptionEn,
            DescriptionDe = category.DescriptionDe,
            IsActive = category.IsActive,
            SortOrder = category.SortOrder,
            CreatedDate = category.CreatedDate,
            LastModified = category.LastModified
        };

        categoriesGrid!.EditRow(category);
        await Task.CompletedTask;
    }

    private async Task SaveRow(Category category)
    {
        try
        {
            category.LastModified = DateTime.Now;

            // Check if this is a new category (not yet persisted to database)
            bool isNewCategory = categoryBeingEdited?.CreatedDate == category.CreatedDate &&
                                categoryBeingEdited?.Id == category.Id &&
                                !categories.Any(c => c.Id == category.Id && c != category);

            if (isNewCategory)
            {
                // Create new category
                await CategoryService.CreateCategoryAsync(category);
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Category created successfully");

                // Reload categories to get the actual data from API
                await LoadCategories();
            }
            else
            {
                // Update existing category
                await CategoryService.UpdateCategoryAsync(category);
                NotificationService.Notify(NotificationSeverity.Success, "Success", "Category updated successfully");
                await categoriesGrid!.UpdateRow(category);
            }

            categoryBeingEdited = null;
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to save category: {ex.Message}");
        }
    }

    private async Task CancelEdit(Category category)
    {
        if (categoryBeingEdited != null)
        {
            // Check if this is a new category that was just added to UI
            bool isNewCategory = categoryBeingEdited.CreatedDate == category.CreatedDate &&
                                categoryBeingEdited.Id == category.Id &&
                                categories.Contains(category);

            if (isNewCategory)
            {
                // Remove the new category from local collections
                categories.Remove(category);
                FilterCategories();
                categoriesGrid!.CancelEditRow(category);
            }
            else
            {
                // Restore original values for existing categories
                category.NameEn = categoryBeingEdited.NameEn;
                category.NameDe = categoryBeingEdited.NameDe;
                category.DescriptionEn = categoryBeingEdited.DescriptionEn;
                category.DescriptionDe = categoryBeingEdited.DescriptionDe;
                category.IsActive = categoryBeingEdited.IsActive;
                category.SortOrder = categoryBeingEdited.SortOrder;
                categoriesGrid!.CancelEditRow(category);
            }
        }

        categoryBeingEdited = null;
        await Task.CompletedTask;
    }

    private async Task DeleteCategory(Category category)
    {
        var result = await DialogService.Confirm($"Are you sure you want to delete the category '{category.NameEn}'?",
            "Delete Category", new ConfirmOptions() { OkButtonText = "Delete", CancelButtonText = "Cancel" });

        if (result == true)
        {
            try
            {
                var success = await CategoryService.DeleteCategoryAsync(category.Id);
                if (success)
                {
                    NotificationService.Notify(NotificationSeverity.Success, "Success", "Category deleted successfully");
                    await LoadCategories();
                }
                else
                {
                    NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to delete category");
                }
            }
            catch (Exception ex)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to delete category: {ex.Message}");
            }
        }
    }
}