@page "/my-questionnaires/{TemplateId:guid}"
@page "/test-tabs"
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Components
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services

<PageTitle>@(template?.Name ?? "Questionnaire")</PageTitle>

<div class="tab-questionnaire-container">
    <div style="background: lime; padding: 15px; margin-bottom: 20px; border: 3px solid blue; font-weight: bold; font-size: 20px; text-align: center;">
        🔥 DEBUG: TAB QUESTIONNAIRE COMPONENT LOADED! Template ID: @TemplateId 🔥
    </div>

    @if (template == null)
    {
        <div class="loading-state">
            <div class="loading-spinner"></div>
            <p>Loading questionnaire...</p>
            <p><small>Template ID: @TemplateId</small></p>
        </div>
    }
    else
    {
        <div class="questionnaire-card">
            <!-- Debug Info -->
            <div style="background: yellow; padding: 10px; margin-bottom: 20px; border-radius: 4px; border: 3px solid red; font-weight: bold; font-size: 16px;">
                <small>
                    <strong>Debug Info:</strong><br/>
                    Template: @template.Name<br/>
                    Sections Count: @template.Sections.Count<br/>
                    Assignment ID: @assignmentId<br/>
                    Current Section Index: @currentSectionIndex
                </small>
            </div>

            <!-- Header -->
            <header class="questionnaire-header">
                <h1 class="questionnaire-title">@template.Name</h1>
                <div class="overall-progress">
                    <span class="progress-text">@GetOverallProgress()% Complete</span>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: @GetOverallProgress()%"></div>
                    </div>
                </div>
            </header>

            <!-- Tab Navigation -->
            <nav class="tab-navigation">
                @if (template.Sections.Count == 0)
                {
                    <div style="padding: 20px; text-align: center; color: #666;">
                        No sections found in this questionnaire template.
                    </div>
                }
                else
                {
                    @for (int i = 0; i < template.Sections.Count; i++)
                    {
                        var section = template.Sections.OrderBy(s => s.Order).ElementAt(i);
                        var isActive = currentSectionIndex == i;
                        var isCompleted = IsSectionCompleted(section.Id);
                        var sectionIcon = GetSectionIcon(section, i);

                        <button class="tab-item @(isActive ? "active" : "") @(isCompleted ? "completed" : "")"
                                @onclick="@(() => SetActiveSection(i))">
                            <span class="tab-icon">@sectionIcon</span>
                            <span class="tab-title">@(section.Title)</span>
                            <span class="tab-status">@GetTabStatus(isCompleted, isActive)</span>
                        </button>
                    }
                }
            </nav>

            <!-- Active Section Content -->
            @if (currentSection != null)
            {
                <div class="section-content @GetSectionClass(currentSectionIndex)">
                    <div class="section-header">
                        <h2 class="section-title">
                            <span class="section-icon">@GetSectionIcon(currentSection, currentSectionIndex)</span>
                            @currentSection.Title
                        </h2>
                        <p class="section-description">@currentSection.Description</p>
                    </div>

                    <!-- Questions for current section -->
                    @foreach (var question in currentSection.Questions.OrderBy(q => q.Order))
                    {
                        <div class="question-container @GetQuestionTypeClass(question.Type)">
                            @RenderTabQuestion(question)
                        </div>
                    }

                    <!-- Section Actions -->
                    <div class="section-actions">
                        <button class="btn-secondary" @onclick="SaveProgress">
                            💾 Save Progress
                        </button>

                        <div class="primary-actions">
                            @if (currentSectionIndex < template.Sections.Count - 1)
                            {
                                <button class="btn-primary" @onclick="NextSection" disabled="@(!CanProceedFromCurrentSection())">
                                    Next Section →
                                </button>
                            }
                            else
                            {
                                <button class="btn-submit" @onclick="SubmitQuestionnaire" disabled="@(!CanSubmit())">
                                    🚀 Submit Review
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .tab-questionnaire-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 20px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
        line-height: 1.6;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
    }

    .questionnaire-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .questionnaire-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        text-align: center;
    }

    .questionnaire-title {
        font-size: 24px;
        font-weight: 600;
        margin: 0 0 20px 0;
    }

    .overall-progress {
        max-width: 400px;
        margin: 0 auto;
    }

    .progress-text {
        font-size: 14px;
        margin-bottom: 8px;
        display: block;
        opacity: 0.9;
    }

    .progress-bar {
        height: 6px;
        background: rgba(255, 255, 255, 0.3);
        border-radius: 3px;
        overflow: hidden;
    }

    .progress-fill {
        height: 100%;
        background: #4ade80;
        border-radius: 3px;
        transition: width 0.3s ease;
    }

    /* Tab Navigation */
    .tab-navigation {
        display: flex;
        background: #f8fafc;
        border-bottom: 1px solid #e2e8f0;
    }

    .tab-item {
        flex: 1;
        padding: 20px;
        border: none;
        background: transparent;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 8px;
        position: relative;
    }

    .tab-item:hover {
        background: #f1f5f9;
    }

    .tab-item.active {
        background: white;
        border-bottom: 3px solid #3b82f6;
    }

    .tab-item.completed {
        background: #f0fdf4;
    }

    .tab-item.completed .tab-status {
        color: #059669;
    }

    .tab-icon {
        font-size: 24px;
        margin-bottom: 4px;
    }

    .tab-title {
        font-weight: 500;
        font-size: 14px;
        text-align: center;
        color: #374151;
    }

    .tab-status {
        font-size: 12px;
        color: #6b7280;
        font-weight: 500;
    }

    /* Section Content */
    .section-content {
        padding: 40px;
        min-height: 400px;
    }

    .section-content.rating-section {
        background: linear-gradient(135deg, #fef7ff 0%, #fae8ff 100%);
    }

    .section-content.text-section {
        background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
    }

    .section-content.goal-section {
        background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
    }

    .section-header {
        margin-bottom: 30px;
        text-align: center;
    }

    .section-title {
        font-size: 22px;
        font-weight: 600;
        color: #1f2937;
        margin: 0 0 12px 0;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
    }

    .section-icon {
        font-size: 28px;
    }

    .section-description {
        color: #6b7280;
        max-width: 600px;
        margin: 0 auto;
    }

    /* Question Containers */
    .question-container {
        background: white;
        border-radius: 12px;
        padding: 30px;
        margin-bottom: 24px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        border-left: 4px solid #e5e7eb;
    }

    .question-container.rating-question {
        border-left-color: #8b5cf6;
        background: linear-gradient(135deg, #faf5ff 0%, white 100%);
    }

    .question-container.text-question {
        border-left-color: #06b6d4;
        background: linear-gradient(135deg, #f0f9ff 0%, white 100%);
    }

    .question-container.goal-question {
        border-left-color: #10b981;
        background: linear-gradient(135deg, #f0fdf4 0%, white 100%);
    }

    .question-title {
        font-size: 18px;
        font-weight: 600;
        color: #1f2937;
        margin: 0 0 8px 0;
    }

    .question-description {
        color: #6b7280;
        margin-bottom: 20px;
    }

    /* Rating Questions */
    .star-rating {
        display: flex;
        gap: 8px;
        justify-content: center;
        margin: 20px 0;
    }

    .star-rating .star {
        font-size: 32px;
        color: #d1d5db;
        cursor: pointer;
        transition: all 0.2s;
        user-select: none;
    }

    .star-rating .star:hover,
    .star-rating .star.selected {
        color: #fbbf24;
        transform: scale(1.1);
    }

    .rating-feedback {
        text-align: center;
        font-size: 16px;
        font-weight: 500;
        color: #7c3aed;
        margin: 16px 0;
        min-height: 24px;
    }

    .comment-area {
        margin-top: 24px;
    }

    .comment-textarea {
        width: 100%;
        min-height: 100px;
        padding: 16px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-family: inherit;
        font-size: 14px;
        line-height: 1.5;
        resize: vertical;
        transition: border-color 0.2s;
    }

    .comment-textarea:focus {
        outline: none;
        border-color: #8b5cf6;
        box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
    }

    /* Text Questions */
    .text-question-area {
        margin-top: 20px;
    }

    .text-question-input {
        width: 100%;
        min-height: 120px;
        padding: 16px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-family: inherit;
        font-size: 16px;
        line-height: 1.6;
        resize: vertical;
        transition: border-color 0.2s;
    }

    .text-question-input:focus {
        outline: none;
        border-color: #06b6d4;
        box-shadow: 0 0 0 3px rgba(6, 182, 212, 0.1);
    }

    /* Goal Questions */
    .goal-form {
        display: grid;
        gap: 20px;
        margin-top: 20px;
    }

    .goal-field {
        display: grid;
        gap: 8px;
    }

    .goal-label {
        font-weight: 500;
        color: #374151;
    }

    .goal-input, .goal-textarea {
        padding: 12px;
        border: 2px solid #e5e7eb;
        border-radius: 6px;
        font-size: 14px;
        transition: border-color 0.2s;
    }

    .goal-input:focus, .goal-textarea:focus {
        outline: none;
        border-color: #10b981;
        box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
    }

    .goal-textarea {
        min-height: 80px;
        resize: vertical;
        font-family: inherit;
    }

    .percentage-group {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .percentage-input {
        width: 120px;
    }

    .percentage-display {
        font-weight: 600;
        color: #10b981;
        font-size: 18px;
    }

    /* Section Actions */
    .section-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 40px;
        padding-top: 20px;
        border-top: 1px solid #e5e7eb;
    }

    .primary-actions {
        display: flex;
        gap: 12px;
    }

    .btn-primary, .btn-secondary, .btn-submit {
        padding: 12px 24px;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        border: none;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn-primary {
        background: #3b82f6;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background: #2563eb;
    }

    .btn-submit {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
    }

    .btn-submit:hover:not(:disabled) {
        background: linear-gradient(135deg, #059669 0%, #047857 100%);
    }

    .btn-secondary {
        background: #f3f4f6;
        color: #374151;
        border: 1px solid #d1d5db;
    }

    .btn-secondary:hover {
        background: #e5e7eb;
    }

    .btn-primary:disabled, .btn-submit:disabled {
        background: #9ca3af;
        cursor: not-allowed;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .tab-questionnaire-container {
            padding: 12px;
        }

        .questionnaire-header {
            padding: 20px;
        }

        .tab-navigation {
            flex-direction: column;
        }

        .tab-item {
            flex-direction: row;
            justify-content: center;
            padding: 16px;
        }

        .section-content {
            padding: 20px;
        }

        .section-actions {
            flex-direction: column;
            gap: 16px;
        }

        .primary-actions {
            width: 100%;
            justify-content: space-between;
        }
    }
</style>

@code {
    [Parameter] public Guid TemplateId { get; set; }
    private Guid? assignmentId;

    [Inject] protected DialogService DialogService { get; set; } = default!;
    [Inject] protected NotificationService NotificationService { get; set; } = default!;
    [Inject] protected NavigationManager NavigationManager { get; set; } = default!;
    [Inject] protected IQuestionnaireApiService QuestionnaireApiService { get; set; } = default!;
    [Inject] protected IEmployeeQuestionnaireService EmployeeQuestionnaireService { get; set; } = default!;
    [Inject] protected IAuthenticationService AuthenticationService { get; set; } = default!;

    private QuestionnaireTemplate? template;
    private QuestionnaireResponse response = new();
    private int currentSectionIndex = 0;
    private QuestionSection? currentSection => template?.Sections.OrderBy(s => s.Order).ElementAtOrDefault(currentSectionIndex);

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"TabQuestionnaire: Starting initialization for TemplateId: {TemplateId}");

        // If no TemplateId (test route), create sample data
        if (TemplateId == Guid.Empty)
        {
            CreateSampleTemplate();
            Console.WriteLine($"TabQuestionnaire: Created sample template with {template?.Sections.Count} sections");
            StateHasChanged();
            return;
        }

        // Try to load real template data
        await LoadTemplate();
        Console.WriteLine($"TabQuestionnaire: Template loaded. Template is null: {template == null}");

        // If template loading failed or template is empty, fall back to sample data
        if (template == null || template.Sections == null || template.Sections.Count == 0)
        {
            Console.WriteLine($"TabQuestionnaire: Real template unavailable, using sample data for demonstration");
            CreateSampleTemplate();
            StateHasChanged();
            return;
        }

        Console.WriteLine($"TabQuestionnaire: Template '{template.Name}' has {template.Sections.Count} sections");

        await LoadAssignmentForCurrentEmployee();
        Console.WriteLine($"TabQuestionnaire: Assignment loaded. AssignmentId: {assignmentId}");

        await LoadExistingResponse();
        InitializeResponse();
        UpdateProgress();

        Console.WriteLine($"TabQuestionnaire: Initialization complete. Current section index: {currentSectionIndex}");
        StateHasChanged(); // Force a re-render
    }

    private void CreateSampleTemplate()
    {
        template = new QuestionnaireTemplate
        {
            Id = Guid.NewGuid(),
            Name = "Sample Performance Review 2023",
            Description = "This is a sample questionnaire to demonstrate the tab-based design",
            Sections = new List<QuestionSection>
            {
                new QuestionSection
                {
                    Id = Guid.NewGuid(),
                    Title = "Professional Knowledge",
                    Description = "Assessment of your professional expertise and knowledge",
                    Order = 1,
                    Questions = new List<QuestionItem>
                    {
                        new QuestionItem
                        {
                            Id = Guid.NewGuid(),
                            Title = "Technical Skills Assessment",
                            Description = "Rate your satisfaction with your technical skills development",
                            Type = QuestionType.SelfAssessment,
                            Order = 1,
                            IsRequired = true
                        }
                    }
                },
                new QuestionSection
                {
                    Id = Guid.NewGuid(),
                    Title = "Career Development",
                    Description = "Reflection on your career growth and development goals",
                    Order = 2,
                    Questions = new List<QuestionItem>
                    {
                        new QuestionItem
                        {
                            Id = Guid.NewGuid(),
                            Title = "Career Development Reflection",
                            Description = "Share your thoughts on your career development over the past year",
                            Type = QuestionType.TextQuestion,
                            Order = 1,
                            IsRequired = true
                        }
                    }
                },
                new QuestionSection
                {
                    Id = Guid.NewGuid(),
                    Title = "Goal Achievement",
                    Description = "Review of your 2023 goals and achievement levels",
                    Order = 3,
                    Questions = new List<QuestionItem>
                    {
                        new QuestionItem
                        {
                            Id = Guid.NewGuid(),
                            Title = "2023 Goals Review",
                            Description = "Review your main goals for 2023 and assess your achievement level",
                            Type = QuestionType.GoalAchievement,
                            Order = 1,
                            IsRequired = true
                        }
                    }
                }
            }
        };

        // Initialize response
        response = new QuestionnaireResponse
        {
            TemplateId = template.Id,
            AssignmentId = Guid.NewGuid(),
            EmployeeId = "test-employee-id",
            Status = ResponseStatus.InProgress
        };

        foreach (var section in template.Sections)
        {
            response.SectionResponses[section.Id] = new SectionResponse
            {
                SectionId = section.Id,
                QuestionResponses = new Dictionary<Guid, QuestionResponse>()
            };

            foreach (var question in section.Questions)
            {
                response.SectionResponses[section.Id].QuestionResponses[question.Id] = new QuestionResponse
                {
                    QuestionId = question.Id,
                    QuestionType = question.Type
                };
            }
        }
    }

    private void SetActiveSection(int sectionIndex)
    {
        currentSectionIndex = sectionIndex;
        StateHasChanged();
    }

    private void NextSection()
    {
        if (CanProceedFromCurrentSection() && currentSectionIndex < template!.Sections.Count - 1)
        {
            currentSectionIndex++;
            StateHasChanged();
        }
    }

    private string GetSectionIcon(QuestionSection section, int index)
    {
        return index switch
        {
            0 => "💼", // Professional Knowledge
            1 => "📈", // Career Development
            2 => "🎯", // Goal Achievement
            _ => "📝"
        };
    }

    private string GetTabStatus(bool isCompleted, bool isActive)
    {
        if (isCompleted) return "✓ Complete";
        if (isActive) return "→ Active";
        return "○ Pending";
    }

    private string GetSectionClass(int sectionIndex)
    {
        return sectionIndex switch
        {
            0 => "rating-section",
            1 => "text-section",
            2 => "goal-section",
            _ => ""
        };
    }

    private string GetQuestionTypeClass(QuestionType type)
    {
        return type switch
        {
            QuestionType.SelfAssessment => "rating-question",
            QuestionType.TextQuestion => "text-question",
            QuestionType.GoalAchievement => "goal-question",
            _ => ""
        };
    }

    private int GetOverallProgress()
    {
        if (template == null) return 0;

        var completedSections = template.Sections.Count(s => IsSectionCompleted(s.Id));
        return template.Sections.Count > 0 ? (int)((completedSections * 100.0) / template.Sections.Count) : 0;
    }

    private RenderFragment RenderTabQuestion(QuestionItem question)
    {
        return question.Type switch
        {
            QuestionType.SelfAssessment => RenderTabRatingQuestion(question),
            QuestionType.TextQuestion => RenderTabTextQuestion(question),
            QuestionType.GoalAchievement => RenderTabGoalQuestion(question),
            _ => @<div class="unsupported-question">Question type @question.Type not supported</div>
        };
    }

    private RenderFragment RenderTabRatingQuestion(QuestionItem question)
    {
        var competencies = GetCompetenciesForQuestion(question);
        if (!competencies.Any()) return @<div></div>;

        return @<div>
            @foreach (var competency in competencies)
            {
                var currentRating = GetCompetencyRating(question.Id, competency.Key);
                var currentComment = GetCompetencyComment(question.Id, competency.Key);

                <div class="competency-item" style="margin-bottom: 40px; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px;">
                    <h3 class="question-title">@competency.Title</h3>
                    <p class="question-description">@competency.Description</p>

                    <div class="star-rating">
                        @for (int i = 1; i <= 4; i++)
                        {
                            var rating = i;
                            var isSelected = currentRating >= i;
                            <span class="star @(isSelected ? "selected" : "")"
                                  @onclick="@(() => SetCompetencyRating(question.Id, competency.Key, rating))">★</span>
                        }
                    </div>

                    <div class="rating-feedback">
                        @GetRatingText(currentRating)
                    </div>

                    <div class="comment-area">
                        <textarea class="comment-textarea"
                                  placeholder="Optional: Share your thoughts about this assessment..."
                                  value="@currentComment"
                                  @oninput="@((ChangeEventArgs e) => SetCompetencyComment(question.Id, competency.Key, e.Value?.ToString() ?? ""))"
                                  rows="3"></textarea>
                    </div>
                </div>
            }
        </div>;
    }

    private RenderFragment RenderTabTextQuestion(QuestionItem question)
    {
        var response = GetQuestionResponse(question.Id);

        return @<div>
            <h3 class="question-title">@question.Title</h3>
            @if (!string.IsNullOrWhiteSpace(question.Description))
            {
                <p class="question-description">@question.Description</p>
            }

            <div class="text-question-area">
                <textarea class="text-question-input"
                          placeholder="Describe your thoughts, experiences, and reflections..."
                          value="@(response.TextValue ?? "")"
                          @oninput="@((ChangeEventArgs e) => UpdateQuestionResponseText(question.Id, e.Value?.ToString() ?? ""))"
                          rows="5"></textarea>
            </div>
        </div>;
    }

    private RenderFragment RenderTabGoalQuestion(QuestionItem question)
    {
        return @<div>
            <h3 class="question-title">@question.Title</h3>
            @if (!string.IsNullOrWhiteSpace(question.Description))
            {
                <p class="question-description">@question.Description</p>
            }

            <div class="goal-form">
                <div class="goal-field">
                    <label class="goal-label">Goal Description</label>
                    <textarea class="goal-textarea"
                              placeholder="Describe the goal that was set for 2023..."
                              value="@GetGoalDescription(question.Id)"
                              @oninput="@((ChangeEventArgs e) => SetGoalDescription(question.Id, e.Value?.ToString() ?? ""))"
                              rows="2"></textarea>
                </div>

                <div class="goal-field">
                    <label class="goal-label">Achievement Level</label>
                    <div class="percentage-group">
                        <input type="range"
                               class="goal-input percentage-input"
                               min="0"
                               max="100"
                               step="5"
                               value="@GetGoalAchievementPercentage(question.Id)"
                               @oninput="@((ChangeEventArgs e) => SetGoalAchievementPercentage(question.Id, int.TryParse(e.Value?.ToString(), out var val) ? val : 0))" />
                        <span class="percentage-display">@GetGoalAchievementPercentage(question.Id)%</span>
                    </div>
                </div>

                <div class="goal-field">
                    <label class="goal-label">Justification & Reflection</label>
                    <textarea class="goal-textarea"
                              placeholder="Explain your achievement level and provide reflection..."
                              value="@GetGoalJustification(question.Id)"
                              @oninput="@((ChangeEventArgs e) => SetGoalJustification(question.Id, e.Value?.ToString() ?? ""))"
                              rows="3"></textarea>
                </div>
            </div>
        </div>;
    }

    private string GetRatingText(int rating)
    {
        return rating switch
        {
            1 => "Not satisfied - Needs significant improvement",
            2 => "Somewhat satisfied - Room for improvement",
            3 => "Satisfied - Meets expectations",
            4 => "Very satisfied - Exceeds expectations",
            _ => "Click stars to rate your satisfaction level"
        };
    }

    // Data loading and response methods
    private async Task LoadTemplate()
    {
        try
        {
            template = await QuestionnaireApiService.GetTemplateByIdAsync(TemplateId);
            if (template == null)
            {
                Console.WriteLine($"TabQuestionnaire: Template not found for ID {TemplateId}");
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"TabQuestionnaire: Failed to load template: {ex.Message}");
            template = null;
        }
    }

    private async Task LoadAssignmentForCurrentEmployee()
    {
        try
        {
            var assignments = await EmployeeQuestionnaireService.GetMyAssignmentsAsync();
            var assignment = assignments.FirstOrDefault(a => a.TemplateId == TemplateId &&
                                                           (a.Status == AssignmentStatus.Assigned || a.Status == AssignmentStatus.InProgress));

            if (assignment != null)
            {
                assignmentId = assignment.Id;
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Warning, "Not Assigned", "This questionnaire has not been assigned to you.");
                NavigationManager.NavigateTo("/my-questionnaires");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to load assignment: {ex.Message}");
            NavigationManager.NavigateTo("/my-questionnaires");
        }
    }

    private async Task LoadExistingResponse()
    {
        if (!assignmentId.HasValue) return;

        try
        {
            var existingResponse = await EmployeeQuestionnaireService.GetMyResponseAsync(assignmentId.Value);
            if (existingResponse != null)
            {
                response = existingResponse;
                var completedSections = response.SectionResponses.Count(sr => sr.Value.IsCompleted);
                currentSectionIndex = Math.Min(completedSections, (template?.Sections.Count ?? 1) - 1);
            }
        }
        catch (HttpRequestException httpEx) when (httpEx.Message.Contains("404"))
        {
            // This is expected for new questionnaires - no existing response yet
            Console.WriteLine($"No existing response found for assignment {assignmentId} (this is normal for new questionnaires)");
        }
        catch (Exception ex)
        {
            // Log other unexpected errors
            Console.WriteLine($"Unexpected error loading existing response: {ex.Message}");
        }
    }

    private void InitializeResponse()
    {
        if (template == null) return;

        response = new QuestionnaireResponse
        {
            TemplateId = TemplateId,
            AssignmentId = assignmentId ?? Guid.Empty,
            EmployeeId = AuthenticationService.GetCurrentEmployeeId(),
            Status = ResponseStatus.InProgress
        };

        foreach (var section in template.Sections)
        {
            response.SectionResponses[section.Id] = new SectionResponse
            {
                SectionId = section.Id,
                QuestionResponses = new Dictionary<Guid, QuestionResponse>()
            };

            foreach (var question in section.Questions)
            {
                response.SectionResponses[section.Id].QuestionResponses[question.Id] = new QuestionResponse
                {
                    QuestionId = question.Id,
                    QuestionType = question.Type
                };
            }
        }
    }

    private void UpdateProgress()
    {
        if (template == null) return;

        var totalQuestions = template.Sections.SelectMany(s => s.Questions.Where(q => q.IsRequired)).Count();
        var answeredQuestions = 0;

        foreach (var section in template.Sections)
        {
            if (response.SectionResponses.TryGetValue(section.Id, out var sectionResponse))
            {
                answeredQuestions += section.Questions.Where(q => q.IsRequired).Count(q =>
                    sectionResponse.QuestionResponses.TryGetValue(q.Id, out var qr) &&
                    IsQuestionAnswered(q, qr));
            }
        }

        response.ProgressPercentage = totalQuestions > 0 ? (int)(answeredQuestions * 100.0 / totalQuestions) : 0;
    }

    private async Task SaveProgress()
    {
        if (!assignmentId.HasValue)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Cannot Save", "No assignment ID available");
            return;
        }

        try
        {
            await EmployeeQuestionnaireService.SaveMyResponseAsync(assignmentId.Value, response.SectionResponses);
            NotificationService.Notify(NotificationSeverity.Success, "Saved", "Your progress has been saved successfully");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Save Failed", $"Failed to save progress: {ex.Message}");
        }
    }

    private async Task SubmitQuestionnaire()
    {
        if (!CanSubmit())
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Incomplete", "Please complete all required questions");
            return;
        }

        if (!assignmentId.HasValue)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Cannot Submit", "No assignment ID available");
            return;
        }

        try
        {
            await EmployeeQuestionnaireService.SaveMyResponseAsync(assignmentId.Value, response.SectionResponses);
            var submittedResponse = await EmployeeQuestionnaireService.SubmitMyResponseAsync(assignmentId.Value);

            if (submittedResponse != null)
            {
                response = submittedResponse;
                NotificationService.Notify(NotificationSeverity.Success, "Submitted", "Questionnaire submitted successfully");
                NavigationManager.NavigateTo("/my-questionnaires");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Submission Failed", "Failed to submit questionnaire");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Submission Failed", $"Failed to submit questionnaire: {ex.Message}");
        }
    }

    private bool CanProceedFromCurrentSection()
    {
        if (currentSection == null) return false;

        var requiredQuestions = currentSection.Questions.Where(q => q.IsRequired);
        foreach (var question in requiredQuestions)
        {
            var questionResponse = GetQuestionResponse(question.Id);
            if (!IsQuestionAnswered(question, questionResponse))
            {
                return false;
            }
        }
        return true;
    }

    private bool CanSubmit()
    {
        if (template == null) return false;

        foreach (var section in template.Sections)
        {
            var requiredQuestions = section.Questions.Where(q => q.IsRequired);
            foreach (var question in requiredQuestions)
            {
                var questionResponse = GetQuestionResponse(question.Id);
                if (!IsQuestionAnswered(question, questionResponse))
                {
                    return false;
                }
            }
        }
        return true;
    }

    private bool IsSectionCompleted(Guid sectionId)
    {
        if (template == null) return false;

        var section = template.Sections.FirstOrDefault(s => s.Id == sectionId);
        if (section == null) return false;

        var requiredQuestions = section.Questions.Where(q => q.IsRequired);
        foreach (var question in requiredQuestions)
        {
            var questionResponse = GetQuestionResponse(question.Id);
            if (!IsQuestionAnswered(question, questionResponse))
            {
                return false;
            }
        }
        return true;
    }

    private bool IsQuestionAnswered(QuestionItem question, QuestionResponse questionResponse)
    {
        return question.Type switch
        {
            QuestionType.SelfAssessment => IsAllRequiredCompetenciesAnswered(question, questionResponse),
            QuestionType.TextQuestion => !string.IsNullOrWhiteSpace(questionResponse.TextValue),
            QuestionType.GoalAchievement => questionResponse.ComplexValue?.ContainsKey("Description") == true &&
                                          questionResponse.ComplexValue?.ContainsKey("AchievementPercentage") == true &&
                                          questionResponse.ComplexValue?.ContainsKey("Justification") == true,
            _ => false
        };
    }

    private bool IsAllRequiredCompetenciesAnswered(QuestionItem question, QuestionResponse questionResponse)
    {
        var competencies = GetCompetenciesForQuestion(question);
        var requiredCompetencies = competencies.Where(c => c.IsRequired);

        // If no required competencies, check if any are answered
        if (!requiredCompetencies.Any())
        {
            return competencies.Any(c =>
                questionResponse.ComplexValue?.ContainsKey($"rating_{c.Key}") == true &&
                Convert.ToInt32(questionResponse.ComplexValue[$"rating_{c.Key}"]) > 0);
        }

        // Check that all required competencies are answered
        return requiredCompetencies.All(c =>
            questionResponse.ComplexValue?.ContainsKey($"rating_{c.Key}") == true &&
            Convert.ToInt32(questionResponse.ComplexValue[$"rating_{c.Key}"]) > 0);
    }

    // Question response helpers
    private QuestionResponse GetQuestionResponse(Guid questionId)
    {
        if (currentSection == null) return new QuestionResponse { QuestionId = questionId };

        var sectionResponse = response.SectionResponses[currentSection.Id];
        return sectionResponse.QuestionResponses.TryGetValue(questionId, out var questionResponse)
            ? questionResponse
            : new QuestionResponse { QuestionId = questionId };
    }

    private List<CompetencyDefinition> GetCompetenciesForQuestion(QuestionItem question)
    {
        if (question.Configuration.ContainsKey("Competencies") &&
            question.Configuration["Competencies"] is List<CompetencyDefinition> competencies)
        {
            return competencies;
        }

        return new List<CompetencyDefinition>
        {
            new("professional_knowledge", "Professional Knowledge", "Assessment of your own expertise and professional knowledge in relation to your job responsibilities.", false)
        };
    }

    private int GetCompetencyRating(Guid questionId, string competencyKey)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue?.TryGetValue($"rating_{competencyKey}", out var value) == true)
        {
            return Convert.ToInt32(value);
        }
        return 0;
    }

    private string GetCompetencyComment(Guid questionId, string competencyKey)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue?.TryGetValue($"comment_{competencyKey}", out var value) == true)
        {
            return value.ToString() ?? "";
        }
        return "";
    }

    private void SetCompetencyRating(Guid questionId, string competencyKey, int value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue[$"rating_{competencyKey}"] = value;
        response.LastModified = DateTime.Now;
        UpdateProgress();
        StateHasChanged();
    }

    private void SetCompetencyComment(Guid questionId, string competencyKey, string value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue[$"comment_{competencyKey}"] = value ?? "";
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void UpdateQuestionResponseText(Guid questionId, string value)
    {
        var questionResponse = GetQuestionResponse(questionId);
        questionResponse.TextValue = value;
        questionResponse.LastModified = DateTime.Now;
        UpdateProgress();
    }

    // Goal question helpers
    private string GetGoalDescription(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("Description", out var value) == true ? value.ToString() ?? "" : "";
    }

    private int GetGoalAchievementPercentage(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("AchievementPercentage", out var value) == true ? Convert.ToInt32(value) : 0;
    }

    private string GetGoalJustification(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("Justification", out var value) == true ? value.ToString() ?? "" : "";
    }

    private void SetGoalDescription(Guid questionId, string value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue["Description"] = value ?? "";
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetGoalAchievementPercentage(Guid questionId, int value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue["AchievementPercentage"] = value;
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetGoalJustification(Guid questionId, string value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue["Justification"] = value ?? "";
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }
}