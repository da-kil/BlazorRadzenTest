@page "/admin/roles"
@using Microsoft.AspNetCore.Components.Authorization
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components.Shared
@inject IEmployeeApiService EmployeeService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inherits OptimizedComponentBase

<PageTitle>Role Management</PageTitle>

<AuthorizeView Policy="HR">
    <Authorized>
        <div class="container-fluid">
            <RadzenCard Class="p-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <RadzenText TextStyle="TextStyle.H3" Class="text-primary">
                    <RadzenIcon Icon="admin_panel_settings" Class="me-2" />
                    Application Role Management
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Subtitle1" Class="text-muted">
                    Manage employee application roles
                </RadzenText>
            </div>
        </div>

        <div class="mb-3 d-flex justify-content-between align-items-center gap-2">
            <RadzenTextBox @bind-Value="@searchText"
                          Placeholder="Search employees..."
                          @oninput="@OnSearchTextChanged"
                          Style="width: 300px;" />
        </div>

        <RadzenDataGrid @ref="employeesGrid"
                       Data="@filteredEmployees"
                       TItem="EmployeeDto"
                       AllowFiltering="true"
                       AllowColumnResize="true"
                       AllowSorting="true"
                       EditMode="DataGridEditMode.Single"
                       RowUpdate="@OnUpdateRow"
                       AllowAlternatingRows="false">
            <Columns>
                <RadzenDataGridColumn TItem="EmployeeDto" Property="FirstName" Title="First Name" Width="150px" Sortable="true" Filterable="true">
                    <Template Context="employee">
                        <RadzenText TextStyle="TextStyle.Body1">@employee.FirstName</RadzenText>
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="EmployeeDto" Property="LastName" Title="Last Name" Width="150px" Sortable="true" Filterable="true">
                    <Template Context="employee">
                        <RadzenText TextStyle="TextStyle.Body1">@employee.LastName</RadzenText>
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="EmployeeDto" Property="Role" Title="Job Role" Width="200px" Sortable="true" Filterable="true">
                    <Template Context="employee">
                        <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">@employee.Role</RadzenText>
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="EmployeeDto" Property="Organization" Title="Organization" Width="200px" Sortable="true" Filterable="true">
                    <Template Context="employee">
                        <RadzenText TextStyle="TextStyle.Body2">@employee.Organization</RadzenText>
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="EmployeeDto" Property="ApplicationRole" Title="Application Role" Width="180px" Sortable="true" Filterable="true">
                    <Template Context="employee">
                        @{
                            var badgeStyle = employee.ApplicationRole switch
                            {
                                ApplicationRole.Admin => BadgeStyle.Danger,
                                ApplicationRole.HRLead => BadgeStyle.Warning,
                                ApplicationRole.HR => BadgeStyle.Info,
                                ApplicationRole.TeamLead => BadgeStyle.Success,
                                _ => BadgeStyle.Light
                            };
                        }
                        <RadzenBadge Text="@employee.ApplicationRole.ToString()" BadgeStyle="@badgeStyle" />
                    </Template>
                    <EditTemplate Context="employee">
                        <RadzenDropDown @bind-Value="employee.ApplicationRole"
                                       Data="@GetAvailableRoles()"
                                       TValue="ApplicationRole"
                                       Class="w-100" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="EmployeeDto" Context="employee" Filterable="false" Sortable="false" Width="160px" TextAlign="TextAlign.Right">
                    <Template Context="employee">
                        <RadzenButton Icon="edit"
                                     ButtonStyle="ButtonStyle.Light"
                                     Variant="Variant.Flat"
                                     Size="ButtonSize.Small"
                                     Click="@(args => EditRow(employee))"
                                     @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="employee">
                        <RadzenButton Icon="check"
                                     ButtonStyle="ButtonStyle.Success"
                                     Variant="Variant.Flat"
                                     Size="ButtonSize.Small"
                                     Click="@((args) => SaveRow(employee))">
                        </RadzenButton>
                        <RadzenButton Icon="close"
                                     ButtonStyle="ButtonStyle.Light"
                                     Variant="Variant.Flat"
                                     Size="ButtonSize.Small"
                                     Click="@((args) => CancelEdit(employee))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenCard>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container-fluid">
            <RadzenCard Class="p-4">
                <div class="d-flex flex-column align-items-center justify-content-center" style="min-height: 400px;">
                    <RadzenIcon Icon="block" Style="font-size: 4rem; color: var(--rz-danger);" Class="mb-3" />
                    <RadzenText TextStyle="TextStyle.H4" Class="mb-2">Access Denied</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1" Class="text-muted text-center">
                        You do not have permission to access the Role Management page.
                        <br />
                        This page is restricted to administrators only.
                    </RadzenText>
                </div>
            </RadzenCard>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    RadzenDataGrid<EmployeeDto> employeesGrid = null!;
    List<EmployeeDto> employees = new();
    List<EmployeeDto> filteredEmployees = new();
    string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    async Task LoadEmployees()
    {
        try
        {
            employees = await EmployeeService.GetAllEmployeesAsync();
            employees = employees.Where(e => !e.IsDeleted).ToList();
            FilterEmployees();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to load employees: {ex.Message}",
                Duration = 4000
            });
        }
    }

    void OnSearchTextChanged(ChangeEventArgs args)
    {
        searchText = args.Value?.ToString() ?? string.Empty;
        FilterEmployees();
    }

    void FilterEmployees()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredEmployees = employees;
        }
        else
        {
            var search = searchText.ToLowerInvariant();
            filteredEmployees = employees.Where(e =>
                e.FirstName.ToLowerInvariant().Contains(search) ||
                e.LastName.ToLowerInvariant().Contains(search) ||
                e.Organization.ToLowerInvariant().Contains(search) ||
                e.Role.ToLowerInvariant().Contains(search)
            ).ToList();
        }
    }

    List<ApplicationRole> GetAvailableRoles()
    {
        // This would ideally check the current user's role and return appropriate options
        // For now, return all roles
        return Enum.GetValues<ApplicationRole>().ToList();
    }

    async Task EditRow(EmployeeDto employee)
    {
        await employeesGrid.EditRow(employee);
    }

    void CancelEdit(EmployeeDto employee)
    {
        employeesGrid.CancelEditRow(employee);
    }

    async Task SaveRow(EmployeeDto employee)
    {
        await employeesGrid.UpdateRow(employee);
    }

    async Task OnUpdateRow(EmployeeDto employee)
    {
        try
        {
            var success = await EmployeeService.ChangeApplicationRoleAsync(employee.Id, employee.ApplicationRole);

            if (success)
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Success",
                    Detail = $"Application role for {employee.FullName} updated to {employee.ApplicationRole}",
                    Duration = 4000
                });

                await LoadEmployees();
            }
            else
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Failed to update application role",
                    Duration = 4000
                });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to update role: {ex.Message}",
                Duration = 4000
            });
        }
    }
}
