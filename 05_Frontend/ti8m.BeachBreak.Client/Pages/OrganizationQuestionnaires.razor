@page "/organization/questionnaires"
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components.Shared
@using ti8m.BeachBreak.Client.Components.Dialogs
@inherits BasePageComponent

<PageTitle>Organization Questionnaires</PageTitle>

@if (configuration != null && dataService != null)
{
    <GenericQuestionnaireListPage Configuration="@configuration" DataService="@dataService" />
}
else if (isLoading)
{
    <div class="text-center p-5">
        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
        <RadzenText TextStyle="TextStyle.Body1" Class="text-muted mt-3">Loading organization data...</RadzenText>
    </div>
}

@code {
    private QuestionnairePageConfiguration? configuration;
    private IQuestionnaireDataService? dataService;

    private List<QuestionnaireAssignment> allAssignments = new();
    private List<EmployeeDto> allEmployees = new();
    private List<QuestionnaireTemplate> allTemplates = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
        SetupConfiguration();
    }

    private async Task LoadInitialData()
    {
        SetLoading(true);

        try
        {
            // Create the data service
            dataService = new HRQuestionnaireDataService(HRQuestionnaireService, QuestionnaireApiService);

            // Load data to setup configuration
            var assignmentsTask = HRQuestionnaireService.GetAllAssignmentsAsync();
            var employeesTask = HRQuestionnaireService.GetAllEmployeesAsync();
            var templatesTask = QuestionnaireApiService.GetAllTemplatesAsync();

            await Task.WhenAll(assignmentsTask, employeesTask, templatesTask);

            allAssignments = assignmentsTask.Result;
            allEmployees = employeesTask.Result;
            allTemplates = templatesTask.Result;
        }
        catch (Exception ex)
        {
            await HandleError(ex, "loading organization data");
        }
        finally
        {
            SetLoading(false);
        }
    }

    private void SetupConfiguration()
    {
        configuration = QuestionnairePageConfigurationFactory.CreateHRConfiguration(
            allAssignments,
            allEmployees,
            allTemplates);

        // Add custom action handlers
        var exportAction = configuration.Actions.FirstOrDefault(a => a.Id == "export");
        if (exportAction != null)
        {
            exportAction.OnClick = ExportOrganizationReport;
        }

        var analyticsAction = configuration.Actions.FirstOrDefault(a => a.Id == "analytics");
        if (analyticsAction != null)
        {
            analyticsAction.OnClick = OpenAnalyticsDashboard;
        }
    }

    private async Task ExportOrganizationReport()
    {
        ShowInfo("Organization report export functionality would be implemented here");
    }

    private async Task OpenAnalyticsDashboard()
    {
        ShowInfo("Analytics dashboard functionality would be implemented here");
    }
}