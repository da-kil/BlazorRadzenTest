@page "/my-questionnaires/{TemplateId:guid}"
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Components
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services

<PageTitle>@(template?.Name ?? "Questionnaire")</PageTitle>

<div class="container-fluid">
    @if (template == null)
    {
        <div class="text-center p-5">
            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Class="mb-3" />
            <RadzenText TextStyle="TextStyle.Body1" Class="text-muted">Loading questionnaire...</RadzenText>
        </div>
    }
    else
    {
        <RadzenCard Class="p-4">
            <div class="text-center mb-4">
                <RadzenText TextStyle="TextStyle.H3" Class="text-primary">
                    <RadzenIcon Icon="quiz" Class="me-2" />
                    @template.Name
                </RadzenText>
                @if (!string.IsNullOrWhiteSpace(template.Description))
                {
                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="text-muted">
                        @template.Description
                    </RadzenText>
                }
            </div>

            @if (template.Settings.ShowProgressBar)
            {
                <div class="progress-section mb-4">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">
                            Progress: @response.ProgressPercentage%
                        </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">
                            Section @(currentSectionIndex + 1) of @template.Sections.Count
                        </RadzenText>
                    </div>
                    <RadzenProgressBar Value="@response.ProgressPercentage" Max="100" ProgressBarStyle="ProgressBarStyle.Primary" />
                </div>
            }

            <RadzenSteps Value="@currentSectionIndex" Change="@OnSectionChanged" Class="mb-4">
                @for (int i = 0; i < template.Sections.Count; i++)
                {
                    var section = template.Sections[i];
                    var isCompleted = IsSectionCompleted(section.Id);
                    var sectionTitle = section.Title;
                    <RadzenStepsItem Text="@sectionTitle" Icon="@(isCompleted ? "check_circle" : null)" />
                }
            </RadzenSteps>

            <div class="questionnaire-content">
                @if (currentSection != null)
                {
                    <RadzenCard Class="section-card p-4">
                        <RadzenText TextStyle="TextStyle.H4" Class="text-primary mb-3">
                            @currentSection.Title
                        </RadzenText>
                        
                        @if (!string.IsNullOrWhiteSpace(currentSection.Description))
                        {
                            <RadzenText TextStyle="TextStyle.Body1" Class="text-muted mb-4">
                                @currentSection.Description
                            </RadzenText>
                        }

                        <div class="questions-container">
                            @foreach (var question in currentSection.Questions.OrderBy(q => q.Order))
                            {
                                <div class="question-wrapper mb-4">
                                    @RenderQuestion(question)
                                </div>
                            }
                        </div>
                    </RadzenCard>
                }
            </div>

            <div class="d-flex justify-content-between mt-4">
                <RadzenButton Text="Previous" 
                             ButtonStyle="ButtonStyle.Light" 
                             Icon="arrow_back"
                             Click="@PreviousSection"
                             Disabled="@(currentSectionIndex == 0)" />
                
                <div class="d-flex gap-2">
                    @if (template.Settings.AllowSaveProgress)
                    {
                        <RadzenButton Text="Save Progress" 
                                     ButtonStyle="ButtonStyle.Info" 
                                     Icon="save"
                                     Click="@SaveProgress" />
                    }
                    
                    @if (currentSectionIndex == template.Sections.Count - 1)
                    {
                        @if (template.Settings.AllowReviewBeforeSubmit)
                        {
                            <RadzenButton Text="Review & Submit" 
                                         ButtonStyle="ButtonStyle.Success" 
                                         Icon="preview"
                                         Click="@ShowReview"
                                         Disabled="@(!CanProceedFromCurrentSection())" />
                        }
                        else
                        {
                            <RadzenButton Text="Submit" 
                                         ButtonStyle="ButtonStyle.Success" 
                                         Icon="send"
                                         Click="@SubmitQuestionnaire"
                                         Disabled="@(!CanSubmit())" />
                        }
                    }
                    else
                    {
                        <RadzenButton Text="Next" 
                                     ButtonStyle="ButtonStyle.Primary" 
                                     Icon="arrow_forward"
                                     Click="@NextSection"
                                     Disabled="@(!CanProceedFromCurrentSection())" />
                    }
                </div>
            </div>
        </RadzenCard>
    }
</div>

@code {
    [Parameter] public Guid TemplateId { get; set; }
    private Guid? assignmentId;
    [Inject] protected DialogService DialogService { get; set; } = default!;
    [Inject] protected NotificationService NotificationService { get; set; } = default!;
    [Inject] protected NavigationManager NavigationManager { get; set; } = default!;
    [Inject] protected IQuestionnaireApiService QuestionnaireApiService { get; set; } = default!;
    [Inject] protected IEmployeeQuestionnaireService EmployeeQuestionnaireService { get; set; } = default!;
    [Inject] protected IAuthenticationService AuthenticationService { get; set; } = default!;

    private QuestionnaireTemplate? template;
    private QuestionnaireResponse response = new();
    private int currentSectionIndex = 0;
    private QuestionSection? currentSection => template?.Sections.OrderBy(s => s.Order).ElementAtOrDefault(currentSectionIndex);

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplate();
        await LoadAssignmentForCurrentEmployee();
        await LoadExistingResponse();
        InitializeResponse();
        UpdateProgress();
    }

    private async Task LoadTemplate()
    {
        try
        {
            template = await QuestionnaireApiService.GetTemplateByIdAsync(TemplateId);
            if (template == null)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Questionnaire template not found");
                NavigationManager.NavigateTo("/my-questionnaires");
                return;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to load questionnaire: {ex.Message}");
            NavigationManager.NavigateTo("/my-questionnaires");
            return;
        }

        // Fallback to sample template if API fails
        if (template == null)
        {
        template = new QuestionnaireTemplate
        {
            Id = TemplateId,
            Name = "Employee Performance Review",
            Description = "Annual performance evaluation questionnaire",
            Settings = new QuestionnaireSettings
            {
                ShowProgressBar = true,
                AllowSaveProgress = true,
                AllowReviewBeforeSubmit = true
            },
            Sections = new List<QuestionSection>
            {
                new QuestionSection
                {
                    Id = Guid.NewGuid(),
                    Title = "Self Assessment",
                    Description = "Rate your performance in key areas",
                    Order = 0,
                    Questions = new List<QuestionItem>
                    {
                        new QuestionItem
                        {
                            Id = Guid.NewGuid(),
                            Title = "How would you rate your overall performance this year?",
                            Type = QuestionType.SelfAssessment,
                            Order = 0,
                            IsRequired = true
                        },
                        new QuestionItem
                        {
                            Id = Guid.NewGuid(),
                            Title = "What are your key accomplishments?",
                            Type = QuestionType.TextQuestion,
                            Order = 1,
                            IsRequired = true
                        }
                    }
                },
                new QuestionSection
                {
                    Id = Guid.NewGuid(),
                    Title = "Goals for Next Year",
                    Description = "Define your objectives for the upcoming year",
                    Order = 1,
                    Questions = new List<QuestionItem>
                    {
                        new QuestionItem
                        {
                            Id = Guid.NewGuid(),
                            Title = "Set your primary goal for next year",
                            Type = QuestionType.GoalAchievement,
                            Order = 0,
                            IsRequired = true
                        }
                    }
                }
            }
        };
        }
    }

    private async Task LoadAssignmentForCurrentEmployee()
    {
        try
        {
            // Load the current employee's assignment for this template
            var assignments = await EmployeeQuestionnaireService.GetMyAssignmentsAsync();
            var assignment = assignments.FirstOrDefault(a => a.TemplateId == TemplateId &&
                                                           (a.Status == AssignmentStatus.Assigned || a.Status == AssignmentStatus.InProgress));

            if (assignment != null)
            {
                assignmentId = assignment.Id;
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Warning, "Not Assigned", "This questionnaire has not been assigned to you.");
                NavigationManager.NavigateTo("/my-questionnaires");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to load assignment: {ex.Message}");
            NavigationManager.NavigateTo("/my-questionnaires");
        }
    }

    private async Task LoadExistingResponse()
    {
        if (!assignmentId.HasValue) return;

        try
        {
            var existingResponse = await EmployeeQuestionnaireService.GetMyResponseAsync(assignmentId.Value);
            if (existingResponse != null)
            {
                response = existingResponse;
                // Find current section based on progress
                var completedSections = response.SectionResponses.Count(sr => sr.Value.IsCompleted);
                currentSectionIndex = Math.Min(completedSections, (template?.Sections.Count ?? 1) - 1);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Could not load existing response: {ex.Message}");
            // Continue with new response
        }
    }

    private void InitializeResponse()
    {
        if (template == null) return;
        
        response = new QuestionnaireResponse
        {
            TemplateId = TemplateId,
            AssignmentId = assignmentId ?? Guid.Empty,
            EmployeeId = AuthenticationService.GetCurrentEmployeeId(),
            Status = ResponseStatus.InProgress
        };

        // Initialize section responses
        foreach (var section in template.Sections)
        {
            response.SectionResponses[section.Id] = new SectionResponse
            {
                SectionId = section.Id,
                QuestionResponses = new Dictionary<Guid, QuestionResponse>()
            };

            // Initialize question responses
            foreach (var question in section.Questions)
            {
                response.SectionResponses[section.Id].QuestionResponses[question.Id] = new QuestionResponse
                {
                    QuestionId = question.Id,
                    QuestionType = question.Type
                };
            }
        }
    }

    private RenderFragment RenderQuestion(QuestionItem question)
    {
        var questionResponse = GetQuestionResponse(question.Id);
        
        return question.Type switch
        {
            QuestionType.SelfAssessment => RenderRatingQuestion(question, questionResponse),
            QuestionType.TextQuestion => RenderTextQuestion(question, questionResponse),
            QuestionType.GoalAchievement => RenderGoalQuestion(question, questionResponse),
            _ => @<div class="alert alert-warning">Question type @question.Type not implemented</div>
        };
    }

    private RenderFragment RenderRatingQuestion(QuestionItem question, QuestionResponse response)
    {
        return @<div class="self-assessment-question">
            <RadzenCard Class="self-assessment-step">
                <RadzenText TextStyle="TextStyle.H5" Class="text-primary mb-3">
                    <RadzenIcon Icon="self_improvement" Class="me-2" />
                    @question.Title
                    @if (question.IsRequired) { <span class="text-danger">*</span> }
                </RadzenText>
                
                @if (!string.IsNullOrWhiteSpace(question.Description))
                {
                    <RadzenText TextStyle="TextStyle.Body1" Class="mb-4">@question.Description</RadzenText>
                }

                <RadzenAlert AlertStyle="AlertStyle.Info" Class="mb-4" ShowIcon="true">
                    <RadzenText TextStyle="TextStyle.Body2">
                        <strong>Rating Scale:</strong> 1 (Not satisfied) - 2 (Somewhat satisfied) - 3 (Satisfied) - 4 (Very satisfied)
                    </RadzenText>
                </RadzenAlert>

                <div class="competencies-container">
                    @{
                        var competencies = GetCompetenciesForQuestion(question);
                    }
                    @foreach (var competency in competencies)
                    {
                        <RadzenCard Class="competency-card mb-3 p-3 border">
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold mb-2">
                                        @competency.Title
                                    </RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-2">
                                        @competency.Description
                                    </RadzenText>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="4" Class="text-end">
                                    <div class="rating-section">
                                        <RadzenText TextStyle="TextStyle.Caption" Class="mb-1">Rate your satisfaction:</RadzenText>
                                        <RadzenRating Value="@GetCompetencyRating(question.Id, competency.Key)" 
                                                    ValueChanged="@((int value) => SetCompetencyRating(question.Id, competency.Key, value))"
                                                    Stars="4" 
                                                    Class="mb-2" />
                                        <RadzenText TextStyle="TextStyle.Caption" Class="text-primary">
                                            @GetRatingText(GetCompetencyRating(question.Id, competency.Key))
                                        </RadzenText>
                                    </div>
                                </RadzenColumn>
                            </RadzenRow>
                            <RadzenTextArea Value="@GetCompetencyComment(question.Id, competency.Key)"
                                          ValueChanged="@((string value) => SetCompetencyComment(question.Id, competency.Key, value))"
                                          Placeholder="Optional: Add your comments here..."
                                          Rows="2"
                                          Class="w-100 mt-2" />
                        </RadzenCard>
                    }
                </div>
            </RadzenCard>
        </div>;
    }

    private RenderFragment RenderTextQuestion(QuestionItem question, QuestionResponse response)
    {
        var sectionTitle = GetTextQuestionSectionTitle(question);
        var sectionDescription = GetTextQuestionSectionDescription(question);
        
        return @<div class="text-question">
            <RadzenCard Class="career-planning-step">
                <RadzenText TextStyle="TextStyle.H5" Class="text-primary mb-3">
                    <RadzenIcon Icon="psychology" Class="me-2" />
                    @question.Title
                    @if (question.IsRequired) { <span class="text-danger">*</span> }
                </RadzenText>
                
                @if (!string.IsNullOrWhiteSpace(question.Description))
                {
                    <RadzenText TextStyle="TextStyle.Body1" Class="mb-4">@question.Description</RadzenText>
                }

                <div class="planning-sections">
                    <RadzenCard Class="planning-card mb-4 p-3 border-start border-competency border-3">
                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold text-competency mb-3">
                            <RadzenIcon Icon="timeline" Class="me-2" />
                            @sectionTitle
                        </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-2">
                            @sectionDescription
                        </RadzenText>
                        <RadzenTextArea Value="@(response.TextValue ?? "")"
                                      ValueChanged="@(value => UpdateQuestionResponseText(question.Id, value))"
                                      Placeholder="Describe your thoughts, plans, and goals..."
                                      Rows="4"
                                      Class="w-100" />
                    </RadzenCard>
                </div>
            </RadzenCard>
        </div>;
    }

    private RenderFragment RenderGoalQuestion(QuestionItem question, QuestionResponse response)
    {
        return @<div class="goal-achievement-question">
            <RadzenCard Class="goal-review-step">
                <RadzenText TextStyle="TextStyle.H5" Class="text-primary mb-3">
                    <RadzenIcon Icon="track_changes" Class="me-2" />
                    @question.Title
                    @if (question.IsRequired) { <span class="text-danger">*</span> }
                </RadzenText>
                
                @if (!string.IsNullOrWhiteSpace(question.Description))
                {
                    <RadzenText TextStyle="TextStyle.Body1" Class="mb-4">@question.Description</RadzenText>
                }

                <RadzenCard Class="goal-card mb-3 p-3 border">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold">
                            Goal 1
                        </RadzenText>
                    </div>

                    <div class="mb-3">
                        <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Goal Description</RadzenText>
                        <RadzenTextArea Value="@GetGoalDescription(question.Id)"
                                      ValueChanged="@(value => SetGoalDescription(question.Id, value))"
                                      Placeholder="Describe the goal that was set for 2023..."
                                      Rows="3"
                                      Class="w-100" />
                    </div>

                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Achievement Percentage</RadzenText>
                            <div class="d-flex align-items-center">
                                <RadzenNumeric TValue="int"
                                             Value="@GetGoalAchievementPercentage(question.Id)"
                                             ValueChanged="@((int value) => SetGoalAchievementPercentage(question.Id, value))"
                                             Min="0" 
                                             Max="100" 
                                             Step="5"
                                             Format="0"
                                             Class="flex-grow-1 me-2" />
                                <RadzenText TextStyle="TextStyle.Body1">%</RadzenText>
                            </div>
                            <RadzenProgressBar Value="@GetGoalAchievementPercentage(question.Id)" 
                                             Max="100" 
                                             Class="mt-2"
                                             ProgressBarStyle="@GetProgressStyle(GetGoalAchievementPercentage(question.Id))" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="6">
                            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Achievement Status</RadzenText>
                            <div class="status-indicator p-2 rounded" style="@GetStatusStyle(GetGoalAchievementPercentage(question.Id))">
                                <RadzenIcon Icon="@GetStatusIcon(GetGoalAchievementPercentage(question.Id))" Class="me-2" />
                                <RadzenText TextStyle="TextStyle.Body2" Class="fw-bold">
                                    @GetStatusText(GetGoalAchievementPercentage(question.Id))
                                </RadzenText>
                            </div>
                        </RadzenColumn>
                    </RadzenRow>

                    <div class="mt-3">
                        <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Your Reasoning/Justification</RadzenText>
                        <RadzenTextArea Value="@GetGoalJustification(question.Id)"
                                      ValueChanged="@(value => SetGoalJustification(question.Id, value))"
                                      Placeholder="Explain why you achieved this percentage. What factors contributed to your success or challenges?"
                                      Rows="4"
                                      Class="w-100" />
                    </div>
                </RadzenCard>
            </RadzenCard>
        </div>;
    }

    private RenderFragment RenderYesNoQuestion(QuestionItem question, QuestionResponse response)
    {
        return @<div class="yesno-question">
            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">
                @question.Title
                @if (question.IsRequired) { <span class="text-danger">*</span> }
            </RadzenText>
            @if (!string.IsNullOrWhiteSpace(question.Description))
            {
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-3">@question.Description</RadzenText>
            }
            <RadzenToggleButton Value="@GetBooleanValue(question.Id)" 
                              ValueChanged="@(value => SetBooleanValue(question.Id, value))"
                              Text="@(GetBooleanValue(question.Id) ? "Yes" : "No")" 
                              ButtonStyle="@(GetBooleanValue(question.Id) ? ButtonStyle.Success : ButtonStyle.Secondary)" />
        </div>;
    }

    private RenderFragment RenderDateQuestion(QuestionItem question, QuestionResponse response)
    {
        return @<div class="date-question">
            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">
                @question.Title
                @if (question.IsRequired) { <span class="text-danger">*</span> }
            </RadzenText>
            @if (!string.IsNullOrWhiteSpace(question.Description))
            {
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-3">@question.Description</RadzenText>
            }
            <RadzenDatePicker Value="@GetDateValue(question.Id)"
                            ValueChanged="@(value => SetDateValue(question.Id, value))"
                            TValue="DateTime?"
                            ShowTime="false"
                            DateFormat="dd/MM/yyyy"
                            Class="w-100" />
        </div>;
    }

    private RenderFragment RenderNumberQuestion(QuestionItem question, QuestionResponse response)
    {
        return @<div class="number-question">
            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">
                @question.Title
                @if (question.IsRequired) { <span class="text-danger">*</span> }
            </RadzenText>
            @if (!string.IsNullOrWhiteSpace(question.Description))
            {
                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted mb-3">@question.Description</RadzenText>
            }
            <RadzenNumeric Value="@GetNumericValue(question.Id)" 
                         ValueChanged="@(value => SetNumericValue(question.Id, value))"
                         TValue="int"
                         Class="w-100" />
        </div>;
    }

    // Helper methods for question responses
    private QuestionResponse GetQuestionResponse(Guid questionId)
    {
        if (currentSection == null) return new QuestionResponse { QuestionId = questionId };
        
        var sectionResponse = response.SectionResponses[currentSection.Id];
        return sectionResponse.QuestionResponses.TryGetValue(questionId, out var questionResponse) 
            ? questionResponse 
            : new QuestionResponse { QuestionId = questionId };
    }

    private void UpdateQuestionResponse(Guid questionId, int value)
    {
        var questionResponse = GetQuestionResponse(questionId);
        questionResponse.NumericValue = value;
        questionResponse.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void UpdateQuestionResponseText(Guid questionId, string value)
    {
        var questionResponse = GetQuestionResponse(questionId);
        questionResponse.TextValue = value;
        questionResponse.LastModified = DateTime.Now;
        UpdateProgress();
    }

    // Goal question helpers
    private DateTime? GetGoalStartDate(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("StartDate", out var value) == true ? (DateTime?)value : null;
    }

    private DateTime? GetGoalEndDate(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("EndDate", out var value) == true ? (DateTime?)value : null;
    }

    private string GetGoalDescription(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("Description", out var value) == true ? value.ToString() ?? "" : "";
    }

    private int GetGoalAchievementPercentage(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("AchievementPercentage", out var value) == true ? Convert.ToInt32(value) : 0;
    }

    private string GetGoalJustification(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("Justification", out var value) == true ? value.ToString() ?? "" : "";
    }

    private string GetRatingText(int rating)
    {
        return rating switch
        {
            1 => "Not satisfied",
            2 => "Somewhat satisfied", 
            3 => "Satisfied",
            4 => "Very satisfied",
            _ => "Not rated"
        };
    }

    private ProgressBarStyle GetProgressStyle(int percentage)
    {
        return percentage switch
        {
            >= 90 => ProgressBarStyle.Success,
            >= 70 => ProgressBarStyle.Info,
            >= 50 => ProgressBarStyle.Warning,
            _ => ProgressBarStyle.Danger
        };
    }

    private string GetStatusStyle(int percentage)
    {
        var color = percentage switch
        {
            >= 90 => "background-color: var(--light-blue); border: 1px solid var(--success-color); color: var(--dark-blue);",
            >= 70 => "background-color: rgba(0, 230, 200, 0.1); border: 1px solid var(--green-new); color: var(--dark-blue);",
            >= 50 => "background-color: rgba(230, 191, 127, 0.2); border: 1px solid var(--golden-milk); color: var(--dark-blue);",
            _ => "background-color: rgba(240, 128, 128, 0.2); border: 1px solid var(--peach-kiss); color: var(--dark-blue);"
        };
        return color;
    }

    private string GetStatusIcon(int percentage)
    {
        return percentage switch
        {
            >= 90 => "check_circle",
            >= 70 => "task_alt",
            >= 50 => "warning",
            _ => "error"
        };
    }

    private string GetStatusText(int percentage)
    {
        return percentage switch
        {
            >= 90 => "Excellent Achievement",
            >= 70 => "Good Achievement", 
            >= 50 => "Partial Achievement",
            _ => "Below Expectations"
        };
    }

    private string GetGoalMeasurement(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("Measurement", out var value) == true ? value.ToString() ?? "" : "";
    }

    private decimal GetGoalWeighting(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.ComplexValue?.TryGetValue("Weighting", out var value) == true ? Convert.ToDecimal(value) : 0m;
    }

    private bool GetBooleanValue(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.TextValue == "true";
    }

    private DateTime? GetDateValue(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.DateValue;
    }

    private int GetNumericValue(Guid questionId)
    {
        var response = GetQuestionResponse(questionId);
        return response.NumericValue ?? 0;
    }

    // Setter methods for goal questions
    private void SetGoalStartDate(Guid questionId, DateTime? value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        if (value.HasValue) response.ComplexValue["StartDate"] = value.Value;
        else response.ComplexValue.Remove("StartDate");
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetGoalEndDate(Guid questionId, DateTime? value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        if (value.HasValue) response.ComplexValue["EndDate"] = value.Value;
        else response.ComplexValue.Remove("EndDate");
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetGoalDescription(Guid questionId, string value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue["Description"] = value ?? "";
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetGoalAchievementPercentage(Guid questionId, int value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue["AchievementPercentage"] = value;
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetGoalJustification(Guid questionId, string value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue["Justification"] = value ?? "";
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetGoalMeasurement(Guid questionId, string value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue["Measurement"] = value ?? "";
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetGoalWeighting(Guid questionId, decimal value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue["Weighting"] = value;
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetBooleanValue(Guid questionId, bool value)
    {
        var response = GetQuestionResponse(questionId);
        response.TextValue = value.ToString().ToLower();
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetDateValue(Guid questionId, DateTime? value)
    {
        var response = GetQuestionResponse(questionId);
        response.DateValue = value;
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetNumericValue(Guid questionId, int value)
    {
        var response = GetQuestionResponse(questionId);
        response.NumericValue = value;
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    // Navigation methods
    private void OnSectionChanged(int newIndex)
    {
        if (newIndex < currentSectionIndex || CanProceedFromCurrentSection())
        {
            currentSectionIndex = newIndex;
            StateHasChanged();
        }
        else
        {
            NotificationService.Notify(NotificationSeverity.Warning, 
                "Complete Section", 
                "Please complete all required questions in the current section.");
        }
    }

    private void PreviousSection()
    {
        if (currentSectionIndex > 0)
        {
            currentSectionIndex--;
            StateHasChanged();
        }
    }

    private void NextSection()
    {
        if (CanProceedFromCurrentSection() && currentSectionIndex < template!.Sections.Count - 1)
        {
            currentSectionIndex++;
            UpdateProgress();
            StateHasChanged();
        }
    }

    private bool CanProceedFromCurrentSection()
    {
        if (currentSection == null || !currentSection.IsRequired) return true;
        
        var sectionResponse = response.SectionResponses[currentSection.Id];
        
        foreach (var question in currentSection.Questions.Where(q => q.IsRequired))
        {
            if (!sectionResponse.QuestionResponses.TryGetValue(question.Id, out var questionResponse))
                return false;
                
            if (!IsQuestionAnswered(question, questionResponse))
                return false;
        }
        
        return true;
    }

    private bool IsQuestionAnswered(QuestionItem question, QuestionResponse questionResponse)
    {
        return question.Type switch
        {
            QuestionType.SelfAssessment => IsSelfAssessmentCompleted(question, questionResponse),
            QuestionType.TextQuestion => !string.IsNullOrWhiteSpace(questionResponse.TextValue),
            QuestionType.GoalAchievement => !string.IsNullOrWhiteSpace(GetGoalDescription(question.Id)),
            _ => true
        };
    }

    private bool IsSelfAssessmentCompleted(QuestionItem question, QuestionResponse questionResponse)
    {
        var competencies = GetCompetenciesForQuestion(question);
        if (competencies.Count == 0) return true;
        
        // Check that at least one competency has been rated
        return competencies.Any(c => GetCompetencyRating(question.Id, c.Key) > 0);
    }

    private bool IsSectionCompleted(Guid sectionId)
    {
        if (!response.SectionResponses.TryGetValue(sectionId, out var sectionResponse))
            return false;
            
        var section = template!.Sections.First(s => s.Id == sectionId);
        
        return section.Questions.Where(q => q.IsRequired).All(q => 
            sectionResponse.QuestionResponses.TryGetValue(q.Id, out var qr) && 
            IsQuestionAnswered(q, qr));
    }

    private void UpdateProgress()
    {
        if (template == null) return;
        
        var totalQuestions = template.Sections.SelectMany(s => s.Questions.Where(q => q.IsRequired)).Count();
        var answeredQuestions = 0;
        
        foreach (var section in template.Sections)
        {
            if (response.SectionResponses.TryGetValue(section.Id, out var sectionResponse))
            {
                answeredQuestions += section.Questions.Where(q => q.IsRequired).Count(q => 
                    sectionResponse.QuestionResponses.TryGetValue(q.Id, out var qr) && 
                    IsQuestionAnswered(q, qr));
            }
        }
        
        response.ProgressPercentage = totalQuestions > 0 ? (int)(answeredQuestions * 100.0 / totalQuestions) : 0;
    }

    private bool CanSubmit()
    {
        return template!.Sections.All(s => IsSectionCompleted(s.Id));
    }

    private async Task SaveProgress()
    {
        if (!assignmentId.HasValue)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Cannot Save", "No assignment ID available");
            return;
        }

        try
        {
            await EmployeeQuestionnaireService.SaveMyResponseAsync(assignmentId.Value, response.SectionResponses);
            NotificationService.Notify(NotificationSeverity.Success, "Saved", "Your progress has been saved successfully");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Save Failed", $"Failed to save progress: {ex.Message}");
        }
    }

    private async Task ShowReview()
    {
        // TODO: Show review dialog
        NotificationService.Notify(NotificationSeverity.Info, "Review", "Review functionality would appear here");
    }

    private async Task SubmitQuestionnaire()
    {
        if (!CanSubmit())
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Incomplete", template!.Settings.IncompleteMessage);
            return;
        }

        if (!assignmentId.HasValue)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Cannot Submit", "No assignment ID available");
            return;
        }

        try
        {
            // First save the current responses
            await EmployeeQuestionnaireService.SaveMyResponseAsync(assignmentId.Value, response.SectionResponses);

            // Then submit the questionnaire
            var submittedResponse = await EmployeeQuestionnaireService.SubmitMyResponseAsync(assignmentId.Value);

            if (submittedResponse != null)
            {
                response = submittedResponse;
                NotificationService.Notify(NotificationSeverity.Success, "Submitted", template.Settings.SuccessMessage);

                // Navigate back to questionnaire list
                NavigationManager.NavigateTo("/my-questionnaires");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Submission Failed", "Failed to submit questionnaire");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Submission Failed", $"Failed to submit questionnaire: {ex.Message}");
        }
    }

    // Competency-specific helper methods
    private List<CompetencyDefinition> GetCompetenciesForQuestion(QuestionItem question)
    {
        if (question.Configuration.ContainsKey("Competencies") && 
            question.Configuration["Competencies"] is List<CompetencyDefinition> competencies)
        {
            return competencies;
        }
        
        // Return default competencies if none configured
        return new List<CompetencyDefinition>
        {
            new("professional_knowledge", "Professional Knowledge", "Assessment of your own expertise and professional knowledge in relation to your job responsibilities.", false)
        };
    }

    private int GetCompetencyRating(Guid questionId, string competencyKey)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue?.TryGetValue($"rating_{competencyKey}", out var value) == true)
        {
            return Convert.ToInt32(value);
        }
        return 0;
    }

    private string GetCompetencyComment(Guid questionId, string competencyKey)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue?.TryGetValue($"comment_{competencyKey}", out var value) == true)
        {
            return value.ToString() ?? "";
        }
        return "";
    }

    private void SetCompetencyRating(Guid questionId, string competencyKey, int value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue[$"rating_{competencyKey}"] = value;
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    private void SetCompetencyComment(Guid questionId, string competencyKey, string value)
    {
        var response = GetQuestionResponse(questionId);
        if (response.ComplexValue == null) response.ComplexValue = new Dictionary<string, object>();
        response.ComplexValue[$"comment_{competencyKey}"] = value ?? "";
        response.LastModified = DateTime.Now;
        UpdateProgress();
    }

    // Text Question helper methods
    private string GetTextQuestionSectionTitle(QuestionItem question)
    {
        if (question.Configuration.ContainsKey("SectionTitle"))
        {
            return question.Configuration["SectionTitle"].ToString() ?? "Career Ambitions";
        }
        return "Career Ambitions";
    }

    private string GetTextQuestionSectionDescription(QuestionItem question)
    {
        if (question.Configuration.ContainsKey("SectionDescription"))
        {
            return question.Configuration["SectionDescription"].ToString() ?? "Where do you see yourself long-term in your professional career?";
        }
        return "Where do you see yourself long-term in your professional career?";
    }
}