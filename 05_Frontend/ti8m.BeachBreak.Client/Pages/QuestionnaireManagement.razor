@page "/questionnaire-management"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components.Shared
@using ti8m.BeachBreak.Client.Components.Dialogs
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject ICategoryApiService CategoryService
@inject IQuestionnaireTemplateService ApiService
@inherits OptimizedComponentBase

<PageTitle>Questionnaire Management</PageTitle>

<div class="container-fluid">
    <RadzenCard Class="p-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <RadzenText TextStyle="TextStyle.H3" Class="text-primary">
                    <RadzenIcon Icon="quiz" Class="me-2" />
                    Questionnaire Management
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Subtitle1" Class="text-muted">
                    Manage your questionnaire templates and view responses
                </RadzenText>
            </div>
            <div class="d-flex gap-2">
                <RadzenButton Text="Import Template" 
                             ButtonStyle="ButtonStyle.Secondary" 
                             Icon="upload" />
                <RadzenButton Text="Create New" 
                             ButtonStyle="ButtonStyle.Primary" 
                             Icon="add"
                             Click="@(() => NavigationManager.NavigateTo("/questionnaire-builder"))" />
            </div>
        </div>

        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Templates">
                    <div class="p-3">
                        <div class="d-flex justify-content-between mb-3">
                            <div class="d-flex gap-2">
                                <RadzenDropDown @bind-Value="@categoryFilter"
                                               Data="@categories"
                                               TextProperty="NameEn"
                                               ValueProperty="Id"
                                               Placeholder="Filter by Category"
                                               AllowClear="true"
                                               Change="@FilterTemplates" />
                                <RadzenTextBox @bind-Value="@searchText"
                                              Placeholder="Search templates..."
                                              @oninput="@OnSearchTextChanged" />
                            </div>
                            <RadzenToggleButton @bind-Value="@showArchivedTemplates"
                                               Text="Show Archived"
                                               Change="@FilterTemplates" />
                        </div>

                        <RadzenDataGrid Data="@filteredTemplates" 
                                       AllowFiltering="true" 
                                       AllowColumnResize="true"
                                       AllowAlternatingRows="true" 
                                       AllowSorting="true" 
                                       PageSize="10" 
                                       AllowPaging="true">
                            <Columns>
                                <RadzenDataGridColumn Property="@nameof(QuestionnaireTemplate.Name)" Title="Template Name" Width="300px">
                                    <Template Context="template">
                                        <div>
                                            <RadzenLink Text="@template.Name" 
                                                       Path="@($"/questionnaire-builder/{template.Id}")" 
                                                       Style="font-weight: bold" />
                                            <br />
                                            <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">@template.Description</RadzenText>
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn Property="@nameof(QuestionnaireTemplate.CategoryId)" Title="Category" Width="150px">
                                    <Template Context="template">
                                        @{
                                            var category = categories.FirstOrDefault(c => c.Id == template.CategoryId);
                                        }
                                        <RadzenText TextStyle="TextStyle.Body2">@(category?.NameEn ?? "Uncategorized")</RadzenText>
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn Property="SectionCount" Title="Sections" Width="100px" TextAlign="TextAlign.Center">
                                    <Template Context="template">
                                        <RadzenBadge Text="@template.Sections.Count.ToString()" BadgeStyle="BadgeStyle.Info" />
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn Property="QuestionCount" Title="Questions" Width="100px" TextAlign="TextAlign.Center">
                                    <Template Context="template">
                                        <RadzenBadge Text="@template.Sections.SelectMany(s => s.Questions).Count().ToString()" BadgeStyle="BadgeStyle.Secondary" />
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn Property="@nameof(QuestionnaireTemplate.Status)" Title="Status" Width="120px">
                                    <Template Context="template">
                                        <RadzenBadge BadgeStyle="@GetStatusBadgeStyle(template.Status)"
                                                   Text="@TemplateStatusHelper.GetStatusText(template.Status)" />
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn Property="@nameof(QuestionnaireTemplate.CreatedDate)" Title="Created" Width="120px" FormatString="{0:dd/MM/yyyy}" />
                                                                
                                <RadzenDataGridColumn Filterable="false" Sortable="false" Width="200px" TextAlign="TextAlign.Center">
                                    <Template Context="template">
                                        <div class="d-flex gap-1">
                                            <RadzenButton ButtonStyle="ButtonStyle.Light"
                                                         Icon="preview"
                                                         Size="ButtonSize.Small"
                                                         Title="Preview"
                                                         Click="@(() => PreviewTemplate(template))" />
                                            <RadzenButton ButtonStyle="ButtonStyle.Light"
                                                         Icon="edit"
                                                         Size="ButtonSize.Small"
                                                         Title="Edit"
                                                         Click="@(() => EditTemplate(template))" />
                                            <RadzenButton ButtonStyle="ButtonStyle.Light"
                                                         Icon="content_copy"
                                                         Size="ButtonSize.Small"
                                                         Title="Clone"
                                                         Click="@(() => CloneTemplate(template))" />
                                            <RadzenButton ButtonStyle="ButtonStyle.Light"
                                                         Icon="assignment"
                                                         Size="ButtonSize.Small"
                                                         Title="Assign"
                                                         Click="@(() => AssignTemplate(template))" />
                                            <RadzenButton ButtonStyle="@GetToggleButtonStyle(template.Status)"
                                                         Icon="@GetToggleButtonIcon(template.Status)"
                                                         Size="ButtonSize.Small"
                                                         Title="@GetToggleButtonTitle(template.Status)"
                                                         Click="@(() => ToggleTemplateStatus(template))" />
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </RadzenTabsItem>


                <RadzenTabsItem Text="Settings">
                    <div class="p-3">
                        <RadzenText TextStyle="TextStyle.H5" Class="mb-3">System Settings</RadzenText>
                        
                        <RadzenRow Gap="1rem">
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenCard Class="p-3">
                                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold mb-3">Email Notifications</RadzenText>
                                    <div class="settings-group">
                                        <RadzenCheckBox @bind-Value="@settings.SendAssignmentEmails" Name="assignmentEmails" />
                                        <RadzenLabel Text="Send assignment notifications" Component="assignmentEmails" Class="ms-2" />
                                    </div>
                                    <div class="settings-group mt-2">
                                        <RadzenCheckBox @bind-Value="@settings.SendReminderEmails" Name="reminderEmails" />
                                        <RadzenLabel Text="Send reminder emails" Component="reminderEmails" Class="ms-2" />
                                    </div>
                                    <div class="settings-group mt-2">
                                        <RadzenCheckBox @bind-Value="@settings.SendCompletionEmails" Name="completionEmails" />
                                        <RadzenLabel Text="Send completion confirmations" Component="completionEmails" Class="ms-2" />
                                    </div>
                                </RadzenCard>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenCard Class="p-3">
                                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold mb-3">Default Settings</RadzenText>
                                    <div class="mb-3">
                                        <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Default Due Days</RadzenText>
                                        <RadzenNumeric @bind-Value="@settings.DefaultDueDays" Min="1" Max="365" Class="w-100" />
                                    </div>
                                    <div class="mb-3">
                                        <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Reminder Days Before Due</RadzenText>
                                        <RadzenNumeric @bind-Value="@settings.ReminderDaysBeforeDue" Min="1" Max="30" Class="w-100" />
                                    </div>
                                </RadzenCard>
                            </RadzenColumn>
                        </RadzenRow>

                        <div class="mt-4">
                            <RadzenButton Text="Save Settings" 
                                         ButtonStyle="ButtonStyle.Primary" 
                                         Icon="save"
                                         Click="@SaveSettings" />
                        </div>
                    </div>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </RadzenCard>
</div>

@code {

    private List<QuestionnaireTemplate> templates = new();
    private List<QuestionnaireTemplate> filteredTemplates = new();

    private string searchText = "";
    private Guid categoryFilter;
    private bool showArchivedTemplates = false;


    private List<Category> categories = new();


    private SystemSettings settings = new();

    protected override async Task OnInitializedAsync()
    {
        await ExecuteSafelyAsync(async () =>
        {
            // Load templates and categories in parallel
            var loadTemplatesTask = LoadTemplates();
            var loadCategoriesTask = LoadCategories();

            await Task.WhenAll(loadTemplatesTask, loadCategoriesTask);

            // Load settings synchronously and apply filters
            LoadSettings();
            FilterTemplates();
        }, "InitializeQuestionnaireManagement");
    }

    protected override bool HasStateChanged()
    {
        return HasParameterChanged(nameof(templates), templates.Count) ||
               HasParameterChanged(nameof(searchText), searchText) ||
               HasParameterChanged(nameof(categoryFilter), categoryFilter);
    }

    private async Task LoadTemplates()
    {
        try
        {
            templates = await ApiService.GetAllTemplatesAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to load templates: {ex.Message}");
            templates = new List<QuestionnaireTemplate>();
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await CategoryService.GetAllCategoriesAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to load categories: {ex.Message}");
            categories = new List<Category>();
        }
    }

    private void LoadSettings()
    {
        settings = new SystemSettings
        {
            SendAssignmentEmails = true,
            SendReminderEmails = true,
            SendCompletionEmails = false,
            DefaultDueDays = 14,
            ReminderDaysBeforeDue = 3
        };
    }

    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";
        FilterTemplates();
    }

    private void FilterTemplates()
    {
        filteredTemplates = templates.Where(t =>
            (showArchivedTemplates || t.Status != TemplateStatus.Archived) &&
            (categoryFilter == Guid.Empty || t.CategoryId == categoryFilter) &&
            (string.IsNullOrWhiteSpace(searchText) ||
             t.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             t.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase))
        ).ToList();

        StateHasChanged();
    }

    private async Task PreviewTemplate(QuestionnaireTemplate template)
    {
        NavigationManager.NavigateTo($"/questionnaire/{template.Id}");
    }

    private void EditTemplate(QuestionnaireTemplate template)
    {
        NavigationManager.NavigateTo($"/questionnaire-builder/{template.Id}");
    }

    private async Task CloneTemplate(QuestionnaireTemplate template)
    {
        try
        {
            // Show confirmation dialog
            var confirmed = await DialogService.Confirm(
                $"This will create a copy of '{template.Name}' in Draft status. Continue?",
                "Clone Template",
                new ConfirmOptions
                {
                    OkButtonText = "Clone",
                    CancelButtonText = "Cancel"
                });

            if (confirmed != true)
                return;

            NotificationService.Notify(NotificationSeverity.Info, "Cloning", "Cloning template...");

            // Call service to clone
            var newTemplateId = await ApiService.CloneTemplateAsync(template.Id);

            if (newTemplateId.HasValue)
            {
                NotificationService.Notify(NotificationSeverity.Success, "Cloned", "Template cloned successfully!");

                // Reload templates to show the new cloned template
                await LoadTemplates();
                FilterTemplates();

                // Navigate to the cloned template editor
                NavigationManager.NavigateTo($"/questionnaire-builder/{newTemplateId.Value}");
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to clone template. Please try again.");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Error cloning template: {ex.Message}");
        }
    }

    private async Task AssignTemplate(QuestionnaireTemplate template)
    {
        NotificationService.Notify(NotificationSeverity.Info, "Assign", $"Assignment dialog for '{template.Name}' would open here");
    }

    private async Task ToggleTemplateStatus(QuestionnaireTemplate template)
    {
        try
        {
            var originalStatus = template.Status;
            QuestionnaireTemplate? result;
            string statusAction;

            if (template.Status == TemplateStatus.Archived)
            {
                // Restore from archive
                result = await ApiService.RestoreTemplateAsync(template.Id);
                statusAction = "restored";
            }
            else
            {
                // Archive the template (works for both Draft and Published)
                result = await ApiService.ArchiveTemplateAsync(template.Id);
                statusAction = "archived";
            }

            if (result != null)
            {
                // Update local template status
                template.Status = result.Status;
                NotificationService.Notify(NotificationSeverity.Success, "Status Updated", $"Template '{template.Name}' has been {statusAction}");
                FilterTemplates();
            }
            else
            {
                NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to update template status");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to update template: {ex.Message}");
        }
    }

    private async Task SaveSettings()
    {
        // Save to database
        NotificationService.Notify(NotificationSeverity.Success, "Saved", "Settings have been saved successfully");
    }



    // Helper classes
    public class SystemSettings
    {
        public bool SendAssignmentEmails { get; set; }
        public bool SendReminderEmails { get; set; }
        public bool SendCompletionEmails { get; set; }
        public int DefaultDueDays { get; set; }
        public int ReminderDaysBeforeDue { get; set; }
    }

    // Status helper methods
    private BadgeStyle GetStatusBadgeStyle(TemplateStatus status) => status switch
    {
        TemplateStatus.Published => BadgeStyle.Success,
        TemplateStatus.Draft => BadgeStyle.Warning,
        TemplateStatus.Archived => BadgeStyle.Danger,
        _ => BadgeStyle.Secondary
    };

    private ButtonStyle GetToggleButtonStyle(TemplateStatus status) => status switch
    {
        TemplateStatus.Archived => ButtonStyle.Success,
        _ => ButtonStyle.Warning
    };

    private string GetToggleButtonIcon(TemplateStatus status) => status switch
    {
        TemplateStatus.Archived => "restore",
        _ => "archive"
    };

    private string GetToggleButtonTitle(TemplateStatus status) => status switch
    {
        TemplateStatus.Archived => "Restore",
        _ => "Archive"
    };
}