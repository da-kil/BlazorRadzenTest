@page "/questionnaire-management"
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components.Shared
@using ti8m.BeachBreak.Client.Components.Dialogs
@inherits OptimizedComponentBase

<PageTitle>Questionnaire Management</PageTitle>

<div class="container-fluid">
    <RadzenCard Class="p-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <RadzenText TextStyle="TextStyle.H3" Class="text-primary">
                    <RadzenIcon Icon="quiz" Class="me-2" />
                    Questionnaire Management
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Subtitle1" Class="text-muted">
                    Manage your questionnaire templates and view responses
                </RadzenText>
            </div>
            <div class="d-flex gap-2">
                <RadzenButton Text="Import Template" 
                             ButtonStyle="ButtonStyle.Secondary" 
                             Icon="upload" />
                <RadzenButton Text="Create New" 
                             ButtonStyle="ButtonStyle.Primary" 
                             Icon="add"
                             Click="@(() => NavigationManager.NavigateTo("/questionnaire-builder"))" />
            </div>
        </div>

        <RadzenTabs>
            <Tabs>
                <RadzenTabsItem Text="Templates">
                    <div class="p-3">
                        <div class="d-flex justify-content-between mb-3">
                            <div class="d-flex gap-2">
                                <RadzenDropDown @bind-Value="@categoryFilter" 
                                               Data="@categories" 
                                               Placeholder="Filter by Category"
                                               AllowClear="true"
                                               Change="@FilterTemplates" />
                                <RadzenTextBox @bind-Value="@searchText"
                                              Placeholder="Search templates..."
                                              @oninput="@OnSearchTextChanged" />
                            </div>
                            <RadzenToggleButton @bind-Value="@showInactiveTemplates" 
                                               Text="Show Inactive" 
                                               Change="@FilterTemplates" />
                        </div>

                        <RadzenDataGrid Data="@filteredTemplates" 
                                       AllowFiltering="true" 
                                       AllowColumnResize="true"
                                       AllowAlternatingRows="true" 
                                       AllowSorting="true" 
                                       PageSize="10" 
                                       AllowPaging="true">
                            <Columns>
                                <RadzenDataGridColumn Property="@nameof(QuestionnaireTemplate.Name)" Title="Template Name" Width="300px">
                                    <Template Context="template">
                                        <div>
                                            <RadzenLink Text="@template.Name" 
                                                       Path="@($"/questionnaire-builder/{template.Id}")" 
                                                       Style="font-weight: bold" />
                                            <br />
                                            <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">@template.Description</RadzenText>
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn Property="@nameof(QuestionnaireTemplate.Category)" Title="Category" Width="150px" />
                                
                                <RadzenDataGridColumn Property="SectionCount" Title="Sections" Width="100px" TextAlign="TextAlign.Center">
                                    <Template Context="template">
                                        <RadzenBadge Text="@template.Sections.Count.ToString()" BadgeStyle="BadgeStyle.Info" />
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn Property="QuestionCount" Title="Questions" Width="100px" TextAlign="TextAlign.Center">
                                    <Template Context="template">
                                        <RadzenBadge Text="@template.Sections.SelectMany(s => s.Questions).Count().ToString()" BadgeStyle="BadgeStyle.Secondary" />
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn Property="@nameof(QuestionnaireTemplate.Status)" Title="Status" Width="120px">
                                    <Template Context="template">
                                        <RadzenBadge BadgeStyle="@GetStatusBadgeStyle(template.Status)"
                                                   Text="@TemplateStatusHelper.GetStatusText(template.Status)" />
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn Property="@nameof(QuestionnaireTemplate.CreatedDate)" Title="Created" Width="120px" FormatString="{0:dd/MM/yyyy}" />
                                
                                <RadzenDataGridColumn Property="@nameof(QuestionnaireTemplate.LastModified)" Title="Modified" Width="120px">
                                    <Template Context="template">
                                        @if (template.LastModified.HasValue)
                                        {
                                            <span>@template.LastModified.Value.ToString("dd/MM/yyyy")</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Never</span>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                                
                                <RadzenDataGridColumn Filterable="false" Sortable="false" Width="200px" TextAlign="TextAlign.Center">
                                    <Template Context="template">
                                        <div class="d-flex gap-1">
                                            <RadzenButton ButtonStyle="ButtonStyle.Light"
                                                         Icon="preview"
                                                         Size="ButtonSize.Small"
                                                         Title="Preview"
                                                         Click="@(() => PreviewTemplate(template))" />
                                            <RadzenButton ButtonStyle="ButtonStyle.Light"
                                                         Icon="edit"
                                                         Size="ButtonSize.Small"
                                                         Title="Edit"
                                                         Click="@(() => EditTemplate(template))" />
                                            <RadzenButton ButtonStyle="ButtonStyle.Light"
                                                         Icon="content_copy"
                                                         Size="ButtonSize.Small"
                                                         Title="Clone"
                                                         Click="@(() => CloneTemplate(template))" />
                                            <RadzenButton ButtonStyle="ButtonStyle.Light"
                                                         Icon="assignment"
                                                         Size="ButtonSize.Small"
                                                         Title="Assign"
                                                         Click="@(() => AssignTemplate(template))" />
                                            <RadzenButton ButtonStyle="@GetToggleButtonStyle(template.Status)"
                                                         Icon="@GetToggleButtonIcon(template.Status)"
                                                         Size="ButtonSize.Small"
                                                         Title="@GetToggleButtonTitle(template.Status)"
                                                         Click="@(() => ToggleTemplateStatus(template))" />
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Assignments">
                    <div class="p-3">
                        <div class="d-flex justify-content-between mb-3">
                            <div class="d-flex gap-2">
                                <RadzenDropDown @bind-Value="@assignmentStatusFilter"
                                               Data="@assignmentStatusOptions"
                                               TextProperty="Text"
                                               ValueProperty="Value"
                                               Placeholder="Filter by Status"
                                               AllowClear="true"
                                               Change="@FilterAssignments" />
                                <RadzenTextBox @bind-Value="@assignmentSearchText"
                                              Placeholder="Search by employee name..."
                                              @oninput="@OnAssignmentSearchTextChanged" />
                            </div>
                            <RadzenButton Text="Refresh Assignments"
                                         ButtonStyle="ButtonStyle.Secondary"
                                         Icon="refresh"
                                         Click="@LoadAssignments" />
                        </div>

                        <RadzenDataGrid Data="@filteredAssignments"
                                       AllowFiltering="true"
                                       AllowColumnResize="true"
                                       AllowAlternatingRows="true"
                                       AllowSorting="true"
                                       PageSize="10"
                                       AllowPaging="true">
                            <Columns>
                                <RadzenDataGridColumn Property="EmployeeName" Title="Employee" Width="200px">
                                    <Template Context="assignment">
                                        <div>
                                            <RadzenText TextStyle="TextStyle.Body2" Class="fw-bold">@assignment.EmployeeName</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">@assignment.EmployeeEmail</RadzenText>
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Property="TemplateName" Title="Questionnaire" Width="250px">
                                    <Template Context="assignment">
                                        <div>
                                            <RadzenText TextStyle="TextStyle.Body2" Class="fw-bold">@GetAssignmentTemplateName(assignment.TemplateId)</RadzenText>
                                            <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">@GetAssignmentTemplateCategory(assignment.TemplateId)</RadzenText>
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Property="Status" Title="Status" Width="130px">
                                    <Template Context="assignment">
                                        <RadzenBadge BadgeStyle="@GetAssignmentStatusBadgeStyle(assignment.Status)"
                                                   Text="@assignment.Status.ToString()" />
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Property="AssignedDate" Title="Assigned" Width="120px" FormatString="{0:dd/MM/yyyy}" />

                                <RadzenDataGridColumn Property="DueDate" Title="Due Date" Width="120px">
                                    <Template Context="assignment">
                                        @if (assignment.DueDate.HasValue)
                                        {
                                            var isOverdue = assignment.DueDate < DateTime.Now && assignment.Status != AssignmentStatus.Completed;
                                            <RadzenText TextStyle="TextStyle.Body2"
                                                       Class="@(isOverdue ? "text-danger fw-bold" : "")">
                                                @assignment.DueDate.Value.ToString("dd/MM/yyyy")
                                                @if (isOverdue) { <RadzenIcon Icon="warning" Class="ms-1" /> }
                                            </RadzenText>
                                        }
                                        else
                                        {
                                            <span class="text-muted">No due date</span>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Property="CompletedDate" Title="Completed" Width="120px">
                                    <Template Context="assignment">
                                        @if (assignment.CompletedDate.HasValue)
                                        {
                                            <RadzenText TextStyle="TextStyle.Body2">@assignment.CompletedDate.Value.ToString("dd/MM/yyyy")</RadzenText>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>

                                <RadzenDataGridColumn Property="AssignedBy" Title="Assigned By" Width="150px" />

                                <RadzenDataGridColumn Filterable="false" Sortable="false" Width="250px" TextAlign="TextAlign.Center" Title="Actions">
                                    <Template Context="assignment">
                                        <AssignmentActionButtons Assignment="@assignment"
                                                               OnActionClick="@HandleAssignmentAction" />
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>
                    </div>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Responses">
                    <div class="p-3">
                        <RadzenText TextStyle="TextStyle.H5" Class="mb-3">Response Analytics</RadzenText>
                        
                        <RadzenRow Gap="1rem">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenCard Class="text-center p-3">
                                    <RadzenIcon Icon="assignment_turned_in" Style="font-size: 2.5rem; color: var(--rz-success);" />
                                    <RadzenText TextStyle="TextStyle.H4" Class="fw-bold mt-2">@GetTotalResponses()</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Total Responses</RadzenText>
                                </RadzenCard>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenCard Class="text-center p-3">
                                    <RadzenIcon Icon="schedule" Style="font-size: 2.5rem; color: var(--rz-warning);" />
                                    <RadzenText TextStyle="TextStyle.H4" Class="fw-bold mt-2">@GetPendingResponses()</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Pending Responses</RadzenText>
                                </RadzenCard>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenCard Class="text-center p-3">
                                    <RadzenIcon Icon="trending_up" Style="font-size: 2.5rem; color: var(--rz-info);" />
                                    <RadzenText TextStyle="TextStyle.H4" Class="fw-bold mt-2">@GetCompletionRate()%</RadzenText>
                                    <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Completion Rate</RadzenText>
                                </RadzenCard>
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenRow Gap="1rem" Class="mt-4">
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenCard Class="p-3">
                                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold mb-3">Response Trends</RadzenText>
                                    <RadzenChart>
                                        <RadzenLineSeries Data="@GetResponseTrends()" 
                                                         CategoryProperty="Date" 
                                                         ValueProperty="Count"
                                                         Title="Daily Responses" />
                                    </RadzenChart>
                                </RadzenCard>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenCard Class="p-3">
                                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold mb-3">Popular Templates</RadzenText>
                                    <RadzenChart>
                                        <RadzenColumnSeries Data="@GetPopularTemplates()" 
                                                           CategoryProperty="Template" 
                                                           ValueProperty="ResponseCount"
                                                           Title="Response Count" />
                                    </RadzenChart>
                                </RadzenCard>
                            </RadzenColumn>
                        </RadzenRow>

                        <RadzenCard Class="p-3 mt-4">
                            <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold mb-3">Recent Responses</RadzenText>
                            <RadzenDataGrid Data="@GetRecentResponses()" 
                                           PageSize="5" 
                                           AllowPaging="true">
                                <Columns>
                                    <RadzenDataGridColumn Property="EmployeeName" Title="Employee" />
                                    <RadzenDataGridColumn Property="TemplateName" Title="Questionnaire" />
                                    <RadzenDataGridColumn Property="CompletedDate" Title="Completed" FormatString="{0:dd/MM/yyyy HH:mm}" />
                                    <RadzenDataGridColumn Property="Status" Title="Status">
                                        <Template Context="response">
                                            <RadzenBadge BadgeStyle="@GetResponseStatusBadge(response.Status)" Text="@response.Status.ToString()" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn Filterable="false" Sortable="false" Width="100px">
                                        <Template Context="response">
                                            <RadzenButton Text="View" 
                                                         ButtonStyle="ButtonStyle.Light" 
                                                         Size="ButtonSize.Small"
                                                         Click="@(() => ViewResponse(response))" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        </RadzenCard>
                    </div>
                </RadzenTabsItem>

                <RadzenTabsItem Text="Settings">
                    <div class="p-3">
                        <RadzenText TextStyle="TextStyle.H5" Class="mb-3">System Settings</RadzenText>
                        
                        <RadzenRow Gap="1rem">
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenCard Class="p-3">
                                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold mb-3">Email Notifications</RadzenText>
                                    <div class="settings-group">
                                        <RadzenCheckBox @bind-Value="@settings.SendAssignmentEmails" Name="assignmentEmails" />
                                        <RadzenLabel Text="Send assignment notifications" Component="assignmentEmails" Class="ms-2" />
                                    </div>
                                    <div class="settings-group mt-2">
                                        <RadzenCheckBox @bind-Value="@settings.SendReminderEmails" Name="reminderEmails" />
                                        <RadzenLabel Text="Send reminder emails" Component="reminderEmails" Class="ms-2" />
                                    </div>
                                    <div class="settings-group mt-2">
                                        <RadzenCheckBox @bind-Value="@settings.SendCompletionEmails" Name="completionEmails" />
                                        <RadzenLabel Text="Send completion confirmations" Component="completionEmails" Class="ms-2" />
                                    </div>
                                </RadzenCard>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6">
                                <RadzenCard Class="p-3">
                                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold mb-3">Default Settings</RadzenText>
                                    <div class="mb-3">
                                        <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Default Due Days</RadzenText>
                                        <RadzenNumeric @bind-Value="@settings.DefaultDueDays" Min="1" Max="365" Class="w-100" />
                                    </div>
                                    <div class="mb-3">
                                        <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Reminder Days Before Due</RadzenText>
                                        <RadzenNumeric @bind-Value="@settings.ReminderDaysBeforeDue" Min="1" Max="30" Class="w-100" />
                                    </div>
                                </RadzenCard>
                            </RadzenColumn>
                        </RadzenRow>

                        <div class="mt-4">
                            <RadzenButton Text="Save Settings" 
                                         ButtonStyle="ButtonStyle.Primary" 
                                         Icon="save"
                                         Click="@SaveSettings" />
                        </div>
                    </div>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </RadzenCard>
</div>

@code {
    [Inject] protected DialogService DialogService { get; set; } = default!;
    [Inject] protected NotificationService NotificationService { get; set; } = default!;
    [Inject] protected NavigationManager NavigationManager { get; set; } = default!;
    [Inject] protected IQuestionnaireApiService ApiService { get; set; } = default!;

    private List<QuestionnaireTemplate> templates = new();
    private List<QuestionnaireTemplate> filteredTemplates = new();

    private string searchText = "";
    private string categoryFilter = "";
    private bool showInactiveTemplates = false;

    // Assignment management
    private List<QuestionnaireAssignment> assignments = new();
    private List<QuestionnaireAssignment> filteredAssignments = new();
    private string assignmentSearchText = "";
    private AssignmentStatus? assignmentStatusFilter;

    private readonly List<string> categories = new()
    {
        "Performance Review", "Employee Feedback", "Training Assessment",
        "Customer Satisfaction", "Team Evaluation", "Goal Setting", "Other"
    };

    private readonly List<StatusOption> assignmentStatusOptions = new()
    {
        new("All", null),
        new("Assigned", AssignmentStatus.Assigned),
        new("In Progress", AssignmentStatus.InProgress),
        new("Completed", AssignmentStatus.Completed),
        new("Overdue", AssignmentStatus.Overdue),
        new("Cancelled", AssignmentStatus.Cancelled)
    };

    private SystemSettings settings = new();

    protected override async Task OnInitializedAsync()
    {
        await ExecuteSafelyAsync(async () =>
        {
            // Load all data in parallel for better performance
            var loadTemplatesTask = LoadTemplates();
            var loadAssignmentsTask = LoadAssignments();
            var loadAnalyticsTask = LoadAnalytics();

            await Task.WhenAll(loadTemplatesTask, loadAssignmentsTask, loadAnalyticsTask);

            // Load settings synchronously and apply filters
            LoadSettings();
            FilterTemplates();
            FilterAssignments();
        }, "InitializeQuestionnaireManagement");
    }

    protected override bool HasStateChanged()
    {
        return HasParameterChanged(nameof(templates), templates.Count) ||
               HasParameterChanged(nameof(assignments), assignments.Count) ||
               HasParameterChanged(nameof(searchText), searchText) ||
               HasParameterChanged(nameof(categoryFilter), categoryFilter);
    }

    private async Task LoadTemplates()
    {
        try
        {
            templates = await ApiService.GetAllTemplatesAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to load templates: {ex.Message}");
            templates = new List<QuestionnaireTemplate>();
        }
    }

    private void LoadSettings()
    {
        settings = new SystemSettings
        {
            SendAssignmentEmails = true,
            SendReminderEmails = true,
            SendCompletionEmails = false,
            DefaultDueDays = 14,
            ReminderDaysBeforeDue = 3
        };
    }

    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";
        FilterTemplates();
    }

    private void FilterTemplates()
    {
        filteredTemplates = templates.Where(t =>
            (showInactiveTemplates || t.Status != TemplateStatus.Archived) &&
            (string.IsNullOrWhiteSpace(categoryFilter) || t.Category == categoryFilter) &&
            (string.IsNullOrWhiteSpace(searchText) ||
             t.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             t.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase))
        ).ToList();

        StateHasChanged();
    }

    private async Task PreviewTemplate(QuestionnaireTemplate template)
    {
        NavigationManager.NavigateTo($"/questionnaire/{template.Id}");
    }

    private void EditTemplate(QuestionnaireTemplate template)
    {
        NavigationManager.NavigateTo($"/questionnaire-builder/{template.Id}");
    }

    private async Task CloneTemplate(QuestionnaireTemplate template)
    {
        NotificationService.Notify(NotificationSeverity.Success, "Cloned", $"Template '{template.Name}' has been cloned");
    }

    private async Task AssignTemplate(QuestionnaireTemplate template)
    {
        NotificationService.Notify(NotificationSeverity.Info, "Assign", $"Assignment dialog for '{template.Name}' would open here");
    }

    private async Task ToggleTemplateStatus(QuestionnaireTemplate template)
    {
        try
        {
            var originalStatus = template.Status;
            var newStatus = template.Status switch
            {
                TemplateStatus.Draft => TemplateStatus.Archived,
                TemplateStatus.Published => TemplateStatus.Archived,
                TemplateStatus.Archived => TemplateStatus.Draft,
                _ => TemplateStatus.Draft
            };

            template.Status = newStatus;
            template.LastModified = DateTime.Now;

            var updatedTemplate = await ApiService.UpdateTemplateAsync(template);
            if (updatedTemplate != null)
            {
                var statusAction = newStatus == TemplateStatus.Archived ? "archived" : "restored";
                NotificationService.Notify(NotificationSeverity.Success, "Status Updated", $"Template '{template.Name}' has been {statusAction}");
                FilterTemplates();
            }
            else
            {
                template.Status = originalStatus;
                NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to update template status");
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to update template: {ex.Message}");
        }
    }

    private async Task SaveSettings()
    {
        // Save to database
        NotificationService.Notify(NotificationSeverity.Success, "Saved", "Settings have been saved successfully");
    }

    // Analytics methods
    private Dictionary<string, object> analyticsData = new();
    
    private async Task LoadAnalytics()
    {
        try
        {
            analyticsData = await ApiService.GetOverallAnalyticsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load analytics: {ex.Message}");
            analyticsData = new Dictionary<string, object>();
        }
    }
    
    private int GetTotalResponses() => 
        analyticsData.TryGetValue("TotalResponses", out var value) && value is int responses ? responses : 0;
        
    private int GetPendingResponses() => 
        analyticsData.TryGetValue("TotalAssignments", out var total) && 
        analyticsData.TryGetValue("CompletedResponses", out var completed) && 
        total is int totalInt && completed is int completedInt ? totalInt - completedInt : 0;
        
    private int GetCompletionRate() => 
        analyticsData.TryGetValue("OverallCompletionRate", out var value) && value is double rate ? (int)Math.Round(rate) : 0;

    private List<ResponseTrend> GetResponseTrends()
    {
        return new List<ResponseTrend>
        {
            new() { Date = DateTime.Now.AddDays(-6).ToString("MM/dd"), Count = 12 },
            new() { Date = DateTime.Now.AddDays(-5).ToString("MM/dd"), Count = 19 },
            new() { Date = DateTime.Now.AddDays(-4).ToString("MM/dd"), Count = 15 },
            new() { Date = DateTime.Now.AddDays(-3).ToString("MM/dd"), Count = 22 },
            new() { Date = DateTime.Now.AddDays(-2).ToString("MM/dd"), Count = 18 },
            new() { Date = DateTime.Now.AddDays(-1).ToString("MM/dd"), Count = 25 },
            new() { Date = DateTime.Now.ToString("MM/dd"), Count = 8 }
        };
    }

    private List<TemplatePopularity> GetPopularTemplates()
    {
        return new List<TemplatePopularity>
        {
            new() { Template = "Performance Review", ResponseCount = 45 },
            new() { Template = "Team Feedback", ResponseCount = 32 },
            new() { Template = "Training Assessment", ResponseCount = 28 },
            new() { Template = "Goal Setting", ResponseCount = 21 }
        };
    }

    private List<RecentResponseInfo> GetRecentResponses()
    {
        return new List<RecentResponseInfo>
        {
            new() { EmployeeName = "John Doe", TemplateName = "Performance Review", CompletedDate = DateTime.Now.AddHours(-2), Status = ResponseStatus.Completed },
            new() { EmployeeName = "Jane Smith", TemplateName = "Team Feedback", CompletedDate = DateTime.Now.AddHours(-4), Status = ResponseStatus.Completed },
            new() { EmployeeName = "Bob Johnson", TemplateName = "Training Assessment", CompletedDate = DateTime.Now.AddHours(-6), Status = ResponseStatus.InProgress }
        };
    }

    private BadgeStyle GetResponseStatusBadge(ResponseStatus status)
    {
        return status switch
        {
            ResponseStatus.NotStarted => BadgeStyle.Light,
            ResponseStatus.InProgress => BadgeStyle.Warning,
            ResponseStatus.Completed => BadgeStyle.Info,
            ResponseStatus.Submitted => BadgeStyle.Success,
            _ => BadgeStyle.Secondary
        };
    }

    private async Task ViewResponse(RecentResponseInfo response)
    {
        NotificationService.Notify(NotificationSeverity.Info, "View Response", $"Viewing response from {response.EmployeeName}");
    }

    // Assignment management methods
    private async Task LoadAssignments()
    {
        try
        {
            assignments = await ApiService.GetAllAssignmentsAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to load assignments: {ex.Message}");
            assignments = new List<QuestionnaireAssignment>();
        }
    }

    private void FilterAssignments()
    {
        filteredAssignments = assignments.Where(a =>
            (assignmentStatusFilter == null || a.Status == assignmentStatusFilter) &&
            (string.IsNullOrWhiteSpace(assignmentSearchText) ||
             a.EmployeeName.Contains(assignmentSearchText, StringComparison.OrdinalIgnoreCase) ||
             a.EmployeeEmail.Contains(assignmentSearchText, StringComparison.OrdinalIgnoreCase))
        ).ToList();

        StateHasChanged();
    }

    private void OnAssignmentSearchTextChanged(ChangeEventArgs e)
    {
        assignmentSearchText = e.Value?.ToString() ?? "";
        FilterAssignments();
    }

    private string GetAssignmentTemplateName(Guid templateId)
    {
        return templates.FirstOrDefault(t => t.Id == templateId)?.Name ?? "Unknown Template";
    }

    private string GetAssignmentTemplateCategory(Guid templateId)
    {
        return templates.FirstOrDefault(t => t.Id == templateId)?.Category ?? "Unknown";
    }

    private BadgeStyle GetAssignmentStatusBadgeStyle(AssignmentStatus status)
    {
        return status switch
        {
            AssignmentStatus.Assigned => BadgeStyle.Secondary,
            AssignmentStatus.InProgress => BadgeStyle.Info,
            AssignmentStatus.Completed => BadgeStyle.Success,
            AssignmentStatus.Overdue => BadgeStyle.Danger,
            AssignmentStatus.Cancelled => BadgeStyle.Light,
            _ => BadgeStyle.Secondary
        };
    }

    // Can* methods moved to AssignmentActionButtons component

    private async Task HandleAssignmentAction(AssignmentActionButtons.AssignmentActionEventArgs args)
    {
        switch (args.Action)
        {
            case "view":
                await ViewAssignmentDetails(args.Assignment);
                break;
            case "edit":
                await EditAssignment(args.Assignment);
                break;
            case "remind":
                await SendReminder(args.Assignment);
                break;
            case "cancel":
                await CancelAssignment(args.Assignment);
                break;
        }
    }

    private async Task ViewAssignmentDetails(QuestionnaireAssignment assignment)
    {
        try
        {
            var template = templates.FirstOrDefault(t => t.Id == assignment.TemplateId);

            await DialogService.OpenAsync<AssignmentDetailsDialog>("Assignment Details",
                new Dictionary<string, object>
                {
                    { "Assignment", assignment },
                    { "Questionnaire", template! },
                    { "OnEditClick", EventCallback.Factory.Create(this, () => EditAssignment(assignment)) },
                    { "OnCloseClick", EventCallback.Factory.Create(this, () => DialogService.Close()) }
                },
                new DialogOptions
                {
                    Width = "1000px",
                    Height = "auto",
                    Resizable = true,
                    Draggable = true,
                    CloseDialogOnOverlayClick = true,
                    ShowClose = true
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error",
                $"Failed to open assignment details: {ex.Message}");
        }
    }

    private async Task EditAssignment(QuestionnaireAssignment assignment)
    {
        try
        {
            var template = templates.FirstOrDefault(t => t.Id == assignment.TemplateId);

            await DialogService.OpenAsync<EditAssignmentDialog>("Edit Assignment",
                new Dictionary<string, object>
                {
                    { "Assignment", assignment },
                    { "Questionnaire", template! },
                    { "OnSave", EventCallback.Factory.Create<EditAssignmentDialog.EditAssignmentModel>(this, (model) => SaveAssignmentChanges(assignment, model)) },
                    { "OnCancel", EventCallback.Factory.Create(this, () => DialogService.Close()) }
                },
                new DialogOptions
                {
                    Width = "1200px",
                    Height = "auto",
                    Resizable = true,
                    Draggable = true,
                    CloseDialogOnOverlayClick = false,
                    ShowClose = true
                });
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error",
                $"Failed to open edit dialog: {ex.Message}");
        }
    }

    private async Task SendReminder(QuestionnaireAssignment assignment)
    {
        try
        {
            var confirmed = await DialogService.Confirm(
                $"Send a reminder notification to {assignment.EmployeeName}?",
                "Send Reminder",
                new ConfirmOptions { OkButtonText = "Send", CancelButtonText = "Cancel" });

            if (confirmed == true)
            {
                // TODO: Implement actual reminder API call
                await Task.Delay(1000); // Simulate API call

                NotificationService.Notify(NotificationSeverity.Success,
                    "Reminder Sent",
                    $"Reminder notification sent successfully to {assignment.EmployeeName}",
                    duration: 5000);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error",
                $"Failed to send reminder: {ex.Message}");
        }
    }

    private async Task CancelAssignment(QuestionnaireAssignment assignment)
    {
        try
        {
            var confirmed = await DialogService.Confirm(
                $"Are you sure you want to cancel the assignment for {assignment.EmployeeName}? This action cannot be undone.",
                "Cancel Assignment",
                new ConfirmOptions { OkButtonText = "Cancel Assignment", CancelButtonText = "Keep Assignment" });

            if (confirmed == true)
            {
                // TODO: Call actual API to update assignment status
                await Task.Delay(1000); // Simulate API call

                assignment.Status = AssignmentStatus.Cancelled;
                FilterAssignments();

                NotificationService.Notify(NotificationSeverity.Success,
                    "Assignment Cancelled",
                    $"Assignment has been cancelled for {assignment.EmployeeName}",
                    duration: 5000);
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error",
                $"Failed to cancel assignment: {ex.Message}");
        }
    }

    private async Task SaveAssignmentChanges(QuestionnaireAssignment assignment, EditAssignmentDialog.EditAssignmentModel editModel)
    {
        try
        {
            // TODO: Implement actual API call to update assignment
            await Task.Delay(1000); // Simulate API call

            // Update the local assignment object
            assignment.Status = editModel.Status;
            assignment.DueDate = editModel.DueDate;
            assignment.Notes = editModel.Notes;
            assignment.AssignedBy = editModel.AssignedBy;

            // Refresh the filtered assignments
            FilterAssignments();

            NotificationService.Notify(NotificationSeverity.Success,
                "Assignment Updated",
                $"Assignment for {assignment.EmployeeName} has been updated successfully",
                duration: 5000);

            DialogService.Close();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error",
                $"Failed to update assignment: {ex.Message}");
        }
    }

    // Helper classes
    public class SystemSettings
    {
        public bool SendAssignmentEmails { get; set; }
        public bool SendReminderEmails { get; set; }
        public bool SendCompletionEmails { get; set; }
        public int DefaultDueDays { get; set; }
        public int ReminderDaysBeforeDue { get; set; }
    }

    public class ResponseTrend
    {
        public string Date { get; set; } = "";
        public int Count { get; set; }
    }

    public class TemplatePopularity
    {
        public string Template { get; set; } = "";
        public int ResponseCount { get; set; }
    }

    public class RecentResponseInfo
    {
        public string EmployeeName { get; set; } = "";
        public string TemplateName { get; set; } = "";
        public DateTime CompletedDate { get; set; }
        public ResponseStatus Status { get; set; }
    }

    public class StatusOption
    {
        public StatusOption(string text, AssignmentStatus? value)
        {
            Text = text;
            Value = value;
        }
        public string Text { get; set; }
        public AssignmentStatus? Value { get; set; }
    }

    // Status helper methods
    private BadgeStyle GetStatusBadgeStyle(TemplateStatus status) => status switch
    {
        TemplateStatus.Published => BadgeStyle.Success,
        TemplateStatus.Draft => BadgeStyle.Warning,
        TemplateStatus.Archived => BadgeStyle.Danger,
        _ => BadgeStyle.Secondary
    };

    private ButtonStyle GetToggleButtonStyle(TemplateStatus status) => status switch
    {
        TemplateStatus.Archived => ButtonStyle.Success,
        _ => ButtonStyle.Warning
    };

    private string GetToggleButtonIcon(TemplateStatus status) => status switch
    {
        TemplateStatus.Archived => "restore",
        _ => "archive"
    };

    private string GetToggleButtonTitle(TemplateStatus status) => status switch
    {
        TemplateStatus.Archived => "Restore",
        _ => "Archive"
    };
}