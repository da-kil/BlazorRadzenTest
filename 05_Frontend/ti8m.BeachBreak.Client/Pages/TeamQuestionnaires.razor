@page "/team/questionnaires"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components.Shared
@using ti8m.BeachBreak.Client.Components.Dialogs
@inherits BaseQuestionnaireListPage
@inject IManagerQuestionnaireService ManagerQuestionnaireService
@inject IQuestionnaireTemplateService TemplateService

<PageTitle>Team Questionnaires</PageTitle>

@if (configuration != null && dataService != null)
{
	<GenericQuestionnaireListPage Configuration="@configuration" DataService="@dataService" />
}
else if (isLoading)
{
	<div class="text-center p-5">
		<RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
		<RadzenText TextStyle="TextStyle.Body1" Class="text-muted mt-3">Loading team data...</RadzenText>
	</div>
}

@code {
	// Manager-specific state
	private List<QuestionnaireAssignment> allAssignments = new();
	private List<EmployeeDto> teamMembers = new();

	protected override string GetInitializationContext() => "InitializeTeamQuestionnaires";

	protected override async Task LoadRoleSpecificDataAsync()
	{
		// Create the data service
		dataService = new ManagerQuestionnaireDataService(ManagerQuestionnaireService, TemplateService);

		// Load data in parallel
		var assignmentsTask = ManagerQuestionnaireService.GetTeamAssignmentsAsync();
		var teamMembersTask = ManagerQuestionnaireService.GetTeamMembersAsync();

		await Task.WhenAll(assignmentsTask, teamMembersTask);

		allAssignments = assignmentsTask.Result;
		teamMembers = teamMembersTask.Result;
	}

	protected override QuestionnairePageConfiguration CreateConfiguration()
	{
		return QuestionnairePageConfigurationFactory.CreateManagerConfiguration(
			allAssignments,
			teamMembers,
			categories);
	}

	protected override void ConfigureActions()
	{
		var exportAction = configuration?.Actions.FirstOrDefault(a => a.Id == "export");
		if (exportAction != null)
		{
			exportAction.OnClick = ExportTeamReport;
		}
	}

	private async Task ExportTeamReport()
	{
		ShowInfo("Team report export functionality would be implemented here");
	}
}
