@page "/questionnaire-builder"
@page "/questionnaire-builder/{TemplateId:guid?}"
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Components
@using ti8m.BeachBreak.Client.Components.QuestionnaireBuilder
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services

<PageTitle>Questionnaire Builder</PageTitle>

<!-- Header -->
<div class="questionnaire-builder-header">
	<div class="container-fluid">
		<div class="d-flex justify-content-between align-items-center py-3">
			<div class="d-flex align-items-center">
				<RadzenText TextStyle="TextStyle.H4" Class="text-white fw-bold mb-0">
					<RadzenIcon Icon="psychology" Class="me-2" />
					@(IsEditMode ? "Questionnaire Editor" : "Questionnaire Builder")
				</RadzenText>
				<div class="status-badge ms-3">
					@{
						var status = IsEditMode ? template.Status : TemplateStatus.Draft;
						var statusText = IsEditMode ? TemplateStatusHelper.GetStatusText(template.Status) : "NEW";
						var statusIcon = IsEditMode ? TemplateStatusHelper.GetStatusIcon(template.Status) : "add_circle";
						var statusClass = IsEditMode ? TemplateStatusHelper.GetStatusBadgeClass(template.Status) : "badge bg-info text-dark";
					}
					<span class="@statusClass d-flex align-items-center px-3 py-1">
						<RadzenIcon Icon="@statusIcon" Class="me-1" Style="font-size: 0.8rem;" />
						@statusText
					</span>
				</div>
			</div>
			<div class="d-flex gap-2">
				<RadzenButton Text="Preview" ButtonStyle="ButtonStyle.Light" Icon="preview" Click="@PreviewQuestionnaire" />
				@{
					var currentStatus = IsEditMode ? template.Status : TemplateStatus.Draft;
				}
				@switch (currentStatus)
				{
					case TemplateStatus.Draft:
						<RadzenButton Text="Save" ButtonStyle="ButtonStyle.Secondary" Icon="save" Click="@SaveQuestionnaire" />
						<RadzenButton Text="Publish" ButtonStyle="ButtonStyle.Success" Icon="publish" Click="@PublishQuestionnaire" />
						break;
					case TemplateStatus.Published:
						<RadzenButton Text="Save" ButtonStyle="ButtonStyle.Primary" Icon="save" Click="@SaveQuestionnaire" />
						<RadzenButton Text="Unpublish" ButtonStyle="ButtonStyle.Warning" Icon="unpublished" Click="@UnpublishQuestionnaire" />
						break;
					case TemplateStatus.PublishedInactive:
						<RadzenButton Text="Enable" ButtonStyle="ButtonStyle.Success" Icon="check_circle" Click="@EnableQuestionnaire" />
						break;
					case TemplateStatus.Inactive:
						<RadzenButton Text="Activate" ButtonStyle="ButtonStyle.Primary" Icon="play_arrow" Click="@ActivateQuestionnaire" />
						break;
				}
			</div>
		</div>
	</div>
</div>

<!-- Progress Steps -->
<div class="progress-steps-container">
	<div class="container-fluid">
		<div class="progress-steps py-3">
			<div class="step @(currentStep == 1 ? "active" : currentStep > 1 ? "completed" : "")" @onclick="() => SetCurrentStep(1)">
				<div class="step-circle">
					<RadzenIcon Icon="@(currentStep > 1 ? "check" : "info")" />
				</div>
				<span class="step-text">Basic Info</span>
			</div>
			<div class="step-connector @(currentStep > 1 ? "completed" : "")"></div>
			<div class="step @(currentStep == 2 ? "active" : currentStep > 2 ? "completed" : "")" @onclick="() => SetCurrentStep(2)">
				<div class="step-circle">
					<RadzenIcon Icon="@(currentStep > 2 ? "check" : "view_list")" />
				</div>
				<span class="step-text">Build Sections</span>
			</div>
			<div class="step-connector @(currentStep > 2 ? "completed" : "")"></div>
			<div class="step @(currentStep == 3 ? "active" : currentStep > 3 ? "completed" : "")" @onclick="() => SetCurrentStep(3)">
				<div class="step-circle">
					<RadzenIcon Icon="@(currentStep > 3 ? "check" : "preview")" />
				</div>
				<span class="step-text">Review & Publish</span>
			</div>
		</div>
	</div>
</div>

<!-- Main Content -->
<div class="main-content-area">
	<div class="container-fluid">
		@if (showQuestionEditor)
		{
			<!-- Full-screen Question Editor -->
			<div class="question-editor-fullscreen">
				<div class="editor-header">
					<div class="d-flex justify-content-between align-items-center py-3">
						<div class="d-flex align-items-center">
							<RadzenButton ButtonStyle="ButtonStyle.Light" Icon="arrow_back" Click="@CloseQuestionEditor" Class="me-3" />
							<RadzenText TextStyle="TextStyle.H5" Class="mb-0 fw-bold">Edit Question: @GetCurrentQuestionTitle()</RadzenText>
						</div>
						<div class="d-flex gap-2">
							<RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Secondary" Click="@CloseQuestionEditor" />
							<RadzenButton Text="Save Question" ButtonStyle="ButtonStyle.Primary" Icon="save" Click="@SaveCurrentQuestion" />
						</div>
					</div>
				</div>
				<div class="editor-content p-4">
					@if (editingQuestion != null)
					{
						<QuestionCard Question="@editingQuestion"
									 CanMoveUp="false"
									 CanMoveDown="false"
									 QuestionTypeLabels="@questionTypeLabels"
									 OnEdit="@(() => { })"
									 OnMoveUp="@(() => { })"
									 OnMoveDown="@(() => { })"
									 OnDelete="@(() => { })" />
					}
				</div>
			</div>
		}
		else
		{
			<!-- Step Content -->
			@if (currentStep == 1)
			{
				<div class="step-content">
					<div class="step-header">
						<RadzenText TextStyle="TextStyle.H4" Class="mb-2">Template Information</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1" Class="text-muted mb-4">@GetStatusDescription()</RadzenText>
					</div>
					<BasicInfoTab Template="@template" Categories="@categories" />
					<div class="step-navigation mt-4 d-flex justify-content-end">
						<RadzenButton Text="Next: Build Sections" ButtonStyle="ButtonStyle.Primary" Icon="arrow_forward" Click="@(() => SetCurrentStep(2))" />
					</div>
				</div>
			}
			else if (currentStep == 2)
			{
				<div class="step-content">
					<div class="step-header">
						<RadzenText TextStyle="TextStyle.H4" Class="mb-2">Build Sections</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1" Class="text-muted mb-4">Organize your assessment into logical sections and configure questions</RadzenText>
					</div>
					<QuestionsTab Template="@template"
								  ShowQuestionTypeSelection="@showQuestionTypeSelection"
								  SelectedSectionIndex="@selectedSectionIndex"
								  QuestionTypeLabels="@questionTypeLabels"
								  OnAddSection="@AddSection"
								  OnMoveSectionUp="@MoveSectionUp"
								  OnMoveSectionDown="@MoveSectionDown"
								  OnRemoveSection="@RemoveSection"
								  OnShowAddQuestionDialog="@ShowAddQuestionDialog"
								  OnCancelQuestionTypeSelection="@CancelQuestionTypeSelection"
								  OnAddQuestionOfType="@AddQuestionOfType"
								  OnEditQuestion="@OpenQuestionEditor"
								  OnMoveQuestionUp="@MoveQuestionUp"
								  OnMoveQuestionDown="@MoveQuestionDown"
								  OnRemoveQuestion="@RemoveQuestion" />
					<div class="step-navigation mt-4 d-flex justify-content-between">
						<RadzenButton Text="Previous: Basic Info" ButtonStyle="ButtonStyle.Light" Icon="arrow_back" Click="@(() => SetCurrentStep(1))" />
						<RadzenButton Text="Next: Review" ButtonStyle="ButtonStyle.Primary" Icon="arrow_forward" Click="@(() => SetCurrentStep(3))" />
					</div>
				</div>
			}
			else if (currentStep == 3)
			{
				<div class="step-content">
					<div class="step-header">
						<RadzenText TextStyle="TextStyle.H4" Class="mb-2">Review & Publish</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1" Class="text-muted mb-4">Review your questionnaire and make it available for assignments</RadzenText>
					</div>
					<PreviewTab Template="@template" QuestionTypeLabels="@questionTypeLabels" />
					<div class="step-navigation mt-4 d-flex justify-content-between">
						<RadzenButton Text="Previous: Build Sections" ButtonStyle="ButtonStyle.Light" Icon="arrow_back" Click="@(() => SetCurrentStep(2))" />
						<div class="d-flex gap-2">
							<RadzenButton Text="Save Draft" ButtonStyle="ButtonStyle.Secondary" Icon="save" Click="@SaveQuestionnaire" />
							<RadzenButton Text="Publish" ButtonStyle="ButtonStyle.Success" Icon="publish" Click="@PublishQuestionnaire" />
						</div>
					</div>
				</div>
			}
		}
	</div>
</div>

@code {
	[Parameter] public Guid? TemplateId { get; set; }
	[Inject] protected DialogService DialogService { get; set; } = default!;
	[Inject] protected NotificationService NotificationService { get; set; } = default!;
	[Inject] protected NavigationManager NavigationManager { get; set; } = default!;
	[Inject] protected IQuestionnaireApiService ApiService { get; set; } = default!;
	[Inject] protected ICategoryApiService CategoryService { get; set; } = default!;

	private QuestionnaireTemplate template = new();
	private bool IsEditMode => TemplateId.HasValue;

	// Step navigation state
	private int currentStep = 1;

	// Question editor state
	private bool showQuestionEditor = false;
	private QuestionItem? editingQuestion = null;
	private int editingSectionIndex = -1;
	private int editingQuestionIndex = -1;

	// Question type selection state
	private bool showQuestionTypeSelection = false;
	private int selectedSectionIndex = -1;
	private QuestionType? selectedQuestionType = null;

	// Editable question type labels
	private Dictionary<QuestionType, string> questionTypeLabels = new()
	{
		{ QuestionType.SelfAssessment, "Self-Assessment" },
		{ QuestionType.GoalAchievement, "Goal Achievement" },
		{ QuestionType.TextQuestion, "Text Question" }
	};

	private List<string> categories = new();

	protected override async Task OnInitializedAsync()
	{
		// Load categories first
		await LoadCategories();

		if (IsEditMode && TemplateId.HasValue)
		{
			await LoadTemplate(TemplateId.Value);
		}
		else
		{
			// Initialize empty template with default values
			template = new QuestionnaireTemplate
			{
				Name = "",
				Description = "",
				Category = "",
				Settings = new QuestionnaireSettings()
			};
		}
	}

	private async Task LoadCategories()
	{
		try
		{
			categories = await CategoryService.GetCategoryNamesAsync();
		}
		catch (Exception ex)
		{
			NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to load categories: {ex.Message}");
			// Fallback to default categories if API fails
			categories = new List<string>
			{
				"Performance Review",
				"Employee Feedback",
				"Training Assessment",
				"Goal Setting",
				"Other"
			};
		}
	}

	private async Task LoadTemplate(Guid templateId)
	{
		try
		{
			var loadedTemplate = await ApiService.GetTemplateByIdAsync(templateId);
			if (loadedTemplate != null)
			{
				template = loadedTemplate;
			}
			else
			{
				NotificationService.Notify(NotificationSeverity.Warning, "Not Found", "Template not found. Creating new template.");
				template = new QuestionnaireTemplate();
				// Clear the TemplateId parameter to switch to create mode
				TemplateId = null;
			}
		}
		catch (Exception ex)
		{
			NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to load template: {ex.Message}");
			template = new QuestionnaireTemplate();
			TemplateId = null;
		}
	}

	private void SetCurrentStep(int step)
	{
		currentStep = step;
		StateHasChanged();
	}

	private async Task OpenQuestionEditor((int sectionIndex, int questionIndex) indices)
	{
		if (indices.sectionIndex >= 0 && indices.sectionIndex < template.Sections.Count &&
			indices.questionIndex >= 0 && indices.questionIndex < template.Sections[indices.sectionIndex].Questions.Count)
		{
			editingSectionIndex = indices.sectionIndex;
			editingQuestionIndex = indices.questionIndex;
			// Create a deep copy of the question for editing
			var originalQuestion = template.Sections[indices.sectionIndex].Questions[indices.questionIndex];
			editingQuestion = new QuestionItem
			{
				Id = originalQuestion.Id,
				Title = originalQuestion.Title,
				Description = originalQuestion.Description,
				Type = originalQuestion.Type,
				Order = originalQuestion.Order,
				IsRequired = originalQuestion.IsRequired,
				Configuration = new Dictionary<string, object>(originalQuestion.Configuration)
			};
			showQuestionEditor = true;
			StateHasChanged();
		}
	}

	private void CloseQuestionEditor()
	{
		showQuestionEditor = false;
		editingQuestion = null;
		editingSectionIndex = -1;
		editingQuestionIndex = -1;
		StateHasChanged();
	}

	private async Task SaveCurrentQuestion()
	{
		if (editingQuestion != null && editingSectionIndex >= 0 && editingQuestionIndex >= 0)
		{
			// Save the edited question back to the template
			template.Sections[editingSectionIndex].Questions[editingQuestionIndex] = editingQuestion;
			CloseQuestionEditor();
			NotificationService.Notify(NotificationSeverity.Success, "Saved", "Question updated successfully");
		}
	}

	private string GetCurrentQuestionTitle()
	{
		return editingQuestion?.Title ?? "Untitled Question";
	}

	private void AddSection()
	{
		var newSection = new QuestionSection
		{
			Title = $"Section {template.Sections.Count + 1}",
			Order = template.Sections.Count,
			IsRequired = true
		};
		template.Sections.Add(newSection);
	}

	private async Task RemoveSection(int index)
	{
		if (index >= 0 && index < template.Sections.Count)
		{
			var section = template.Sections[index];
			var sectionName = string.IsNullOrWhiteSpace(section.Title) ? $"Section {index + 1}" : section.Title;
			var confirmed = await DialogService.Confirm($"Are you sure you want to delete '{sectionName}'? This will also delete all questions in this section.", "Delete Section",
				new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

			if (confirmed.HasValue && confirmed.Value)
			{
				template.Sections.RemoveAt(index);
				// Reorder remaining sections
				for (int i = 0; i < template.Sections.Count; i++)
				{
					template.Sections[i].Order = i;
				}
			}
		}
	}

	private void MoveSectionUp(int index)
	{
		if (index > 0)
		{
			(template.Sections[index], template.Sections[index - 1]) = (template.Sections[index - 1], template.Sections[index]);
			template.Sections[index].Order = index;
			template.Sections[index - 1].Order = index - 1;
		}
	}

	private void MoveSectionDown(int index)
	{
		if (index < template.Sections.Count - 1)
		{
			(template.Sections[index], template.Sections[index + 1]) = (template.Sections[index + 1], template.Sections[index]);
			template.Sections[index].Order = index;
			template.Sections[index + 1].Order = index + 1;
		}
	}

	private void ShowAddQuestionDialog(int sectionIndex)
	{
		// Show inline question type selection
		showQuestionTypeSelection = true;
		selectedSectionIndex = sectionIndex;
		selectedQuestionType = null;
	}


	// These dialog-based editing methods are no longer needed as editing is now inline
	// Keeping the helper methods for configuration management

	private List<CompetencyDefinition> GetCompetenciesFromConfiguration(QuestionItem question)
	{
		if (question.Configuration.ContainsKey("Competencies"))
		{
			var competenciesObj = question.Configuration["Competencies"];

			// Handle direct cast (when set in editor)
			if (competenciesObj is List<CompetencyDefinition> competencies)
			{
				return competencies;
			}

			// Handle JSON deserialization (when loaded from API)
			if (competenciesObj is System.Text.Json.JsonElement jsonElement)
			{
				try
				{
					if (jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
					{
						return System.Text.Json.JsonSerializer.Deserialize<List<CompetencyDefinition>>(jsonElement.GetRawText(), new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<CompetencyDefinition>();
					}
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Error deserializing competencies: {ex.Message}");
				}
			}

			// Handle string representation (backup case)
			if (competenciesObj is string jsonString)
			{
				try
				{
					return System.Text.Json.JsonSerializer.Deserialize<List<CompetencyDefinition>>(jsonString) ?? new List<CompetencyDefinition>();
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Error deserializing competencies from string: {ex.Message}");
				}
			}
		}

		// Return default competencies if none exist
		return new List<CompetencyDefinition>();
	}

	private void SaveCompetenciesToConfiguration(QuestionItem question, List<CompetencyDefinition> competencies)
	{
		question.Configuration["Competencies"] = competencies;
	}

	// These helper methods are no longer needed since editing is now handled inline in QuestionCard.razor
	// Keeping them for potential future use, but with proper type safety

	private async Task RemoveQuestion(int sectionIndex, int questionIndex)
	{
		var section = template.Sections[sectionIndex];
		if (questionIndex >= 0 && questionIndex < section.Questions.Count)
		{
			var question = section.Questions[questionIndex];
			var questionName = string.IsNullOrWhiteSpace(question.Title) ? $"Question {questionIndex + 1}" : question.Title;
			var confirmed = await DialogService.Confirm($"Are you sure you want to delete '{questionName}'?", "Delete Question",
				new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

			if (confirmed.HasValue && confirmed.Value)
			{
				section.Questions.RemoveAt(questionIndex);
				// Reorder remaining questions
				for (int i = 0; i < section.Questions.Count; i++)
				{
					section.Questions[i].Order = i;
				}
			}
		}
	}

	private void MoveQuestionUp(int sectionIndex, int questionIndex)
	{
		var questions = template.Sections[sectionIndex].Questions;
		if (questionIndex > 0)
		{
			(questions[questionIndex], questions[questionIndex - 1]) = (questions[questionIndex - 1], questions[questionIndex]);
			questions[questionIndex].Order = questionIndex;
			questions[questionIndex - 1].Order = questionIndex - 1;
		}
	}

	private void MoveQuestionDown(int sectionIndex, int questionIndex)
	{
		var questions = template.Sections[sectionIndex].Questions;
		if (questionIndex < questions.Count - 1)
		{
			(questions[questionIndex], questions[questionIndex + 1]) = (questions[questionIndex + 1], questions[questionIndex]);
			questions[questionIndex].Order = questionIndex;
			questions[questionIndex + 1].Order = questionIndex + 1;
		}
	}

	private string GetQuestionTypeIcon(QuestionType type)
	{
		return type switch
		{
			QuestionType.SelfAssessment => "self_improvement",
			QuestionType.GoalAchievement => "track_changes",
			QuestionType.TextQuestion => "psychology",
			_ => "help"
		};
	}

	// Question preview is now handled inline within the QuestionCard component

private async Task PreviewQuestionnaire()
{
	// Open questionnaire in preview mode
	NotificationService.Notify(NotificationSeverity.Info, "Preview", "Preview functionality would open here");
}

private async Task SaveQuestionnaire()
{
	if (!ValidateQuestionnaire())
	{
		return;
	}

	try
	{
		template.LastModified = DateTime.Now;

		if (IsEditMode)
		{
			var updated = await ApiService.UpdateTemplateAsync(template);
			if (updated != null)
			{
				NotificationService.Notify(NotificationSeverity.Success, "Saved", "Questionnaire template updated successfully");
			}
			else
			{
				NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to update template - no response from server");
			}
		}
		else
		{
			var created = await ApiService.CreateTemplateAsync(template);
			template.Id = created.Id; // Update with the server-generated ID
			NotificationService.Notify(NotificationSeverity.Success, "Saved", "Questionnaire template created successfully");
		}
	}
	catch (Exception ex)
	{
		NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to save template: {ex.Message}");
	}
}

private async Task PublishQuestionnaire()
{
	if (!ValidateQuestionnaire())
	{
		return;
	}

	try
	{
		// Save the template first
		await SaveQuestionnaire();

		// Set as published
		template.IsPublished = true;
		template.IsActive = true; // Ensure it's also active
		template.LastModified = DateTime.Now;
		template.LastPublishedDate = DateTime.Now;

		// Set PublishedDate only on first publish
		if (template.PublishedDate == null)
		{
			template.PublishedDate = DateTime.Now;
		}

		// TODO: Set PublishedBy when user context is available
		// template.PublishedBy = currentUser.Name;

		// Update the template with published status
		if (IsEditMode)
		{
			var updated = await ApiService.UpdateTemplateAsync(template);
			if (updated != null)
			{
				NotificationService.Notify(NotificationSeverity.Success, "Published", "Questionnaire template is now published and available for assignments");
			}
			else
			{
				NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to publish template");
				// Revert on failure
				template.IsPublished = false;
				template.LastPublishedDate = null;
			}
		}
		else
		{
			// For new templates, properties are already set, just show success
			NotificationService.Notify(NotificationSeverity.Success, "Published", "Questionnaire template created and published successfully");
		}
	}
	catch (Exception ex)
	{
		NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to publish template: {ex.Message}");
		// Revert on failure
		template.IsPublished = false;
		template.LastPublishedDate = null;
	}
}

private async Task UnpublishQuestionnaire()
{
	try
	{
		// Set as unpublished (back to draft)
		template.IsPublished = false;
		template.LastModified = DateTime.Now;

		// Update the template with unpublished status
		var updated = await ApiService.UpdateTemplateAsync(template);
		if (updated != null)
		{
			NotificationService.Notify(NotificationSeverity.Info, "Unpublished", "Questionnaire template is now in draft mode and unavailable for new assignments");
		}
		else
		{
			NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to unpublish template");
			template.IsPublished = true; // Revert on failure
		}
	}
	catch (Exception ex)
	{
		NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to unpublish template: {ex.Message}");
		template.IsPublished = true; // Revert on failure
	}
}

private async Task DisableQuestionnaire()
{
	try
	{
		// Set as inactive while keeping published status
		template.IsActive = false;
		template.LastModified = DateTime.Now;

		var updated = await ApiService.UpdateTemplateAsync(template);
		if (updated != null)
		{
			NotificationService.Notify(NotificationSeverity.Warning, "Disabled", "Questionnaire template is temporarily disabled but remains published");
		}
		else
		{
			NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to disable template");
			template.IsActive = true; // Revert on failure
		}
	}
	catch (Exception ex)
	{
		NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to disable template: {ex.Message}");
		template.IsActive = true; // Revert on failure
	}
}

private async Task EnableQuestionnaire()
{
	try
	{
		// Re-activate while keeping published status
		template.IsActive = true;
		template.LastModified = DateTime.Now;

		var updated = await ApiService.UpdateTemplateAsync(template);
		if (updated != null)
		{
			NotificationService.Notify(NotificationSeverity.Success, "Enabled", "Questionnaire template is now active and available for assignments");
		}
		else
		{
			NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to enable template");
			template.IsActive = false; // Revert on failure
		}
	}
	catch (Exception ex)
	{
		NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to enable template: {ex.Message}");
		template.IsActive = false; // Revert on failure
	}
}

private async Task ActivateQuestionnaire()
{
	try
	{
		// Activate but keep as draft (unpublished)
		template.IsActive = true;
		template.LastModified = DateTime.Now;

		var updated = await ApiService.UpdateTemplateAsync(template);
		if (updated != null)
		{
			NotificationService.Notify(NotificationSeverity.Success, "Activated", "Questionnaire template is now active and ready for editing");
		}
		else
		{
			NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to activate template");
			template.IsActive = false; // Revert on failure
		}
	}
	catch (Exception ex)
	{
		NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to activate template: {ex.Message}");
		template.IsActive = false; // Revert on failure
	}
}

private async Task EditInactiveQuestionnaire()
{
	// Simply enable and allow editing
	await EnableQuestionnaire();
}

private bool ValidateQuestionnaire()
{
	var validationErrors = new List<string>();

	// Validate template name
	if (string.IsNullOrWhiteSpace(template.Name))
	{
		validationErrors.Add("Template name is required");
	}

	// Validate sections and questions
	foreach (var section in template.Sections)
	{
		// Check if section has any questions
		if (section.Questions.Count == 0)
		{
			var sectionName = string.IsNullOrWhiteSpace(section.Title) ? $"Section {section.Order + 1}" : section.Title;
			validationErrors.Add($"'{sectionName}' must contain at least one question");
			continue;
		}

		// Validate each question in the section
		foreach (var question in section.Questions)
		{
			var sectionName = string.IsNullOrWhiteSpace(section.Title) ? $"Section {section.Order + 1}" : section.Title;
			var questionPos = $"Question {question.Order + 1}";

			// Validate question title
			if (string.IsNullOrWhiteSpace(question.Title))
			{
				validationErrors.Add($"{questionPos} in '{sectionName}' requires a title");
			}

			// Validate question content based on type
			if (question.Type == QuestionType.SelfAssessment)
			{
				var competencies = GetCompetenciesFromConfiguration(question);
				if (competencies.Count == 0)
				{
					validationErrors.Add($"{questionPos} in '{sectionName}' must have at least one competency");
				}
				else
				{
					for (int i = 0; i < competencies.Count; i++)
					{
						if (string.IsNullOrWhiteSpace(competencies[i].Title))
						{
							validationErrors.Add($"Competency {i + 1} in {questionPos} ('{sectionName}') requires a title");
						}
					}
				}
			}
			else if (question.Type == QuestionType.GoalAchievement)
			{
				var goalCategories = GetGoalCategoriesFromConfiguration(question);
				if (goalCategories.Count == 0)
				{
					validationErrors.Add($"{questionPos} in '{sectionName}' must have at least one goal category");
				}
				else
				{
					for (int i = 0; i < goalCategories.Count; i++)
					{
						if (string.IsNullOrWhiteSpace(goalCategories[i].Title))
						{
							validationErrors.Add($"Goal category {i + 1} in {questionPos} ('{sectionName}') requires a title");
						}
					}
				}
			}
			else if (question.Type == QuestionType.TextQuestion)
			{
				var textSections = GetTextSectionsFromConfiguration(question);
				if (textSections.Count == 0)
				{
					validationErrors.Add($"{questionPos} in '{sectionName}' must have at least one text section");
				}
				else
				{
					for (int i = 0; i < textSections.Count; i++)
					{
						if (string.IsNullOrWhiteSpace(textSections[i].Title))
						{
							validationErrors.Add($"Text section {i + 1} in {questionPos} ('{sectionName}') requires a title");
						}
					}
				}
			}
		}
	}

	// Show validation errors if any
	if (validationErrors.Count > 0)
	{
		var errorMessage = validationErrors.Count == 1
			? validationErrors[0]
			: $"Please fix the following issues:\n• {string.Join("\n• ", validationErrors)}";

		NotificationService.Notify(NotificationSeverity.Warning, "Validation Required", errorMessage);
		return false;
	}

	return true;
}

// Helper methods to avoid section/question directive conflicts
private string GetSectionTitle(QuestionSection section) => section.Title;
private void SetSectionTitle(QuestionSection section, string value) => section.Title = value ?? "";

private string GetSectionDescription(QuestionSection section) => section.Description;
private void SetSectionDescription(QuestionSection section, string value) => section.Description = value ?? "";

private string GetQuestionTitle(QuestionItem question) => question.Title;
private void SetQuestionTitle(QuestionItem question, string value) => question.Title = value ?? "";

private string GetQuestionDescription(QuestionItem question) => question.Description;
private void SetQuestionDescription(QuestionItem question, string value) => question.Description = value ?? "";

private async Task AddQuestionOfType(QuestionType questionType)
{
	if (selectedSectionIndex >= 0 && selectedSectionIndex < template.Sections.Count)
	{
		var section = template.Sections[selectedSectionIndex];
		var newQuestion = new QuestionItem
		{
			Id = Guid.NewGuid(),
			Title = GetDefaultQuestionTitle(questionType),
			Type = questionType,
			Order = section.Questions.Count,
			IsRequired = true
		};

		// Initialize default configuration for each question type
		if (questionType == QuestionType.SelfAssessment)
		{
			// Initialize with one default competency
			var competencies = new List<CompetencyDefinition>
			{
				new CompetencyDefinition("competency_1", "", "", false, 0)
			};
			newQuestion.Configuration["Competencies"] = competencies;

			// Initialize default rating scale settings
			newQuestion.Configuration["RatingScale"] = 4; // Default to 1-4 scale
			newQuestion.Configuration["ScaleLowLabel"] = "Poor";
			newQuestion.Configuration["ScaleHighLabel"] = "Excellent";
		}
		else if (questionType == QuestionType.GoalAchievement)
		{
			// Initialize with empty goal categories using proper type
			newQuestion.Configuration["GoalCategories"] = new List<QuestionCard.GoalCategory>();
		}
		else if (questionType == QuestionType.TextQuestion)
		{
			// Initialize with one default text section using proper type
			newQuestion.Configuration["TextSections"] = new List<QuestionCard.TextSection>
			{
				new QuestionCard.TextSection { Title = "", Description = "", IsRequired = false, Order = 0 }
			};
		}

		// Add the question to the section
		section.Questions.Add(newQuestion);
	}

	// Reset selection state
	showQuestionTypeSelection = false;
	selectedSectionIndex = -1;
	selectedQuestionType = null;
}

private void CancelQuestionTypeSelection()
{
	showQuestionTypeSelection = false;
	selectedSectionIndex = -1;
	selectedQuestionType = null;
}

private string GetDefaultQuestionTitle(QuestionType type)
{
	return type switch
	{
		QuestionType.SelfAssessment => $"{questionTypeLabels[QuestionType.SelfAssessment]} of Competencies",
		QuestionType.GoalAchievement => $"{questionTypeLabels[QuestionType.GoalAchievement]} Review",
		QuestionType.TextQuestion => "Career Development & Planning",
		_ => "New Question"
	};
}

private string GetStatusDescription()
{
	if (!IsEditMode)
	{
		return "Create comprehensive assessments with our visual editor";
	}

	return TemplateStatusHelper.GetStatusDescription(template.Status);
}


private string GetQuestionTypeLabel(QuestionItem question)
{
	// Check if question has a custom type label stored in configuration
	if (question.Configuration.ContainsKey("QuestionTitle"))
	{
		var customTitle = question.Configuration["QuestionTitle"].ToString() ?? "";
		if (!string.IsNullOrWhiteSpace(customTitle))
		{
			return customTitle;
		}
	}

	// Fall back to global labels
	return questionTypeLabels[question.Type];
}

// Helper methods for validation
private List<QuestionCard.GoalCategory> GetGoalCategoriesFromConfiguration(QuestionItem question)
{
	if (question.Configuration.ContainsKey("GoalCategories"))
	{
		var goalCategoriesObj = question.Configuration["GoalCategories"];

		// Handle direct cast (when set in editor)
		if (goalCategoriesObj is List<QuestionCard.GoalCategory> categories)
		{
			return categories;
		}

		// Handle JSON deserialization (when loaded from API)
		if (goalCategoriesObj is System.Text.Json.JsonElement jsonElement)
		{
			try
			{
				if (jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
				{
					return System.Text.Json.JsonSerializer.Deserialize<List<QuestionCard.GoalCategory>>(jsonElement.GetRawText(), new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<QuestionCard.GoalCategory>();
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Error deserializing goal categories: {ex.Message}");
			}
		}
	}
	return new List<QuestionCard.GoalCategory>();
}

private List<QuestionCard.TextSection> GetTextSectionsFromConfiguration(QuestionItem question)
{
	if (question.Configuration.ContainsKey("TextSections"))
	{
		var textSectionsObj = question.Configuration["TextSections"];

		// Handle direct cast (when set in editor)
		if (textSectionsObj is List<QuestionCard.TextSection> sections)
		{
			return sections;
		}

		// Handle JSON deserialization (when loaded from API)
		if (textSectionsObj is System.Text.Json.JsonElement jsonElement)
		{
			try
			{
				if (jsonElement.ValueKind == System.Text.Json.JsonValueKind.Array)
				{
					return System.Text.Json.JsonSerializer.Deserialize<List<QuestionCard.TextSection>>(jsonElement.GetRawText(), new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new List<QuestionCard.TextSection>();
				}
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Error deserializing text sections: {ex.Message}");
			}
		}
	}

	// Check for legacy format and convert
	if (question.Configuration.ContainsKey("SectionTitle") || question.Configuration.ContainsKey("SectionDescription"))
	{
		return new List<QuestionCard.TextSection>
		{
			new QuestionCard.TextSection
			{
				Title = question.Configuration.ContainsKey("SectionTitle") ? question.Configuration["SectionTitle"].ToString() ?? "" : "",
				Description = question.Configuration.ContainsKey("SectionDescription") ? question.Configuration["SectionDescription"].ToString() ?? "" : "",
				IsRequired = false
			}
		};
	}

	return new List<QuestionCard.TextSection>();
}


// Event handler overloads for the new component structure
private async Task RemoveQuestion((int sectionIndex, int questionIndex) indices)
{
	await RemoveQuestion(indices.sectionIndex, indices.questionIndex);
}

private void MoveQuestionUp((int sectionIndex, int questionIndex) indices)
{
	MoveQuestionUp(indices.sectionIndex, indices.questionIndex);
}

private void MoveQuestionDown((int sectionIndex, int questionIndex) indices)
{
	MoveQuestionDown(indices.sectionIndex, indices.questionIndex);
}
}

<style>
/* Color Variables from FarbCodes.png */
:root {
	--primary-color: #0F60FF; /* Blue new */
	--dark-blue: #002650; /* Dark Blue */
	--ice-blue: #7F3AAE; /* Light Blue - using purple rain as accent */
	--light-gray: #F1F3F4;
	--success-color: #00E6C8; /* Green new */
	--warning-color: #E6BF7F; /* Golden Milk */
	--purple-rain: #935BA9;
}

/* Header Styling */
.questionnaire-builder-header {
	background: linear-gradient(135deg, var(--dark-blue) 0%, var(--primary-color) 100%);
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.status-badge .badge {
	font-size: 0.75rem;
	font-weight: 600;
	letter-spacing: 0.5px;
	border-radius: 1rem;
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Progress Steps */
.progress-steps-container {
	background: white;
	border-bottom: 1px solid #e9ecef;
	box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.progress-steps {
	display: flex;
	align-items: center;
	justify-content: center;
	max-width: 600px;
	margin: 0 auto;
}

.step {
	display: flex;
	flex-direction: column;
	align-items: center;
	cursor: pointer;
	transition: all 0.2s ease-in-out;
	padding: 0.5rem;
	border-radius: 0.5rem;
}

.step:hover {
	background: var(--light-gray);
}

.step-circle {
	width: 40px;
	height: 40px;
	border-radius: 50%;
	display: flex;
	align-items: center;
	justify-content: center;
	background: #e9ecef;
	color: #6c757d;
	transition: all 0.2s ease-in-out;
	margin-bottom: 0.5rem;
}

.step.active .step-circle {
	background: var(--primary-color);
	color: white;
	box-shadow: 0 4px 12px rgba(15, 96, 255, 0.3);
}

.step.completed .step-circle {
	background: var(--success-color);
	color: white;
}

.step-text {
	font-size: 0.875rem;
	font-weight: 500;
	color: #6c757d;
}

.step.active .step-text {
	color: var(--primary-color);
	font-weight: 600;
}

.step.completed .step-text {
	color: var(--success-color);
}

.step-connector {
	width: 80px;
	height: 2px;
	background: #e9ecef;
	margin: 0 1rem;
	transition: all 0.2s ease-in-out;
}

.step-connector.completed {
	background: var(--success-color);
}

/* Main Content */
.main-content-area {
	padding: 2rem 0;
	min-height: calc(100vh - 200px);
	background: #f8f9fa;
}

.step-content {
	max-width: 1200px;
	margin: 0 auto;
	background: white;
	padding: 2rem;
	border-radius: 8px;
	box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.step-header {
	text-align: center;
	margin-bottom: 2rem;
}

.step-navigation {
	border-top: 1px solid #e9ecef;
	padding-top: 1.5rem;
}

/* Question Editor Full Screen */
.question-editor-fullscreen {
	position: fixed;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	background: white;
	z-index: 1050;
	display: flex;
	flex-direction: column;
}

.editor-header {
	background: var(--light-gray);
	border-bottom: 1px solid #e9ecef;
	padding: 0 2rem;
	flex-shrink: 0;
}

.editor-content {
	flex: 1;
	overflow-y: auto;
	max-width: 1000px;
	margin: 0 auto;
	width: 100%;
}

/* Flat Design Overrides */
.rz-card {
	border: none !important;
	box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1) !important;
}

/* Remove nested card styling */
.step-content .rz-card {
	box-shadow: none !important;
	border: 1px solid #e9ecef !important;
}

/* Button enhancements */
.rz-button {
	border-radius: 6px !important;
	font-weight: 500 !important;
	transition: all 0.2s ease-in-out !important;
}

.rz-button:hover {
	transform: translateY(-1px);
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
}

.rz-button-primary {
	background: var(--primary-color) !important;
	border-color: var(--primary-color) !important;
}

.rz-button-success {
	background: var(--success-color) !important;
	border-color: var(--success-color) !important;
	color: var(--dark-blue) !important;
}

.rz-button-warning {
	background: var(--warning-color) !important;
	border-color: var(--warning-color) !important;
	color: var(--dark-blue) !important;
}
</style>