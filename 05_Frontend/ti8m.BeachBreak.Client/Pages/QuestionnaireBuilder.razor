@page "/questionnaire-builder"
@page "/questionnaire-builder/{TemplateId:guid?}"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@using Radzen
@using Radzen.Blazor
@using System.Text.Json
@using ti8m.BeachBreak.Client.Components
@using ti8m.BeachBreak.Client.Components.QuestionnaireBuilder
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components.Shared
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IQuestionnaireTemplateService ApiService
@inject ICategoryApiService CategoryService
@inject QuestionConfigurationService ConfigurationService
@inject QuestionnaireValidationService ValidationService
@inherits OptimizedComponentBase

<PageTitle>Questionnaire Builder</PageTitle>

<!-- Header -->
<div class="page-header-modern">
	<div class="container-fluid">
		<div class="d-flex justify-content-between align-items-center py-3">
			<div class="d-flex align-items-center">
				<RadzenText TextStyle="TextStyle.H4" Class="text-white fw-bold mb-0">
					<RadzenIcon Icon="psychology" Class="me-2" />
					@(IsEditMode ? "Questionnaire Editor" : "Questionnaire Builder")
				</RadzenText>
				<div class="status-badge ms-3">
					@{
						var status = IsEditMode ? template.Status : TemplateStatus.Draft;
						var statusText = IsEditMode ? TemplateStatusHelper.GetStatusText(template.Status) : "NEW";
						var statusIcon = IsEditMode ? TemplateStatusHelper.GetStatusIcon(template.Status) : "add_circle";
						var statusClass = IsEditMode ? TemplateStatusHelper.GetStatusBadgeClass(template.Status) : "badge bg-info text-dark";
					}
					<span class="@statusClass d-flex align-items-center px-3 py-1">
						<RadzenIcon Icon="@statusIcon" Class="me-1" Style="font-size: 0.8rem;" />
						@statusText
					</span>
				</div>
			</div>
			<div class="d-flex gap-2">
				@{
					var currentStatus = IsEditMode ? template.Status : TemplateStatus.Draft;
				}
				@switch (currentStatus)
				{
					case TemplateStatus.Draft:
						<RadzenButton Text="Save" ButtonStyle="ButtonStyle.Secondary" Icon="save" Click="@SaveQuestionnaire" />
						<RadzenButton Text="Publish" ButtonStyle="ButtonStyle.Success" Icon="publish" Click="@PublishQuestionnaire" />
						<RadzenButton Text="Archive" ButtonStyle="ButtonStyle.Light" Icon="archive" Click="@ArchiveQuestionnaire" />
						break;
					case TemplateStatus.Published:
						<RadzenButton Text="Unpublish" ButtonStyle="ButtonStyle.Warning" Icon="unpublished" Click="@UnpublishQuestionnaire" />
						<RadzenButton Text="Archive" ButtonStyle="ButtonStyle.Light" Icon="archive" Click="@ArchiveQuestionnaire" />
						break;
					case TemplateStatus.Archived:
						<RadzenButton Text="Restore" ButtonStyle="ButtonStyle.Primary" Icon="restore" Click="@RestoreQuestionnaire" />
						break;
				}
			</div>
		</div>
	</div>
</div>

<!-- Progress Steps -->
<div style="background: var(--background-color); border-bottom: 1px solid var(--border-light);">
	<div class="container-fluid">
		<div class="progress-steps-modern py-3">
			<div class="step-modern @(currentStep == 1 ? "active" : currentStep > 1 ? "completed" : "")" @onclick="() => SetCurrentStep(1)">
				<div class="step-number-modern">
					<RadzenIcon Icon="@(currentStep > 1 ? "check" : "info")" />
				</div>
				<span class="step-text-modern">Basic Info</span>
			</div>
			<div class="step-modern @(currentStep == 2 ? "active" : currentStep > 2 ? "completed" : "")" @onclick="() => SetCurrentStep(2)">
				<div class="step-number-modern">
					<RadzenIcon Icon="@(currentStep > 2 ? "check" : "view_list")" />
				</div>
				<span class="step-text-modern">Build Sections</span>
			</div>
			<div class="step-modern @(currentStep == 3 ? "active" : currentStep > 3 ? "completed" : "")" @onclick="() => SetCurrentStep(3)">
				<div class="step-number-modern">
					<RadzenIcon Icon="@(currentStep > 3 ? "check" : "preview")" />
				</div>
				<span class="step-text-modern">Review & Publish</span>
			</div>
		</div>
	</div>
</div>

<!-- Main Content -->
<div class="main-content-modern">
	<div class="container-fluid">
		@if (showQuestionEditor)
		{
			<!-- Full-screen Question Editor -->
			<div class="question-editor-fullscreen">
				<div class="editor-header">
					<div class="d-flex justify-content-between align-items-center py-3">
						<div class="d-flex align-items-center">
							<RadzenButton ButtonStyle="ButtonStyle.Light" Icon="arrow_back" Click="@CloseQuestionEditor" Class="me-3" />
							<RadzenText TextStyle="TextStyle.H5" Class="mb-0 fw-bold">Edit Question: @GetCurrentQuestionTitle()</RadzenText>
						</div>
						<div class="d-flex gap-2">
							<RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Secondary" Click="@CloseQuestionEditor" />
							<RadzenButton Text="Save Question" ButtonStyle="ButtonStyle.Primary" Icon="save" Click="@SaveCurrentQuestion" />
						</div>
					</div>
				</div>
				<div class="editor-content p-4">
					@if (editingQuestion != null)
					{
						<QuestionCard Question="@editingQuestion"
									  Template="@template"
									  CanMoveUp="false"
									  CanMoveDown="false"
									  QuestionTypeLabels="@questionTypeLabels"
									  OnEdit="@(() => { })"
									  OnMoveUp="@(() => { })"
									  OnMoveDown="@(() => { })"
									  OnDelete="@(() => { })" />
					}
				</div>
			</div>
		}
		else
		{
			<!-- Step Content -->
			@if (currentStep == 1)
			{
				<div class="step-content-modern">
					<div class="step-header">
						<RadzenText TextStyle="TextStyle.H4" Class="mb-2">Template Information</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1" Class="text-muted mb-4">@GetStatusDescription()</RadzenText>
					</div>
					<BasicInfoTab Template="@template" Categories="@categories" />
					<div class="step-navigation mt-4 d-flex justify-content-end">
						<RadzenButton Text="Next: Build Sections" ButtonStyle="ButtonStyle.Primary" Icon="arrow_forward" Click="@(() => SetCurrentStep(2))" />
					</div>
				</div>
			}
			else if (currentStep == 2)
			{
				<div class="step-content-modern">
					<div class="step-header">
						<RadzenText TextStyle="TextStyle.H4" Class="mb-2">Build Sections</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1" Class="text-muted mb-4">Organize your assessment into logical sections and configure questions</RadzenText>
					</div>
					<QuestionsTab Template="@template"
								  ShowQuestionTypeSelection="@showQuestionTypeSelection"
								  SelectedSectionIndex="@selectedSectionIndex"
								  QuestionTypeLabels="@questionTypeLabels"
								  OnAddSectionWithType="@AddSectionWithType"
								  OnMoveSectionUp="@MoveSectionUp"
								  OnMoveSectionDown="@MoveSectionDown"
								  OnRemoveSection="@RemoveSection"
								  OnShowAddQuestionDialog="@ShowAddQuestionDialog"
								  OnAddItemDirectly="@AddItemDirectly"
								  OnCancelQuestionTypeSelection="@CancelQuestionTypeSelection"
								  OnAddQuestionOfType="@AddQuestionOfType"
								  OnEditQuestion="@OpenQuestionEditor"
								  OnMoveQuestionUp="@MoveQuestionUp"
								  OnMoveQuestionDown="@MoveQuestionDown"
								  OnRemoveQuestion="@RemoveQuestion" />
					<div class="step-navigation mt-4 d-flex justify-content-between">
						<RadzenButton Text="Previous: Basic Info" ButtonStyle="ButtonStyle.Light" Icon="arrow_back" Click="@(() => SetCurrentStep(1))" />
						<RadzenButton Text="Next: Review" ButtonStyle="ButtonStyle.Primary" Icon="arrow_forward" Click="@(() => SetCurrentStep(3))" />
					</div>
				</div>
			}
			else if (currentStep == 3)
			{
				<div class="step-content-modern">
					<div class="step-header">
						<RadzenText TextStyle="TextStyle.H4" Class="mb-2">Review & Publish</RadzenText>
						<RadzenText TextStyle="TextStyle.Body1" Class="text-muted mb-4">Review your questionnaire and make it available for assignments</RadzenText>
					</div>
					<PreviewTab Template="@template" QuestionTypeLabels="@questionTypeLabels" />
					<div class="step-navigation mt-4 d-flex justify-content-between">
						<RadzenButton Text="Previous: Build Sections" ButtonStyle="ButtonStyle.Light" Icon="arrow_back" Click="@(() => SetCurrentStep(2))" />
						<div class="d-flex gap-2">
							@{
								var stepNavStatus = IsEditMode ? template.Status : TemplateStatus.Draft;
							}
							@switch (stepNavStatus)
							{
								case TemplateStatus.Draft:
									<RadzenButton Text="Save Draft" ButtonStyle="ButtonStyle.Secondary" Icon="save" Click="@SaveQuestionnaire" />
									<RadzenButton Text="Publish" ButtonStyle="ButtonStyle.Success" Icon="publish" Click="@PublishQuestionnaire" />
									break;
								case TemplateStatus.Published:
									<RadzenButton Text="Unpublish" ButtonStyle="ButtonStyle.Warning" Icon="unpublished" Click="@UnpublishQuestionnaire" />
									break;
								case TemplateStatus.Archived:
									<RadzenButton Text="Restore" ButtonStyle="ButtonStyle.Primary" Icon="restore" Click="@RestoreQuestionnaire" />
									break;
							}
						</div>
					</div>
				</div>
			}
		}
	</div>
</div>

@code {
	[Parameter] public Guid? TemplateId { get; set; }

	private QuestionnaireTemplate template = new();
	private bool IsEditMode => TemplateId.HasValue;

	// Step navigation state
	private int currentStep = 1;

	// Question editor state
	private bool showQuestionEditor = false;
	private QuestionItem? editingQuestion = null;
	private int editingSectionIndex = -1;
	private int editingQuestionIndex = -1;

	// Question type selection state
	private bool showQuestionTypeSelection = false;
	private int selectedSectionIndex = -1;
	private QuestionType? selectedQuestionType = null;

	// Editable question type labels
	private Dictionary<QuestionType, string> questionTypeLabels = new()
	{
		{ QuestionType.SelfAssessment, "Self-Assessment" },
		{ QuestionType.GoalAchievement, "Goal Achievement" },
		{ QuestionType.TextQuestion, "Text Question" }
	};

	private List<Category> categories = new();

	protected override async Task OnInitializedAsync()
	{
		await ExecuteSafelyAsync(async () =>
		{
			if (IsEditMode && TemplateId.HasValue)
			{
				// Load categories and template in parallel for better performance
				var loadCategoriesTask = LoadCategories();
				var loadTemplateTask = LoadTemplate(TemplateId.Value);

				await Task.WhenAll(loadCategoriesTask, loadTemplateTask);
			}
			else
			{
				// Load categories and initialize template
				await LoadCategories();

				// Initialize empty template with default values
				template = new QuestionnaireTemplate
				{
					Name = "",
					Description = "",
					CategoryId = Guid.Empty,
					Settings = new QuestionnaireSettings()
				};
			}
		}, "InitializeQuestionnaireBuilder");
	}

	protected override bool HasStateChanged()
	{
		return HasParameterChanged(nameof(template), template?.Id) ||
			   HasParameterChanged(nameof(currentStep), currentStep) ||
			   HasParameterChanged(nameof(showQuestionEditor), showQuestionEditor) ||
			   HasParameterChanged(nameof(showQuestionTypeSelection), showQuestionTypeSelection);
	}

	private async Task LoadCategories()
	{
		try
		{
			categories = await CategoryService.GetAllCategoriesAsync();
		}
		catch (Exception ex)
		{
			NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to load categories: {ex.Message}");
			// Fallback to default categories if API fails
			categories = [];
		}
	}

	private async Task LoadTemplate(Guid templateId)
	{
		try
		{
			var loadedTemplate = await ApiService.GetTemplateByIdAsync(templateId);
			if (loadedTemplate != null)
			{
				template = loadedTemplate;
			}
			else
			{
				NotificationService.Notify(NotificationSeverity.Warning, "Not Found", "Template not found. Creating new template.");
				template = new QuestionnaireTemplate();
				// Clear the TemplateId parameter to switch to create mode
				TemplateId = null;
			}
		}
		catch (Exception ex)
		{
			NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to load template: {ex.Message}");
			template = new QuestionnaireTemplate();
			TemplateId = null;
		}
	}

	private void SetCurrentStep(int step)
	{
		if (currentStep != step)
		{
			currentStep = step;
			NotifyStateChanged();
		}
	}

	private async Task OpenQuestionEditor((int sectionIndex, int questionIndex) indices)
	{
		if (indices.sectionIndex >= 0 && indices.sectionIndex < template.Sections.Count &&
			indices.questionIndex >= 0 && indices.questionIndex < template.Sections[indices.sectionIndex].Questions.Count)
		{
			editingSectionIndex = indices.sectionIndex;
			editingQuestionIndex = indices.questionIndex;
			// Create a deep copy of the question for editing
			var originalQuestion = template.Sections[indices.sectionIndex].Questions[indices.questionIndex];
			editingQuestion = new QuestionItem
			{
				Id = originalQuestion.Id,
				Title = originalQuestion.Title,
				Description = originalQuestion.Description,
				Type = originalQuestion.Type,
				Order = originalQuestion.Order,
				IsRequired = originalQuestion.IsRequired,
				Configuration = new Dictionary<string, object>(originalQuestion.Configuration)
			};
			showQuestionEditor = true;
			NotifyStateChanged();
		}
	}

	private void CloseQuestionEditor()
	{
		showQuestionEditor = false;
		editingQuestion = null;
		editingSectionIndex = -1;
		editingQuestionIndex = -1;
		NotifyStateChanged();
	}

	private async Task SaveCurrentQuestion()
	{
		if (editingQuestion != null && editingSectionIndex >= 0 && editingQuestionIndex >= 0)
		{
			// Save the edited question back to the template
			template.Sections[editingSectionIndex].Questions[editingQuestionIndex] = editingQuestion;
			CloseQuestionEditor();
			NotificationService.Notify(NotificationSeverity.Success, "Saved", "Question updated successfully");
		}
	}

	private string GetCurrentQuestionTitle()
	{
		return editingQuestion?.Title ?? "Untitled Question";
	}


	private void AddSectionWithType(QuestionType questionType)
	{
		var newSection = new QuestionSection
		{
			Title = GetDefaultSectionTitle(questionType),
			Order = template.Sections.Count,
			IsRequired = true
		};

		template.Sections.Add(newSection);

		// Immediately add a question of the selected type
		AddQuestionOfExistingType(template.Sections.Count - 1, questionType);
	}

	private string GetDefaultSectionTitle(QuestionType type)
	{
		return type switch
		{
			QuestionType.SelfAssessment => "Self-Assessment",
			QuestionType.GoalAchievement => "Goal Achievement Review",
			QuestionType.TextQuestion => "Open-Ended Questions",
			_ => $"Section {template.Sections.Count + 1}"
		};
	}

	private void AddItemDirectly(int sectionIndex)
	{
		if (sectionIndex >= 0 && sectionIndex < template.Sections.Count)
		{
			var section = template.Sections[sectionIndex];

			// If section already has questions, add an item to the existing question
			if (section.Questions.Any())
			{
				var existingQuestion = section.Questions.First();
				AddItemToExistingQuestion(existingQuestion);
			}
			else
			{
				// No questions yet, fall back to showing question type selection
				ShowAddQuestionDialog(sectionIndex);
			}
		}
	}

	private void AddItemToExistingQuestion(QuestionItem question)
	{
		if (question.Type == QuestionType.SelfAssessment)
		{
			var competencies = ConfigurationService.GetCompetencies(question);
			var nextOrder = competencies.Count > 0 ? competencies.Max(c => c.Order) + 1 : 0;
			var newCompetency = new CompetencyDefinition($"competency_{competencies.Count + 1}", "", "", false, nextOrder);

			// Create a new list to ensure change detection
			var updatedCompetencies = new List<CompetencyDefinition>(competencies) { newCompetency };
			ConfigurationService.SetCompetencies(question, updatedCompetencies);
		}
		else if (question.Type == QuestionType.GoalAchievement)
		{
			var goalCategories = ConfigurationService.GetGoalCategories(question);
			var nextOrder = goalCategories.Count > 0 ? goalCategories.Max(g => g.Order) + 1 : 0;
			var newCategory = new QuestionCard.GoalCategory { Title = "", Description = "", IsRequired = false, Order = nextOrder };

			// Create a new list to ensure change detection
			var updatedCategories = new List<QuestionCard.GoalCategory>(goalCategories) { newCategory };
			ConfigurationService.SetGoalCategories(question, updatedCategories);
		}
		else if (question.Type == QuestionType.TextQuestion)
		{
			var textSections = ConfigurationService.GetTextSections(question);
			var nextOrder = textSections.Count > 0 ? textSections.Max(t => t.Order) + 1 : 0;
			var newSection = new QuestionCard.TextSection { Title = "", Description = "", IsRequired = false, Order = nextOrder };

			// Create a new list to ensure change detection
			var updatedSections = new List<QuestionCard.TextSection>(textSections) { newSection };
			ConfigurationService.SetTextSections(question, updatedSections);
		}

		// Force component re-render
		NotifyStateChanged();
	}

	private void AddQuestionOfExistingType(int sectionIndex, QuestionType questionType)
	{
		if (sectionIndex >= 0 && sectionIndex < template.Sections.Count)
		{
			var section = template.Sections[sectionIndex];
			var newQuestion = new QuestionItem
			{
				Id = Guid.NewGuid(),
				Title = GetDefaultQuestionTitle(questionType),
				Type = questionType,
				Order = section.Questions.Count,
				IsRequired = true
			};

			// Initialize default configuration for each question type
			if (questionType == QuestionType.SelfAssessment)
			{
				// Initialize with one default competency
				var competencies = new List<CompetencyDefinition>
				{
					new CompetencyDefinition("competency_1", "", "", false, 0)
				};
				newQuestion.Configuration["Competencies"] = competencies;

				// Initialize default rating scale settings
				newQuestion.Configuration["RatingScale"] = 4; // Default to 1-4 scale
				newQuestion.Configuration["ScaleLowLabel"] = "Poor";
				newQuestion.Configuration["ScaleHighLabel"] = "Excellent";
			}
			else if (questionType == QuestionType.GoalAchievement)
			{
				// Initialize with one default goal category
				newQuestion.Configuration["GoalCategories"] = new List<QuestionCard.GoalCategory>
				{
					new QuestionCard.GoalCategory { Title = "", Description = "", IsRequired = false, Order = 0 }
				};
			}
			else if (questionType == QuestionType.TextQuestion)
			{
				// Initialize with one default text section using proper type
				newQuestion.Configuration["TextSections"] = new List<QuestionCard.TextSection>
				{
					new QuestionCard.TextSection { Title = "", Description = "", IsRequired = false, Order = 0 }
				};
			}

			// Add the question to the section
			section.Questions.Add(newQuestion);
		}
	}

	private async Task RemoveSection(int index)
	{
		if (index >= 0 && index < template.Sections.Count)
		{
			var section = template.Sections[index];
			var sectionName = string.IsNullOrWhiteSpace(section.Title) ? $"Section {index + 1}" : section.Title;
			var confirmed = await DialogService.Confirm($"Are you sure you want to delete '{sectionName}'? This will also delete all questions in this section.", "Delete Section",
				new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

			if (confirmed.HasValue && confirmed.Value)
			{
				template.Sections.RemoveAt(index);
				// Reorder remaining sections
				for (int i = 0; i < template.Sections.Count; i++)
				{
					template.Sections[i].Order = i;
				}
			}
		}
	}

	private void MoveSectionUp(int index)
	{
		if (index > 0)
		{
			(template.Sections[index], template.Sections[index - 1]) = (template.Sections[index - 1], template.Sections[index]);
			template.Sections[index].Order = index;
			template.Sections[index - 1].Order = index - 1;
		}
	}

	private void MoveSectionDown(int index)
	{
		if (index < template.Sections.Count - 1)
		{
			(template.Sections[index], template.Sections[index + 1]) = (template.Sections[index + 1], template.Sections[index]);
			template.Sections[index].Order = index;
			template.Sections[index + 1].Order = index + 1;
		}
	}

	private void ShowAddQuestionDialog(int sectionIndex)
	{
		// Show inline question type selection
		showQuestionTypeSelection = true;
		selectedSectionIndex = sectionIndex;
		selectedQuestionType = null;
	}





	private async Task RemoveQuestion(int sectionIndex, int questionIndex)
	{
		var section = template.Sections[sectionIndex];
		if (questionIndex >= 0 && questionIndex < section.Questions.Count)
		{
			var question = section.Questions[questionIndex];
			var questionName = string.IsNullOrWhiteSpace(question.Title) ? $"Question {questionIndex + 1}" : question.Title;
			var confirmed = await DialogService.Confirm($"Are you sure you want to delete '{questionName}'?", "Delete Question",
				new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });

			if (confirmed.HasValue && confirmed.Value)
			{
				section.Questions.RemoveAt(questionIndex);
				// Reorder remaining questions
				for (int i = 0; i < section.Questions.Count; i++)
				{
					section.Questions[i].Order = i;
				}
			}
		}
	}

	private void MoveQuestionUp(int sectionIndex, int questionIndex)
	{
		var questions = template.Sections[sectionIndex].Questions;
		if (questionIndex > 0)
		{
			(questions[questionIndex], questions[questionIndex - 1]) = (questions[questionIndex - 1], questions[questionIndex]);
			questions[questionIndex].Order = questionIndex;
			questions[questionIndex - 1].Order = questionIndex - 1;
		}
	}

	private void MoveQuestionDown(int sectionIndex, int questionIndex)
	{
		var questions = template.Sections[sectionIndex].Questions;
		if (questionIndex < questions.Count - 1)
		{
			(questions[questionIndex], questions[questionIndex + 1]) = (questions[questionIndex + 1], questions[questionIndex]);
			questions[questionIndex].Order = questionIndex;
			questions[questionIndex + 1].Order = questionIndex + 1;
		}
	}

	private string GetQuestionTypeIcon(QuestionType type)
	{
		return type switch
		{
			QuestionType.SelfAssessment => "self_improvement",
			QuestionType.GoalAchievement => "track_changes",
			QuestionType.TextQuestion => "psychology",
			_ => "help"
		};
	}



	private async Task SaveQuestionnaire()
	{
		if (!ValidateQuestionnaire())
		{
			return;
		}

		try
		{
			if (IsEditMode)
			{
				var updated = await ApiService.UpdateTemplateAsync(template);
				if (updated != null)
				{
					NotificationService.Notify(NotificationSeverity.Success, "Saved", "Questionnaire template updated successfully");
				}
				else
				{
					NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to update template - no response from server");
				}
			}
			else
			{
				var created = await ApiService.CreateTemplateAsync(template);
				template.Id = created.Id; // Update with the server-generated ID
				NotificationService.Notify(NotificationSeverity.Success, "Saved", "Questionnaire template created successfully");
			}
		}
		catch (Exception ex)
		{
			NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to save template: {ex.Message}");
		}
	}

	private async Task PublishQuestionnaire()
	{
		if (!ValidateQuestionnaire())
		{
			return;
		}

		try
		{
			// Save the template first
			await SaveQuestionnaire();

			// Set as published
			template.Status = TemplateStatus.Published;
			template.LastPublishedDate = DateTime.Now;

			// Set PublishedDate only on first publish
			if (template.PublishedDate == null)
			{
				template.PublishedDate = DateTime.Now;
			}

			// TODO: Set PublishedBy when user context is available
			// template.PublishedBy = currentUser.Name;

			// Update the template with published status
			if (IsEditMode)
			{
				var updated = await ApiService.PublishTemplateAsync(template.Id, "");
				if (updated != null)
				{
					NotificationService.Notify(NotificationSeverity.Success, "Published", "Questionnaire template is now published and available for assignments");
				}
				else
				{
					NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to publish template");
					// Revert on failure
					template.Status = TemplateStatus.Draft;
					template.LastPublishedDate = null;
				}
			}
			else
			{
				// For new templates, properties are already set, just show success
				NotificationService.Notify(NotificationSeverity.Success, "Published", "Questionnaire template created and published successfully");
			}
		}
		catch (Exception ex)
		{
			NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to publish template: {ex.Message}");
			// Revert on failure
			template.Status = TemplateStatus.Draft;
			template.LastPublishedDate = null;
		}
	}

	private async Task UnpublishQuestionnaire()
	{
		try
		{
			// Set as unpublished (back to draft)
			template.Status = TemplateStatus.Draft;

			// Update the template with unpublished status
			var updated = await ApiService.UpdateTemplateAsync(template);
			if (updated != null)
			{
				NotificationService.Notify(NotificationSeverity.Info, "Unpublished", "Questionnaire template is now in draft mode and unavailable for new assignments");
			}
			else
			{
				NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to unpublish template");
				template.Status = TemplateStatus.Published; // Revert on failure
			}
		}
		catch (Exception ex)
		{
			NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to unpublish template: {ex.Message}");
			template.Status = TemplateStatus.Published; // Revert on failure
		}
	}

	private async Task DisableQuestionnaire()
	{
		try
		{
			// Set as inactive while keeping published status
			template.Status = TemplateStatus.Archived;

			var updated = await ApiService.UpdateTemplateAsync(template);
			if (updated != null)
			{
				NotificationService.Notify(NotificationSeverity.Warning, "Disabled", "Questionnaire template is temporarily disabled but remains published");
			}
			else
			{
				NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to disable template");
				template.Status = TemplateStatus.Draft; // Revert on failure
			}
		}
		catch (Exception ex)
		{
			NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to disable template: {ex.Message}");
			template.Status = TemplateStatus.Draft; // Revert on failure
		}
	}

	private async Task RestoreQuestionnaire()
	{
		try
		{
			// Re-activate while keeping published status
			template.Status = TemplateStatus.Draft;

			var updated = await ApiService.UpdateTemplateAsync(template);
			if (updated != null)
			{
				NotificationService.Notify(NotificationSeverity.Success, "Enabled", "Questionnaire template is now active and available for assignments");
			}
			else
			{
				NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to enable template");
				template.Status = TemplateStatus.Archived; // Revert on failure
			}
		}
		catch (Exception ex)
		{
			NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to enable template: {ex.Message}");
			template.Status = TemplateStatus.Archived; // Revert on failure
		}
	}

	private async Task ArchiveQuestionnaire()
	{
		try
		{
			var previousStatus = template.Status;
			template.Status = TemplateStatus.Archived;

			var updated = await ApiService.UpdateTemplateAsync(template);
			if (updated != null)
			{
				NotificationService.Notify(NotificationSeverity.Success, "Archived", "Questionnaire template has been archived and is no longer available for assignments");
			}
			else
			{
				NotificationService.Notify(NotificationSeverity.Error, "Error", "Failed to archive template");
				template.Status = previousStatus; // Revert on failure
			}
		}
		catch (Exception ex)
		{
			var previousStatus = template.Status;
			NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to archive template: {ex.Message}");
			template.Status = previousStatus; // Revert on failure
		}
	}

	private async Task EditInactiveQuestionnaire()
	{
		// Simply enable and allow editing
		await RestoreQuestionnaire();
	}

	private bool ValidateQuestionnaire()
	{
		var validationErrors = ValidationService.ValidateQuestionnaire(template);

		// Show validation errors if any
		if (validationErrors.Count > 0)
		{
			var errorMessage = validationErrors.Count == 1
				? validationErrors[0]
				: $"Please fix the following issues:\n• {string.Join("\n• ", validationErrors)}";

			NotificationService.Notify(NotificationSeverity.Warning, "Validation Required", errorMessage);
			return false;
		}

		return true;
	}

	// Helper methods to avoid section/question directive conflicts
	private string GetSectionTitle(QuestionSection section) => section.Title;
	private void SetSectionTitle(QuestionSection section, string value) => section.Title = value ?? "";

	private string GetSectionDescription(QuestionSection section) => section.Description;
	private void SetSectionDescription(QuestionSection section, string value) => section.Description = value ?? "";

	private string GetQuestionTitle(QuestionItem question) => question.Title;
	private void SetQuestionTitle(QuestionItem question, string value) => question.Title = value ?? "";

	private string GetQuestionDescription(QuestionItem question) => question.Description;
	private void SetQuestionDescription(QuestionItem question, string value) => question.Description = value ?? "";

	private async Task AddQuestionOfType(QuestionType questionType)
	{
		if (selectedSectionIndex >= 0 && selectedSectionIndex < template.Sections.Count)
		{
			var section = template.Sections[selectedSectionIndex];
			var newQuestion = new QuestionItem
			{
				Id = Guid.NewGuid(),
				Title = GetDefaultQuestionTitle(questionType),
				Type = questionType,
				Order = section.Questions.Count,
				IsRequired = true
			};

			// Initialize default configuration for each question type
			if (questionType == QuestionType.SelfAssessment)
			{
				// Initialize with one default competency
				var competencies = new List<CompetencyDefinition>
			{
				new CompetencyDefinition("competency_1", "", "", false, 0)
			};
				newQuestion.Configuration["Competencies"] = competencies;

				// Initialize default rating scale settings
				newQuestion.Configuration["RatingScale"] = 4; // Default to 1-4 scale
				newQuestion.Configuration["ScaleLowLabel"] = "Poor";
				newQuestion.Configuration["ScaleHighLabel"] = "Excellent";
			}
			else if (questionType == QuestionType.GoalAchievement)
			{
				// Initialize with empty goal categories using proper type
				newQuestion.Configuration["GoalCategories"] = new List<QuestionCard.GoalCategory>();
			}
			else if (questionType == QuestionType.TextQuestion)
			{
				// Initialize with one default text section using proper type
				newQuestion.Configuration["TextSections"] = new List<QuestionCard.TextSection>
			{
				new QuestionCard.TextSection { Title = "", Description = "", IsRequired = false, Order = 0 }
			};
			}

			// Add the question to the section
			section.Questions.Add(newQuestion);
		}

		// Reset selection state
		showQuestionTypeSelection = false;
		selectedSectionIndex = -1;
		selectedQuestionType = null;
	}

	private void CancelQuestionTypeSelection()
	{
		showQuestionTypeSelection = false;
		selectedSectionIndex = -1;
		selectedQuestionType = null;
	}

	private string GetDefaultQuestionTitle(QuestionType type)
	{
		return type switch
		{
			QuestionType.SelfAssessment => $"{questionTypeLabels[QuestionType.SelfAssessment]} of Competencies",
			QuestionType.GoalAchievement => $"{questionTypeLabels[QuestionType.GoalAchievement]} Review",
			QuestionType.TextQuestion => "Career Development & Planning",
			_ => "New Question"
		};
	}

	private string GetStatusDescription()
	{
		if (!IsEditMode)
		{
			return "Create comprehensive assessments with our visual editor";
		}

		return TemplateStatusHelper.GetStatusDescription(template.Status);
	}


	private string GetQuestionTypeLabel(QuestionItem question)
	{
		// Check if question has a custom type label stored in configuration
		if (question.Configuration.ContainsKey("QuestionTitle"))
		{
			var customTitle = question.Configuration["QuestionTitle"].ToString() ?? "";
			if (!string.IsNullOrWhiteSpace(customTitle))
			{
				return customTitle;
			}
		}

		// Fall back to global labels
		return questionTypeLabels[question.Type];
	}



	// Event handler overloads for the new component structure
	private async Task RemoveQuestion((int sectionIndex, int questionIndex) indices)
	{
		await RemoveQuestion(indices.sectionIndex, indices.questionIndex);
	}

	private void MoveQuestionUp((int sectionIndex, int questionIndex) indices)
	{
		MoveQuestionUp(indices.sectionIndex, indices.questionIndex);
	}

	private void MoveQuestionDown((int sectionIndex, int questionIndex) indices)
	{
		MoveQuestionDown(indices.sectionIndex, indices.questionIndex);
	}
}

