@page "/my-questionnaires"
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components.Shared
@inherits OptimizedComponentBase
@inject IEmployeeQuestionnaireService EmployeeQuestionnaireService
@inject IQuestionnaireApiService QuestionnaireApiService
@inject NotificationService NotificationService

<PageTitle>My Questionnaires</PageTitle>

@if (configuration != null && dataService != null)
{
    <GenericQuestionnaireListPage Configuration="@configuration" DataService="@dataService" />
}
else if (isLoading)
{
    <div class="text-center p-5">
        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
        <RadzenText TextStyle="TextStyle.Body1" Class="text-muted mt-3">Loading...</RadzenText>
    </div>
}

@code {
    private QuestionnairePageConfiguration? configuration;
    private IQuestionnaireDataService? dataService;

    private List<QuestionnaireAssignment> allAssignments = new();
    private List<QuestionnaireAssignment> currentQuestionnaires = new();
    private List<QuestionnaireAssignment> upcomingQuestionnaires = new();
    private List<QuestionnaireAssignment> completedQuestionnaires = new();
    private List<QuestionnaireAssignment> overdueQuestionnaires = new();
    private List<string> availableCategories = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await ExecuteSafelyAsync(async () =>
        {
            await LoadInitialData();
            SetupConfiguration();
        }, "InitializeMyQuestionnaires");
    }

    protected override bool HasStateChanged()
    {
        return HasParameterChanged(nameof(allAssignments), allAssignments.Count) ||
               HasParameterChanged(nameof(configuration), configuration) ||
               HasParameterChanged(nameof(isLoading), isLoading);
    }

    private async Task LoadInitialData()
    {
        isLoading = true;
        NotifyStateChanged();

        try
        {
            // Create the data service
            dataService = new EmployeeQuestionnaireDataService(EmployeeQuestionnaireService, QuestionnaireApiService);

            // Load data to setup configuration with performance optimization
            var loadAssignmentsTask = EmployeeQuestionnaireService.GetMyAssignmentsAsync();
            var loadTemplatesTask = QuestionnaireApiService.GetAllTemplatesAsync();

            // Load in parallel for better performance
            await Task.WhenAll(loadAssignmentsTask, loadTemplatesTask);

            allAssignments = loadAssignmentsTask.Result;
            var templates = loadTemplatesTask.Result;

            // Categorize assignments
            CategorizeQuestionnaires();

            // Get available categories
            availableCategories = new List<string> { "All Categories" };
            availableCategories.AddRange(
                templates.Where(t => !string.IsNullOrEmpty(t.Category))
                        .Select(t => t.Category!)
                        .Distinct()
                        .OrderBy(c => c));
        }
        catch (Exception ex)
        {
            HandleError(ex, "loading questionnaire data");
        }
        finally
        {
            SetLoading(false);
        }
    }

    private void SetupConfiguration()
    {
        configuration = QuestionnairePageConfigurationFactory.CreateEmployeeConfiguration(
            allAssignments,
            currentQuestionnaires,
            upcomingQuestionnaires,
            completedQuestionnaires,
            overdueQuestionnaires,
            availableCategories);
    }

    private void CategorizeQuestionnaires()
    {
        var now = DateTime.Now;

        currentQuestionnaires = allAssignments.Where(a =>
            a.Status == AssignmentStatus.Assigned || a.Status == AssignmentStatus.InProgress).ToList();

        upcomingQuestionnaires = allAssignments.Where(a =>
            a.Status == AssignmentStatus.Assigned &&
            a.AssignedDate > now.AddDays(-1)).ToList();

        completedQuestionnaires = allAssignments.Where(a =>
            a.Status == AssignmentStatus.Completed).ToList();

        overdueQuestionnaires = allAssignments.Where(a =>
            a.DueDate.HasValue &&
            a.DueDate.Value < now &&
            a.Status != AssignmentStatus.Completed).ToList();
    }

    private void SetLoading(bool loading)
    {
        isLoading = loading;
        NotifyStateChanged();
    }

    private void HandleError(Exception ex, string context)
    {
        NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed {context}: {ex.Message}");
    }

    private void ShowInfo(string message)
    {
        NotificationService.Notify(NotificationSeverity.Info, "Information", message);
    }
}