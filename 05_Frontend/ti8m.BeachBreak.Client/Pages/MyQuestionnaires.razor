@page "/my-questionnaires"
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components.Shared
@inherits OptimizedComponentBase
@inject IEmployeeQuestionnaireService EmployeeQuestionnaireService
@inject IQuestionnaireApiService QuestionnaireApiService
@inject NotificationService NotificationService

<PageTitle>My Questionnaires</PageTitle>

<style>
    .enhanced-questionnaire-list {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    .questionnaire-header {
        text-align: center;
        margin-bottom: 3rem;
        padding: 2rem;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 24px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .questionnaire-header h1 {
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 0.5rem;
        letter-spacing: -0.02em;
    }

    .questionnaire-header p {
        font-size: 1.1rem;
        color: #64748b;
        margin: 0;
        font-weight: 400;
    }

    .questionnaire-tabs {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        padding: 1.5rem;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .modern-tabs {
        display: flex;
        background: #f1f5f9;
        border-radius: 16px;
        padding: 8px;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }

    .modern-tab {
        flex: 1;
        text-align: center;
        padding: 1rem 1.5rem;
        border-radius: 12px;
        font-weight: 600;
        font-size: 0.95rem;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        z-index: 2;
        color: #64748b;
        background: transparent;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .modern-tab.active {
        color: #ffffff;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        transform: translateY(-1px);
    }

    .modern-tab:hover:not(.active) {
        color: #475569;
        background: rgba(255, 255, 255, 0.8);
        transform: translateY(-1px);
    }

    .tab-count {
        background: rgba(255, 255, 255, 0.2);
        color: inherit;
        padding: 0.25rem 0.5rem;
        border-radius: 8px;
        font-size: 0.75rem;
        font-weight: 700;
        min-width: 1.5rem;
        height: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modern-tab.active .tab-count {
        background: rgba(255, 255, 255, 0.2);
        color: #ffffff;
    }

    .modern-tab:not(.active) .tab-count {
        background: rgba(100, 116, 139, 0.1);
        color: #64748b;
    }

    .enhanced-questionnaire-card {
        margin-bottom: 1.5rem;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 2rem;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }

    .enhanced-questionnaire-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, transparent, currentColor, transparent);
        opacity: 0.7;
    }

    .enhanced-questionnaire-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        border-color: rgba(255, 255, 255, 0.4);
    }

    .enhanced-questionnaire-card.new-questionnaire {
        color: #3b82f6;
    }

    .enhanced-questionnaire-card.new-questionnaire::before {
        background: linear-gradient(90deg, #60a5fa, #3b82f6, #2563eb);
    }

    .enhanced-questionnaire-card.in-progress-questionnaire {
        color: #f59e0b;
    }

    .enhanced-questionnaire-card.in-progress-questionnaire::before {
        background: linear-gradient(90deg, #fbbf24, #f59e0b, #d97706);
    }

    .enhanced-questionnaire-card.completed-questionnaire {
        color: #10b981;
    }

    .enhanced-questionnaire-card.completed-questionnaire::before {
        background: linear-gradient(90deg, #34d399, #10b981, #059669);
    }

    .enhanced-questionnaire-card.overdue-questionnaire {
        color: #ef4444;
        animation: gentle-pulse 3s ease-in-out infinite;
    }

    .enhanced-questionnaire-card.overdue-questionnaire::before {
        background: linear-gradient(90deg, #f87171, #ef4444, #dc2626);
    }

    @@keyframes gentle-pulse {
        0%, 100% {
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        50% {
            box-shadow: 0 8px 32px rgba(239, 68, 68, 0.2), 0 0 0 1px rgba(239, 68, 68, 0.1);
        }
    }

    .questionnaire-card-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1.5rem;
        gap: 1.5rem;
    }

    .questionnaire-card-content {
        flex: 1;
    }

    .questionnaire-title {
        font-size: 1.3rem;
        font-weight: 700;
        color: #1e293b;
        margin-bottom: 0.5rem;
        line-height: 1.3;
        letter-spacing: -0.01em;
    }

    .questionnaire-subtitle {
        font-size: 0.9rem;
        color: #64748b;
        margin-bottom: 1rem;
        font-weight: 500;
    }

    .questionnaire-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        align-items: center;
        font-size: 0.85rem;
        color: #64748b;
        margin-bottom: 1.5rem;
    }

    .questionnaire-meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background: rgba(248, 250, 252, 0.8);
        border-radius: 12px;
        font-weight: 500;
        transition: all 0.2s ease;
    }

    .questionnaire-meta-item:hover {
        background: rgba(248, 250, 252, 1);
        transform: translateY(-1px);
    }

    .questionnaire-meta-item .rz-icon {
        font-size: 1rem;
        opacity: 0.7;
    }

    .progress-container {
        margin: 1.5rem 0;
        padding: 1rem;
        background: rgba(248, 250, 252, 0.5);
        border-radius: 16px;
        border: 1px solid rgba(226, 232, 240, 0.8);
    }

    .progress-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
        font-size: 0.9rem;
        font-weight: 600;
        color: #475569;
    }

    .progress-bar-container {
        width: 100%;
        height: 8px;
        background: #e2e8f0;
        border-radius: 20px;
        overflow: hidden;
        position: relative;
    }

    .progress-bar-fill {
        height: 100%;
        transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        border-radius: 20px;
        position: relative;
        overflow: hidden;
    }

    .progress-bar-fill::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        animation: shimmer 2s infinite;
    }

    @@keyframes shimmer {
        0% { transform: translateX(-100%); }
        100% { transform: translateX(100%); }
    }

    .progress-bar-fill.new {
        background: linear-gradient(90deg, #3b82f6, #60a5fa);
    }
    .progress-bar-fill.in-progress {
        background: linear-gradient(90deg, #f59e0b, #fbbf24);
    }
    .progress-bar-fill.completed {
        background: linear-gradient(90deg, #10b981, #34d399);
    }

    .questionnaire-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid rgba(226, 232, 240, 0.6);
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        font-size: 0.75rem;
        font-weight: 600;
        border-radius: 20px;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .status-badge.new {
        background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(96, 165, 250, 0.1));
        color: #2563eb;
        border-color: rgba(59, 130, 246, 0.2);
    }

    .status-badge.in-progress {
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.1), rgba(251, 191, 36, 0.1));
        color: #d97706;
        border-color: rgba(245, 158, 11, 0.2);
    }

    .status-badge.completed {
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.1), rgba(52, 211, 153, 0.1));
        color: #059669;
        border-color: rgba(16, 185, 129, 0.2);
    }

    .status-badge.overdue {
        background: linear-gradient(135deg, rgba(239, 68, 68, 0.1), rgba(248, 113, 113, 0.1));
        color: #dc2626;
        border-color: rgba(239, 68, 68, 0.2);
    }

    .modern-button {
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-weight: 600;
        font-size: 0.9rem;
        border: none;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
        backdrop-filter: blur(10px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .modern-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
    }

    .modern-button.primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .modern-button.secondary {
        background: rgba(248, 250, 252, 0.8);
        color: #475569;
        border: 1px solid rgba(226, 232, 240, 0.8);
    }

    .time-indicator {
        font-size: 0.8rem;
        color: #64748b;
        font-weight: 500;
        padding: 0.25rem 0.75rem;
        background: rgba(248, 250, 252, 0.8);
        border-radius: 12px;
        backdrop-filter: blur(5px);
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding: 1.5rem 0;
    }

    .section-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #1e293b;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        letter-spacing: -0.01em;
    }

    .section-count {
        background: rgba(248, 250, 252, 0.9);
        color: #475569;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(226, 232, 240, 0.8);
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: rgba(255, 255, 255, 0.7);
        border-radius: 24px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .empty-state-icon {
        font-size: 4rem;
        margin-bottom: 1.5rem;
        opacity: 0.6;
        background: linear-gradient(135deg, currentColor, rgba(255, 255, 255, 0.6));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .empty-state-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #334155;
        margin-bottom: 0.75rem;
        letter-spacing: -0.01em;
    }

    .empty-state-description {
        font-size: 1rem;
        color: #64748b;
        font-weight: 400;
        line-height: 1.6;
    }

    @@media (max-width: 768px) {
        .enhanced-questionnaire-list {
            padding: 1rem 0.5rem;
        }

        .questionnaire-header {
            padding: 1.5rem;
            margin-bottom: 2rem;
        }

        .questionnaire-header h1 {
            font-size: 2rem;
        }

        .modern-tabs {
            flex-direction: column;
            gap: 0.5rem;
        }

        .modern-tab {
            padding: 0.75rem 1rem;
        }

        .questionnaire-card-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }

        .questionnaire-meta {
            flex-direction: column;
            align-items: stretch;
            gap: 0.75rem;
        }

        .questionnaire-actions {
            flex-direction: column;
            align-items: stretch;
            gap: 0.75rem;
        }

        .modern-button {
            justify-content: center;
        }

        .enhanced-questionnaire-card {
            padding: 1.5rem;
        }
    }
</style>

@if (currentAssignment != null)
{
    <!-- Questionnaire Completion Mode -->
    <QuestionnaireCompletion Assignment="@currentAssignment"
                            QuestionTypeLabels="@questionTypeLabels"
                            ExistingResponses="@GetExistingResponsesForAssignment(currentAssignment)"
                            OnCompleted="@OnQuestionnaireCompleted"
                            OnSave="@OnQuestionnaireSaved" />
}
else if (configuration != null && dataService != null)
{
    <!-- Modern Enhanced List View Mode -->
    <div class="enhanced-questionnaire-list">
        <div class="questionnaire-header">
            <h1>My Questionnaires</h1>
            <p>Track your progress and complete your assigned questionnaires</p>
        </div>
        @RenderEnhancedQuestionnairesList()
    </div>
}
else if (isLoading)
{
    <div class="text-center p-5">
        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
        <RadzenText TextStyle="TextStyle.Body1" Class="text-muted mt-3">Loading...</RadzenText>
    </div>
}
else
{
    <div class="text-center p-5">
        <RadzenText TextStyle="TextStyle.Body1" Class="text-muted">No questionnaire data available.</RadzenText>
    </div>
}

@code {
    private QuestionnairePageConfiguration? configuration;
    private IQuestionnaireDataService? dataService;

    private List<QuestionnaireAssignment> allAssignments = new();
    private List<QuestionnaireAssignment> newQuestionnaires = new();
    private List<QuestionnaireAssignment> inProgressQuestionnaires = new();
    private List<QuestionnaireAssignment> completedQuestionnaires = new();
    private List<QuestionnaireAssignment> overdueQuestionnaires = new();
    private List<string> availableCategories = new();
    private Dictionary<Guid, Dictionary<Guid, SectionResponse>> questionnaireResponses = new();
    private bool isLoading = false;

    // Questionnaire completion state
    private QuestionnaireAssignment? currentAssignment;
    private Dictionary<QuestionType, string> questionTypeLabels = new()
    {
        { QuestionType.SelfAssessment, "Self-Assessment" },
        { QuestionType.GoalAchievement, "Goal Achievement" },
        { QuestionType.TextQuestion, "Text Question" }
    };

    protected override async Task OnInitializedAsync()
    {
        await ExecuteSafelyAsync(async () =>
        {
            await LoadInitialData();
        }, "InitializeMyQuestionnaires");

        SetupConfiguration();
    }

    protected override bool HasStateChanged()
    {
        return HasParameterChanged(nameof(allAssignments), allAssignments.Count) ||
               HasParameterChanged(nameof(configuration), configuration) ||
               HasParameterChanged(nameof(isLoading), isLoading) ||
               HasParameterChanged(nameof(currentAssignment), currentAssignment?.Id) ||
               HasParameterChanged(nameof(questionnaireResponses), questionnaireResponses.Count);
    }

    private async Task LoadInitialData()
    {
        SetLoading(true);

        try
        {
            // Create the data service
            dataService = new EmployeeQuestionnaireDataService(EmployeeQuestionnaireService, QuestionnaireApiService);

            // Load data to setup configuration with performance optimization
            var loadAssignmentsTask = EmployeeQuestionnaireService.GetMyAssignmentsAsync();
            var loadTemplatesTask = QuestionnaireApiService.GetAllTemplatesAsync();

            // Load in parallel for better performance
            await Task.WhenAll(loadAssignmentsTask, loadTemplatesTask);

            allAssignments = loadAssignmentsTask.Result;
            var templates = loadTemplatesTask.Result;

            // Categorize assignments with improved logic
            await CategorizeQuestionnaires();

            // Get available categories
            availableCategories = new List<string> { "All Categories" };
            availableCategories.AddRange(
                templates.Where(t => t.CategoryId != Guid.Empty)
                        .Select(t => t.CategoryId.ToString())
                        .Distinct()
                        .OrderBy(c => c));
        }
        catch (Exception ex)
        {
            HandleError(ex, "loading questionnaire data");
        }
        finally
        {
            SetLoading(false);
        }
    }

    private void SetupConfiguration()
    {
        configuration = QuestionnairePageConfigurationFactory.CreateEmployeeConfiguration(
            allAssignments,
            newQuestionnaires,
            inProgressQuestionnaires,
            completedQuestionnaires,
            overdueQuestionnaires,
            availableCategories);
    }

    private async Task CategorizeQuestionnaires()
    {
        var now = DateTime.Now;

        // Separate new assignments from in-progress ones
        newQuestionnaires = allAssignments.Where(a =>
            a.Status == AssignmentStatus.Assigned).ToList();

        inProgressQuestionnaires = allAssignments.Where(a =>
            a.Status == AssignmentStatus.InProgress).ToList();

        completedQuestionnaires = allAssignments.Where(a =>
            a.Status == AssignmentStatus.Completed).ToList();

        overdueQuestionnaires = allAssignments.Where(a =>
            a.DueDate.HasValue &&
            a.DueDate.Value < now &&
            a.Status != AssignmentStatus.Completed).ToList();

        // Load existing responses for in-progress questionnaires
        await LoadExistingResponses();
    }

    private async Task LoadExistingResponses()
    {
        try
        {
            foreach (var assignment in inProgressQuestionnaires)
            {
                try
                {
                    var existingResponse = await QuestionnaireApiService.GetResponseByAssignmentIdAsync(assignment.Id);
                    if (existingResponse?.SectionResponses != null)
                    {
                        questionnaireResponses[assignment.Id] = existingResponse.SectionResponses;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error loading responses for assignment {assignment.Id}: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading existing responses: {ex.Message}");
        }
    }

    private int GetQuestionnaireProgress(QuestionnaireAssignment assignment)
    {
        if (!questionnaireResponses.ContainsKey(assignment.Id))
            return 0;

        var responses = questionnaireResponses[assignment.Id];
        if (!responses.Any()) return 0;

        var totalQuestions = 0;
        var answeredQuestions = 0;

        foreach (var sectionResponse in responses.Values)
        {
            totalQuestions += sectionResponse.QuestionResponses.Count;
            answeredQuestions += sectionResponse.QuestionResponses.Count(qr => IsResponseComplete(qr.Value));
        }

        return totalQuestions > 0 ? (int)((double)answeredQuestions / totalQuestions * 100) : 0;
    }

    private bool IsResponseComplete(QuestionResponse response)
    {
        return !string.IsNullOrEmpty(response.TextValue) ||
               (response.ComplexValue?.Any() == true);
    }

    private DateTime GetLastModifiedTime(QuestionnaireAssignment assignment)
    {
        if (!questionnaireResponses.ContainsKey(assignment.Id))
            return assignment.Status == AssignmentStatus.InProgress ? assignment.AssignedDate : assignment.AssignedDate;

        var responses = questionnaireResponses[assignment.Id];
        var modifiedDates = responses.Values
            .SelectMany(s => s.QuestionResponses.Values)
            .Where(r => r.LastModified > DateTime.MinValue)
            .Select(r => r.LastModified);

        var lastModified = modifiedDates.Any() ? modifiedDates.Max() : (DateTime?)null;

        return lastModified ?? assignment.AssignedDate;
    }

    private void SetLoading(bool loading)
    {
        isLoading = loading;
        NotifyStateChanged();
    }

    private void HandleError(Exception ex, string context)
    {
        NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed {context}: {ex.Message}");
    }

    private void ShowInfo(string message)
    {
        NotificationService.Notify(NotificationSeverity.Info, "Information", message);
    }

    private async Task StartQuestionnaire(QuestionnaireAssignment assignment)
    {
        if (assignment == null) return;

        try
        {
            currentAssignment = assignment;
            NotifyStateChanged();

            var message = assignment.Status == AssignmentStatus.InProgress
                ? $"Resuming questionnaire: {assignment.TemplateId}"
                : $"Starting questionnaire: {assignment.TemplateId}";
            ShowInfo(message);
        }
        catch (Exception ex)
        {
            HandleError(ex, "starting questionnaire");
        }
    }

    private async Task OnQuestionnaireCompleted()
    {
        try
        {
            if (currentAssignment != null)
            {
                // Update assignment status to completed
                currentAssignment.Status = AssignmentStatus.Completed;
                currentAssignment.CompletedDate = DateTime.Now;

                // Refresh the data
                await LoadInitialData();
                SetupConfiguration();

                // Return to list view
                currentAssignment = null;
                NotifyStateChanged();

                NotificationService.Notify(NotificationSeverity.Success, "Success", "Questionnaire completed successfully!");
            }
        }
        catch (Exception ex)
        {
            HandleError(ex, "completing questionnaire");
        }
    }

    private async Task OnQuestionnaireSaved(Dictionary<Guid, SectionResponse> responses)
    {
        try
        {
            if (currentAssignment != null)
            {
                // Update assignment status to in progress
                if (currentAssignment.Status == AssignmentStatus.Assigned)
                {
                    currentAssignment.Status = AssignmentStatus.InProgress;
                }

                // Show save confirmation
                NotificationService.Notify(NotificationSeverity.Info, "Saved", "Your progress has been saved.");
            }
        }
        catch (Exception ex)
        {
            HandleError(ex, "saving questionnaire progress");
        }
    }

    private RenderFragment RenderEnhancedQuestionnairesList() => __builder =>
    {
        <div class="questionnaire-tabs">
            <div class="modern-tabs">
                <button class="modern-tab @(selectedTabIndex == 0 ? "active" : "")" @onclick="@(() => { selectedTabIndex = 0; NotifyStateChanged(); })">
                    <RadzenIcon Icon="assignment" />
                    New
                    <span class="tab-count">@newQuestionnaires.Count</span>
                </button>
                <button class="modern-tab @(selectedTabIndex == 1 ? "active" : "")" @onclick="@(() => { selectedTabIndex = 1; NotifyStateChanged(); })">
                    <RadzenIcon Icon="hourglass_empty" />
                    In Progress
                    <span class="tab-count">@inProgressQuestionnaires.Count</span>
                </button>
                <button class="modern-tab @(selectedTabIndex == 2 ? "active" : "")" @onclick="@(() => { selectedTabIndex = 2; NotifyStateChanged(); })">
                    <RadzenIcon Icon="check_circle" />
                    Completed
                    <span class="tab-count">@completedQuestionnaires.Count</span>
                </button>
                @if (overdueQuestionnaires.Any())
                {
                    <button class="modern-tab @(selectedTabIndex == 3 ? "active" : "")" @onclick="@(() => { selectedTabIndex = 3; NotifyStateChanged(); })">
                        <RadzenIcon Icon="schedule" />
                        Overdue
                        <span class="tab-count">@overdueQuestionnaires.Count</span>
                    </button>
                }
            </div>

            <div class="tab-content">
                @if (selectedTabIndex == 0)
                {
                    @RenderQuestionnaireSection("new", newQuestionnaires, "assignment", "Ready to Start")
                }
                else if (selectedTabIndex == 1)
                {
                    @RenderQuestionnaireSection("in-progress", inProgressQuestionnaires, "hourglass_empty", "Continue Working")
                }
                else if (selectedTabIndex == 2)
                {
                    @RenderQuestionnaireSection("completed", completedQuestionnaires, "check_circle", "All Done")
                }
                else if (selectedTabIndex == 3)
                {
                    @RenderQuestionnaireSection("overdue", overdueQuestionnaires, "schedule", "Needs Attention")
                }
            </div>
        </div>
    };

    private RenderFragment RenderQuestionnaireSection(string sectionType, List<QuestionnaireAssignment> assignments, string icon, string emptyStateText) => __builder =>
    {
        <div class="questionnaire-section">
            @if (!assignments.Any())
            {
                <div class="empty-state">
                    <div class="empty-state-icon">
                        <RadzenIcon Icon="@icon" />
                    </div>
                    <div class="empty-state-title">@emptyStateText</div>
                    <div class="empty-state-description">
                        @(sectionType == "new" ? "No new questionnaires have been assigned to you yet. Check back later or contact your manager if you're expecting a questionnaire." :
                          sectionType == "in-progress" ? "You haven't started working on any questionnaires yet. Start a questionnaire from the 'New' tab to see it here." :
                          sectionType == "completed" ? "You haven't completed any questionnaires yet. Complete your questionnaires to see them here." :
                          "Great job! You don't have any overdue questionnaires. Keep up the good work!")
                    </div>
                </div>
            }
            else
            {
                @foreach (var assignment in assignments.OrderBy(a => a.DueDate ?? DateTime.MaxValue))
                {
                    @RenderEnhancedQuestionnaireCard(assignment, sectionType)
                }
            }
        </div>
    };

    private RenderFragment RenderEnhancedQuestionnaireCard(QuestionnaireAssignment assignment, string sectionType) => __builder =>
    {
        var cardClass = $"enhanced-questionnaire-card {sectionType}-questionnaire";
        var isOverdue = assignment.DueDate.HasValue && assignment.DueDate.Value < DateTime.Now && assignment.Status != AssignmentStatus.Completed;
        if (isOverdue) cardClass += " overdue-questionnaire";

        <RadzenCard Class="@cardClass">
            <div class="questionnaire-card-header">
                <div class="questionnaire-card-content">
                    <div class="questionnaire-title">@GetTemplateName(assignment)</div>
                    <div class="questionnaire-subtitle">Assigned by @assignment.AssignedBy</div>

                    <div class="questionnaire-meta">
                        <div class="questionnaire-meta-item">
                            <RadzenIcon Icon="event" Style="font-size: 1rem;" />
                            <span>Assigned: @assignment.AssignedDate.ToString("MMM dd, yyyy")</span>
                        </div>

                        @if (assignment.DueDate.HasValue)
                        {
                            <div class="questionnaire-meta-item">
                                <RadzenIcon Icon="schedule" Style="font-size: 1rem;" />
                                <span>Due: @assignment.DueDate.Value.ToString("MMM dd, yyyy")</span>
                                @if (isOverdue)
                                {
                                    <span class="status-badge overdue">Overdue</span>
                                }
                            </div>
                        }

                        @if (assignment.Status == AssignmentStatus.InProgress)
                        {
                            var lastModified = GetLastModifiedTime(assignment);
                            <div class="questionnaire-meta-item">
                                <RadzenIcon Icon="update" Style="font-size: 1rem;" />
                                <span>Last updated: @lastModified.ToString("MMM dd, yyyy HH:mm")</span>
                            </div>
                        }

                        @if (assignment.CompletedDate.HasValue)
                        {
                            <div class="questionnaire-meta-item">
                                <RadzenIcon Icon="check_circle" Style="font-size: 1rem;" />
                                <span>Completed: @assignment.CompletedDate.Value.ToString("MMM dd, yyyy")</span>
                            </div>
                        }
                    </div>

                    @if (assignment.Status == AssignmentStatus.InProgress)
                    {
                        var progress = GetQuestionnaireProgress(assignment);
                        <div class="progress-container">
                            <div class="progress-info">
                                <span>Progress: @progress% complete</span>
                                <span class="time-indicator">@GetProgressTimeText(assignment)</span>
                            </div>
                            <div class="progress-bar-container">
                                <div class="progress-bar-fill in-progress" style="width: @(progress)%"></div>
                            </div>
                        </div>
                    }
                </div>

                <div class="status-badge @GetStatusCssClass(assignment.Status)">
                    <RadzenIcon Icon="@GetStatusIcon(assignment.Status)" Style="font-size: 0.75rem;" />
                    @GetStatusText(assignment.Status)
                </div>
            </div>

            <div class="questionnaire-actions">
                <div class="time-indicator">
                    @GetActionTimeText(assignment)
                </div>

                <div>
                    @if (assignment.Status == AssignmentStatus.Assigned)
                    {
                        <button class="modern-button primary" @onclick="@(() => StartQuestionnaire(assignment))">
                            <RadzenIcon Icon="play_arrow" />
                            Start Questionnaire
                        </button>
                    }
                    else if (assignment.Status == AssignmentStatus.InProgress)
                    {
                        <button class="modern-button primary" @onclick="@(() => StartQuestionnaire(assignment))">
                            <RadzenIcon Icon="play_arrow" />
                            Continue
                        </button>
                    }
                    else if (assignment.Status == AssignmentStatus.Completed)
                    {
                        <button class="modern-button secondary" @onclick="@(() => ViewResults(assignment))">
                            <RadzenIcon Icon="visibility" />
                            View Results
                        </button>
                    }
                </div>
            </div>
        </RadzenCard>
    };

    private string GetTemplateName(QuestionnaireAssignment assignment)
    {
        return "Sample Questionnaire Template"; // This would come from the loaded templates
    }

    private string GetStatusCssClass(AssignmentStatus status)
    {
        return status switch
        {
            AssignmentStatus.Assigned => "new",
            AssignmentStatus.InProgress => "in-progress",
            AssignmentStatus.Completed => "completed",
            _ => "new"
        };
    }

    private string GetStatusIcon(AssignmentStatus status)
    {
        return status switch
        {
            AssignmentStatus.Assigned => "assignment",
            AssignmentStatus.InProgress => "hourglass_empty",
            AssignmentStatus.Completed => "check_circle",
            _ => "assignment"
        };
    }

    private string GetStatusText(AssignmentStatus status)
    {
        return status switch
        {
            AssignmentStatus.Assigned => "New",
            AssignmentStatus.InProgress => "In Progress",
            AssignmentStatus.Completed => "Completed",
            _ => "Unknown"
        };
    }

    private string GetProgressTimeText(QuestionnaireAssignment assignment)
    {
        var lastModified = GetLastModifiedTime(assignment);
        if (lastModified == DateTime.MinValue) return "Not started";

        var timeSinceLastUpdate = DateTime.Now - lastModified;
        if (timeSinceLastUpdate.TotalDays >= 1)
            return $"Last updated {(int)timeSinceLastUpdate.TotalDays} days ago";
        else if (timeSinceLastUpdate.TotalHours >= 1)
            return $"Last updated {(int)timeSinceLastUpdate.TotalHours} hours ago";
        else
            return "Recently updated";
    }

    private string GetActionTimeText(QuestionnaireAssignment assignment)
    {
        if (assignment.DueDate.HasValue)
        {
            var timeUntilDue = assignment.DueDate.Value - DateTime.Now;
            if (timeUntilDue.TotalDays < 0)
                return $"Overdue by {Math.Abs((int)timeUntilDue.TotalDays)} days";
            else if (timeUntilDue.TotalDays <= 1)
                return "Due today";
            else if (timeUntilDue.TotalDays <= 7)
                return $"Due in {(int)timeUntilDue.TotalDays} days";
        }
        return "";
    }

    private async Task ViewResults(QuestionnaireAssignment assignment)
    {
        ShowInfo("Results view would be implemented here");
    }

    private Dictionary<Guid, SectionResponse>? GetExistingResponsesForAssignment(QuestionnaireAssignment assignment)
    {
        if (assignment != null && questionnaireResponses.ContainsKey(assignment.Id))
        {
            return questionnaireResponses[assignment.Id];
        }
        return null;
    }

    private int selectedTabIndex = 0;
}