@page "/my-questionnaires"
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components.Shared
@inherits BasePageComponent

<PageTitle>My Questionnaires</PageTitle>

@if (configuration != null && dataService != null)
{
    <GenericQuestionnaireListPage Configuration="@configuration" DataService="@dataService" />
}
else if (isLoading)
{
    <div class="text-center p-5">
        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
        <RadzenText TextStyle="TextStyle.Body1" Class="text-muted mt-3">Loading...</RadzenText>
    </div>
}

@code {
    private QuestionnairePageConfiguration? configuration;
    private IQuestionnaireDataService? dataService;

    private List<QuestionnaireAssignment> allAssignments = new();
    private List<QuestionnaireAssignment> currentQuestionnaires = new();
    private List<QuestionnaireAssignment> upcomingQuestionnaires = new();
    private List<QuestionnaireAssignment> completedQuestionnaires = new();
    private List<QuestionnaireAssignment> overdueQuestionnaires = new();
    private List<string> availableCategories = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
        SetupConfiguration();
    }

    private async Task LoadInitialData()
    {
        SetLoading(true);

        try
        {
            // Create the data service
            dataService = new EmployeeQuestionnaireDataService(EmployeeQuestionnaireService, QuestionnaireApiService);

            // Load data to setup configuration
            allAssignments = await EmployeeQuestionnaireService.GetMyAssignmentsAsync();
            var templates = await QuestionnaireApiService.GetAllTemplatesAsync();

            // Categorize assignments
            CategorizeQuestionnaires();

            // Get available categories
            availableCategories = new List<string> { "All Categories" };
            availableCategories.AddRange(
                templates.Where(t => !string.IsNullOrEmpty(t.Category))
                        .Select(t => t.Category!)
                        .Distinct()
                        .OrderBy(c => c));
        }
        catch (Exception ex)
        {
            await HandleError(ex, "loading questionnaire data");
        }
        finally
        {
            SetLoading(false);
        }
    }

    private void SetupConfiguration()
    {
        configuration = QuestionnairePageConfigurationFactory.CreateEmployeeConfiguration(
            allAssignments,
            currentQuestionnaires,
            upcomingQuestionnaires,
            completedQuestionnaires,
            overdueQuestionnaires,
            availableCategories);
    }

    private void CategorizeQuestionnaires()
    {
        var now = DateTime.Now;

        currentQuestionnaires = allAssignments.Where(a =>
            a.Status == AssignmentStatus.Assigned || a.Status == AssignmentStatus.InProgress).ToList();

        upcomingQuestionnaires = allAssignments.Where(a =>
            a.Status == AssignmentStatus.Assigned &&
            a.AssignedDate > now.AddDays(-1)).ToList();

        completedQuestionnaires = allAssignments.Where(a =>
            a.Status == AssignmentStatus.Completed).ToList();

        overdueQuestionnaires = allAssignments.Where(a =>
            a.DueDate.HasValue &&
            a.DueDate.Value < now &&
            a.Status != AssignmentStatus.Completed).ToList();
    }
}