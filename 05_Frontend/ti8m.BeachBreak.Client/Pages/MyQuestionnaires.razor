@page "/my-questionnaires"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components.Shared
@inherits BaseQuestionnaireListPage
@inject IEmployeeQuestionnaireService EmployeeQuestionnaireService
@inject IQuestionnaireTemplateService TemplateService
@inject IQuestionnaireResponseService ResponseService

<PageTitle>My Questionnaires</PageTitle>

@if (currentAssignment != null)
{
	<!-- Questionnaire Completion Mode -->
	<QuestionnaireCompletion Assignment="@currentAssignment"
							QuestionTypeLabels="@questionTypeLabels"
							ExistingResponses="@GetExistingResponsesForAssignment(currentAssignment)"
							OnCompleted="@OnQuestionnaireCompleted"
							OnSave="@OnQuestionnaireSaved" />
}
else if (configuration != null && dataService != null)
{
	<GenericQuestionnaireListPage Configuration="@configuration" DataService="@dataService" />
}
else if (isLoading)
{
	<div class="text-center p-5">
		<RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
		<RadzenText TextStyle="TextStyle.Body1" Class="text-muted mt-3">Loading my questionnaires...</RadzenText>
	</div>
}
else
{
	<div class="text-center p-5">
		<RadzenText TextStyle="TextStyle.Body1" Class="text-muted">No questionnaire data available.</RadzenText>
	</div>
}

@code {
	// Employee-specific state
	private List<QuestionnaireAssignment> allAssignments = new();
	private List<QuestionnaireAssignment> newQuestionnaires = new();
	private List<QuestionnaireAssignment> inProgressQuestionnaires = new();
	private List<QuestionnaireAssignment> completedQuestionnaires = new();
	private List<QuestionnaireAssignment> overdueQuestionnaires = new();
	private Dictionary<Guid, Dictionary<Guid, SectionResponse>> questionnaireResponses = new();

	// Questionnaire completion state
	private QuestionnaireAssignment? currentAssignment;
	private Dictionary<QuestionType, string> questionTypeLabels = new()
	{
		{ QuestionType.SelfAssessment, "Self-Assessment" },
		{ QuestionType.GoalAchievement, "Goal Achievement" },
		{ QuestionType.TextQuestion, "Text Question" }
	};

	protected override string GetInitializationContext() => "InitializeMyQuestionnaires";

	protected override async Task LoadRoleSpecificDataAsync()
	{
		// Create the data service
		dataService = new EmployeeQuestionnaireDataService(EmployeeQuestionnaireService, TemplateService);

		// Load data with performance optimization
		var loadAssignmentsTask = EmployeeQuestionnaireService.GetMyAssignmentsAsync();
		var loadTemplatesTask = TemplateService.GetAllTemplatesAsync();

		await Task.WhenAll(loadAssignmentsTask, loadTemplatesTask);

		allAssignments = loadAssignmentsTask.Result;

		// Categorize assignments
		await CategorizeQuestionnaires();
	}

	protected override QuestionnairePageConfiguration CreateConfiguration()
	{
		return QuestionnairePageConfigurationFactory.CreateEmployeeConfiguration(
			allAssignments,
			newQuestionnaires,
			inProgressQuestionnaires,
			completedQuestionnaires,
			overdueQuestionnaires,
			categories);
	}

	protected override void ConfigureActions()
	{
		if (configuration?.Actions != null)
		{
			foreach (var action in configuration.Actions)
			{
				if (action.Id == "start-questionnaire")
				{
					action.OnClick = () => StartSelectedQuestionnaire();
				}
			}
		}
	}

	protected override bool HasAdditionalStateChanged()
	{
		return HasParameterChanged(nameof(allAssignments), allAssignments.Count) ||
			   HasParameterChanged(nameof(currentAssignment), currentAssignment?.Id) ||
			   HasParameterChanged(nameof(questionnaireResponses), questionnaireResponses.Count);
	}

	private async Task CategorizeQuestionnaires()
	{
		var now = DateTime.Now;

		newQuestionnaires = allAssignments.Where(a =>
			a.Status == AssignmentStatus.Assigned).ToList();

		inProgressQuestionnaires = allAssignments.Where(a =>
			a.Status == AssignmentStatus.InProgress).ToList();

		completedQuestionnaires = allAssignments.Where(a =>
			a.Status == AssignmentStatus.Completed).ToList();

		overdueQuestionnaires = allAssignments.Where(a =>
			a.DueDate.HasValue &&
			a.DueDate.Value < now &&
			a.Status != AssignmentStatus.Completed).ToList();

		// Load existing responses for in-progress questionnaires
		await LoadExistingResponses();
	}

	private async Task LoadExistingResponses()
	{
		try
		{
			foreach (var assignment in inProgressQuestionnaires)
			{
				try
				{
					var existingResponse = await ResponseService.GetResponseByAssignmentIdAsync(assignment.Id);
					if (existingResponse?.SectionResponses != null)
					{
						questionnaireResponses[assignment.Id] = existingResponse.SectionResponses;
					}
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Error loading responses for assignment {assignment.Id}: {ex.Message}");
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading existing responses: {ex.Message}");
		}
	}

	private async Task StartSelectedQuestionnaire()
	{
		ShowInfo("Select a questionnaire from the list to start working on it.");
	}

	private async Task StartQuestionnaire(QuestionnaireAssignment assignment)
	{
		if (assignment == null) return;

		try
		{
			currentAssignment = assignment;
			NotifyStateChanged();

			var message = assignment.Status == AssignmentStatus.InProgress
				? $"Resuming questionnaire: {assignment.TemplateId}"
				: $"Starting questionnaire: {assignment.TemplateId}";
			ShowInfo(message);
		}
		catch (Exception ex)
		{
			HandleError(ex, "starting questionnaire");
		}
	}

	private async Task OnQuestionnaireCompleted()
	{
		try
		{
			if (currentAssignment != null)
			{
				// Update assignment status to completed
				currentAssignment.Status = AssignmentStatus.Completed;
				currentAssignment.CompletedDate = DateTime.Now;

				// Refresh the data
				await RefreshData();

				// Return to list view
				currentAssignment = null;
				NotifyStateChanged();

				ShowSuccess("Questionnaire completed successfully!");
			}
		}
		catch (Exception ex)
		{
			HandleError(ex, "completing questionnaire");
		}
	}

	private async Task OnQuestionnaireSaved(Dictionary<Guid, SectionResponse> responses)
	{
		try
		{
			if (currentAssignment != null)
			{
				// Update assignment status to in progress
				if (currentAssignment.Status == AssignmentStatus.Assigned)
				{
					currentAssignment.Status = AssignmentStatus.InProgress;
				}

				ShowInfo("Your progress has been saved.");
			}
		}
		catch (Exception ex)
		{
			HandleError(ex, "saving questionnaire progress");
		}
	}

	private Dictionary<Guid, SectionResponse>? GetExistingResponsesForAssignment(QuestionnaireAssignment assignment)
	{
		if (assignment != null && questionnaireResponses.ContainsKey(assignment.Id))
		{
			return questionnaireResponses[assignment.Id];
		}
		return null;
	}
}
