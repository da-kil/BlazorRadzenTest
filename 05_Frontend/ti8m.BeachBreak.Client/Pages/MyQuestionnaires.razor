@page "/my-questionnaires"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models
@using ti8m.BeachBreak.Client.Services
@using ti8m.BeachBreak.Client.Components.Shared
@inherits BaseQuestionnaireListPage
@inject IEmployeeQuestionnaireService EmployeeQuestionnaireService
@inject IQuestionnaireTemplateService TemplateService
@inject IQuestionnaireResponseService ResponseService
@inject NavigationManager NavigationManager

<PageTitle>My Questionnaires</PageTitle>

@if (configuration != null && dataService != null)
{
	<GenericQuestionnaireListPage Configuration="@configuration"
								  DataService="@dataService"
								  OnStartQuestionnaire="@StartQuestionnaire"
								  HasProgressChecker="@((assignmentId) => questionnaireResponses.ContainsKey(assignmentId))" />
}
else if (isLoading)
{
	<div class="text-center p-5">
		<RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
		<RadzenText TextStyle="TextStyle.Body1" Class="text-muted mt-3">Loading my questionnaires...</RadzenText>
	</div>
}
else
{
	<div class="text-center p-5">
		<RadzenText TextStyle="TextStyle.Body1" Class="text-muted">No questionnaire data available.</RadzenText>
	</div>
}

@code {
	// Employee-specific state
	private List<QuestionnaireAssignment> allAssignments = new();
	private List<QuestionnaireAssignment> newQuestionnaires = new();
	private List<QuestionnaireAssignment> inProgressQuestionnaires = new();
	private List<QuestionnaireAssignment> completedQuestionnaires = new();
	private List<QuestionnaireAssignment> overdueQuestionnaires = new();
	private Dictionary<Guid, Dictionary<Guid, SectionResponse>> questionnaireResponses = new();

	private bool hasInitialized = false;

	protected override string GetInitializationContext() => "InitializeMyQuestionnaires";

	protected override async Task OnParametersSetAsync()
	{
		// Skip refresh on initial load (OnInitializedAsync handles that)
		if (!hasInitialized)
		{
			hasInitialized = true;
			return;
		}

		// This runs every time the user navigates back to this page after initial load
		// Reload data to ensure we have the latest assignment statuses
		await RefreshData();
	}

	protected override async Task LoadRoleSpecificDataAsync()
	{
		// Create the data service
		dataService = new EmployeeQuestionnaireDataService(EmployeeQuestionnaireService, TemplateService);

		// Load assignments (templates are denormalized in query handler)
		allAssignments = await EmployeeQuestionnaireService.GetMyAssignmentsAsync();

		// Categorize assignments
		await CategorizeQuestionnaires();
	}

	protected override QuestionnairePageConfiguration CreateConfiguration()
	{
		return QuestionnairePageConfigurationFactory.CreateEmployeeConfiguration(
			allAssignments,
			newQuestionnaires,
			inProgressQuestionnaires,
			completedQuestionnaires,
			overdueQuestionnaires,
			categories);
	}

	protected override void ConfigureActions()
	{
		if (configuration?.Actions != null)
		{
			foreach (var action in configuration.Actions)
			{
				if (action.Id == "start-questionnaire")
				{
					action.OnClick = () => StartSelectedQuestionnaire();
				}
			}
		}
	}

	protected override bool HasAdditionalStateChanged()
	{
		return HasParameterChanged(nameof(allAssignments), allAssignments.Count) ||
			   HasParameterChanged(nameof(questionnaireResponses), questionnaireResponses.Count);
	}

	private async Task CategorizeQuestionnaires()
	{
		var now = DateTime.Now;

		// Upcoming: Assigned but not yet started by employee
		newQuestionnaires = allAssignments.Where(a =>
			a.WorkflowState == WorkflowState.Assigned).ToList();

		// Current: Employee is working, submitted, or in review process
		// Includes all states where employee might still need to take action or is waiting
		inProgressQuestionnaires = allAssignments.Where(a =>
			a.WorkflowState is WorkflowState.EmployeeInProgress
			or WorkflowState.BothInProgress
			or WorkflowState.EmployeeSubmitted
			or WorkflowState.ManagerSubmitted
			or WorkflowState.BothSubmitted
			or WorkflowState.InReview
			or WorkflowState.EmployeeReviewConfirmed
			or WorkflowState.ManagerReviewConfirmed).ToList();

		// Completed: ONLY finalized questionnaires
		completedQuestionnaires = allAssignments.Where(a =>
			a.WorkflowState == WorkflowState.Finalized).ToList();

		// Overdue: Any non-completed assignment past due date
		overdueQuestionnaires = allAssignments.Where(a =>
			a.DueDate.HasValue &&
			a.DueDate.Value < now &&
			a.WorkflowState != WorkflowState.Finalized).ToList();

		// Load existing responses for in-progress questionnaires
		await LoadExistingResponses();
	}

	private async Task LoadExistingResponses()
	{
		try
		{
			foreach (var assignment in inProgressQuestionnaires)
			{
				try
				{
					var existingResponse = await ResponseService.GetResponseByAssignmentIdAsync(assignment.Id);
					if (existingResponse?.SectionResponses != null)
					{
						questionnaireResponses[assignment.Id] = existingResponse.SectionResponses;
					}
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Error loading responses for assignment {assignment.Id}: {ex.Message}");
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading existing responses: {ex.Message}");
		}
	}

	private async Task StartSelectedQuestionnaire()
	{
		ShowInfo("Select a questionnaire from the list to start working on it.");
	}

	private async Task StartQuestionnaire(QuestionnaireAssignment assignment)
	{
		if (assignment == null) return;

		try
		{
			// Navigate to the unified questionnaire page
			NavigationManager.NavigateTo($"/questionnaire/{assignment.Id}");
		}
		catch (Exception ex)
		{
			HandleError(ex, "starting questionnaire");
		}
	}

}
