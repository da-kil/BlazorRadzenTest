@page "/annual-review"
@using BlazorRadzenTest.Client.Components
@using BlazorRadzenTest.Client.Models
@using Radzen
@using Radzen.Blazor

<PageTitle>Annual Performance Review 2024</PageTitle>

<div class="container-fluid">
    <RadzenCard Class="p-4">
        <div class="text-center mb-4">
            <RadzenText TextStyle="TextStyle.H3" Class="text-primary">
                <RadzenIcon Icon="assessment" Class="me-2" />
                Annual Performance Review 2024
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle1" Class="text-muted">
                Your foundation for the upcoming annual conversation
            </RadzenText>
        </div>

        <RadzenSteps Value="@currentStep" Change="@OnStepChanged" Class="mb-4">
            <RadzenStepsItem Text="Introduction" />
            <RadzenStepsItem Text="Information" />
            <RadzenStepsItem Text="Self-Assessment" />
            <RadzenStepsItem Text="Goal Review" />
            <RadzenStepsItem Text="Career Planning" />
            <RadzenStepsItem Text="2024 Goals" />
            <RadzenStepsItem Text="Summary" />
        </RadzenSteps>

        <div class="step-content">
            @switch (currentStep)
            {
                case 0:
                    <IntroductionStep CanProceed="canProceedFromIntro" CanProceedChanged="@(value => canProceedFromIntro = value)" />
                    break;
                case 1:
                    <ParticipantInfoStep ParticipantInfo="participantInfo" ParticipantInfoChanged="@(value => participantInfo = value)" 
                                        CanProceed="canProceedFromInfo" CanProceedChanged="@(value => canProceedFromInfo = value)" />
                    break;
                case 2:
                    <SelfAssessmentStep Ratings="selfAssessmentRatings" RatingsChanged="@(value => selfAssessmentRatings = value)" 
                                       CanProceed="canProceedFromSelfAssessment" CanProceedChanged="@(value => canProceedFromSelfAssessment = value)" />
                    break;
                case 3:
                    <GoalReviewStep GoalAchievements="goalAchievements" GoalAchievementsChanged="@(value => goalAchievements = value)" 
                                   CanProceed="canProceedFromGoalReview" CanProceedChanged="@(value => canProceedFromGoalReview = value)" />
                    break;
                case 4:
                    <CareerPlanningStep CareerPlans="careerPlans" CareerPlansChanged="@(value => careerPlans = value)" 
                                       CanProceed="canProceedFromCareer" CanProceedChanged="@(value => canProceedFromCareer = value)" />
                    break;
                case 5:
                    <GoalSettingStep Goals="newGoals" GoalsChanged="@(value => newGoals = value)" 
                                    CanProceed="canProceedFromGoals" CanProceedChanged="@(value => canProceedFromGoals = value)" />
                    break;
                case 6:
                    <SummaryStep ParticipantInfo="participantInfo" 
                                SelfAssessment="selfAssessmentRatings"
                                GoalAchievements="goalAchievements"
                                CareerPlans="careerPlans"
                                NewGoals="newGoals" />
                    break;
            }
        </div>

        <div class="d-flex justify-content-between mt-4">
            <RadzenButton Text="Previous" 
                         ButtonStyle="ButtonStyle.Light" 
                         Icon="arrow_back"
                         Click="@(() => PreviousStep())"
                         Disabled="@(currentStep == 0)" />
            
            <div class="text-center">
                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                    Step @(currentStep + 1) of 7
                </RadzenText>
            </div>
            
            <RadzenButton Text="@(currentStep == 6 ? "Complete Review" : "Next")" 
                         ButtonStyle="ButtonStyle.Primary" 
                         Icon="@(currentStep == 6 ? "check_circle" : "arrow_forward")"
                         Click="@(() => NextStep())"
                         Disabled="@(!CanProceedFromCurrentStep())" />
        </div>
    </RadzenCard>
</div>

@code {
    private int currentStep = 0;
    
    // Step validation flags
    private bool canProceedFromIntro = true;
    private bool canProceedFromInfo = false;
    private bool canProceedFromSelfAssessment = false;
    private bool canProceedFromGoalReview = false;
    private bool canProceedFromCareer = false;
    private bool canProceedFromGoals = false;

    // Data models
    private ParticipantInfo participantInfo = new();
    private Dictionary<string, CompetencyRating> selfAssessmentRatings = new();
    private List<GoalAchievement> goalAchievements = new();
    private CareerPlan careerPlans = new();
    private List<AnnualGoal> newGoals = new();

    private bool CanProceedFromCurrentStep()
    {
        return currentStep switch
        {
            0 => canProceedFromIntro,
            1 => canProceedFromInfo,
            2 => canProceedFromSelfAssessment,
            3 => canProceedFromGoalReview,
            4 => canProceedFromCareer,
            5 => canProceedFromGoals,
            6 => true,
            _ => false
        };
    }

    private void NextStep()
    {
        if (CanProceedFromCurrentStep())
        {
            if (currentStep == 6)
            {
                CompleteReview();
            }
            else
            {
                currentStep++;
                StateHasChanged();
            }
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 0)
        {
            currentStep--;
            StateHasChanged();
        }
    }

    private void OnStepChanged(int newStep)
    {
        // Allow navigation to any previous step or current step
        if (newStep <= currentStep)
        {
            currentStep = newStep;
            StateHasChanged();
            return;
        }

        // For forward navigation, check if we can proceed from current step
        if (CanProceedFromCurrentStep())
        {
            currentStep = newStep;
            StateHasChanged();
        }
        else
        {
            // Show a message that the current step must be completed first
            NotificationService.Notify(NotificationSeverity.Warning, 
                "Complete Current Step", 
                "Please complete the current step before proceeding.");
        }
    }

    private void CompleteReview()
    {
        // Save or submit the review data
        NotificationService.Notify(NotificationSeverity.Success, 
            "Review Completed", 
            "Your annual performance review has been successfully submitted!");
    }

    [Inject] protected NotificationService NotificationService { get; set; } = default!;

}