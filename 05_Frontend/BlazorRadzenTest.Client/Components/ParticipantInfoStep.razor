@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models

<RadzenCard Class="participant-info-step">
    <RadzenText TextStyle="TextStyle.H4" Class="text-primary mb-3">
        <RadzenIcon Icon="person" Class="me-2" />
        Participant Information
    </RadzenText>
    
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeMD="6">
            <div class="mb-3">
                <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Employee</RadzenText>
                <RadzenTextBox @bind-Value="@ParticipantInfo.EmployeeName" 
                              @bind-Value:after="ValidateForm"
                              Placeholder="Enter your full name" 
                              Class="w-100" />
            </div>
        </RadzenColumn>
        
        <RadzenColumn Size="12" SizeMD="6">
            <div class="mb-3">
                <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Function/Role</RadzenText>
                <RadzenTextBox @bind-Value="@ParticipantInfo.Function" 
                              @bind-Value:after="ValidateForm"
                              Placeholder="Enter your job title" 
                              Class="w-100" />
            </div>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeMD="6">
            <div class="mb-3">
                <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Supervisor</RadzenText>
                <RadzenTextBox @bind-Value="@ParticipantInfo.SupervisorName" 
                              @bind-Value:after="ValidateForm"
                              Placeholder="Enter supervisor's name" 
                              Class="w-100" />
            </div>
        </RadzenColumn>
        
        <RadzenColumn Size="12" SizeMD="6">
            <div class="mb-3">
                <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Department</RadzenText>
                <RadzenTextBox @bind-Value="@ParticipantInfo.Department" 
                              @bind-Value:after="ValidateForm"
                              Placeholder="Enter department name" 
                              Class="w-100" />
            </div>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12" SizeMD="6">
            <div class="mb-3">
                <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Review Date</RadzenText>
                <RadzenDatePicker @bind-Value="@ParticipantInfo.ReviewDate" 
                                @bind-Value:after="ValidateForm"
                                ShowTime="false" 
                                DateFormat="dd/MM/yyyy" 
                                Class="w-100" />
            </div>
        </RadzenColumn>
        
        <RadzenColumn Size="12" SizeMD="6">
            <div class="mb-3">
                <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Location</RadzenText>
                <RadzenTextBox @bind-Value="@ParticipantInfo.Location" 
                              @bind-Value:after="ValidateForm"
                              Placeholder="Enter office location" 
                              Class="w-100" />
            </div>
        </RadzenColumn>
    </RadzenRow>

    @if (!isValid)
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Class="mt-3" ShowIcon="true">
            <RadzenText TextStyle="TextStyle.Body2">
                Please fill in all required fields to continue.
            </RadzenText>
        </RadzenAlert>
    }
</RadzenCard>

@code {
    [Parameter] public ParticipantInfo ParticipantInfo { get; set; } = new();
    [Parameter] public EventCallback<ParticipantInfo> ParticipantInfoChanged { get; set; }
    
    [Parameter] public bool CanProceed { get; set; } = false;
    [Parameter] public EventCallback<bool> CanProceedChanged { get; set; }

    private bool isValid = false;

    protected override async Task OnInitializedAsync()
    {
        await ValidateForm();
    }

    private async Task ValidateForm()
    {
        isValid = !string.IsNullOrWhiteSpace(ParticipantInfo.EmployeeName) &&
                 !string.IsNullOrWhiteSpace(ParticipantInfo.Function) &&
                 !string.IsNullOrWhiteSpace(ParticipantInfo.SupervisorName) &&
                 !string.IsNullOrWhiteSpace(ParticipantInfo.Department) &&
                 !string.IsNullOrWhiteSpace(ParticipantInfo.Location);

        await CanProceedChanged.InvokeAsync(isValid);
        await ParticipantInfoChanged.InvokeAsync(ParticipantInfo);
    }

}