@using Radzen
@using Radzen.Blazor
@using ti8m.BeachBreak.Client.Models

<RadzenCard Class="summary-step">
    <RadzenText TextStyle="TextStyle.H4" Class="text-primary mb-3">
        <RadzenIcon Icon="summarize" Class="me-2" />
        Summary & Next Steps
    </RadzenText>
    
    <RadzenText TextStyle="TextStyle.Body1" Class="mb-4">
        Review your completed annual performance review. This summary will be shared with your supervisor 
        to facilitate a productive discussion during your performance meeting.
    </RadzenText>

    <RadzenTabs TabPosition="TabPosition.Left">
        <Tabs>
            <RadzenTabsItem Text="Overview">
                <div class="overview-section p-3">
                    <RadzenCard Class="mb-3 p-3 bg-light">
                        <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold mb-2">
                            <RadzenIcon Icon="person" Class="me-2" />
                            Participant Information
                        </RadzenText>
                        <RadzenRow>
                            <RadzenColumn Size="6">
                                <RadzenText TextStyle="TextStyle.Body2">
                                    <strong>Employee:</strong> @ParticipantInfo.EmployeeName
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">
                                    <strong>Department:</strong> @ParticipantInfo.Department
                                </RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="6">
                                <RadzenText TextStyle="TextStyle.Body2">
                                    <strong>Supervisor:</strong> @ParticipantInfo.SupervisorName
                                </RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2">
                                    <strong>Review Date:</strong> @ParticipantInfo.ReviewDate.ToString("dd/MM/yyyy")
                                </RadzenText>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenCard>

                    <RadzenRow Gap="1rem">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenCard Class="stat-card p-3 text-center h-100">
                                <RadzenIcon Icon="assessment" Style="font-size: 2.5rem; color: var(--rz-primary);" />
                                <RadzenText TextStyle="TextStyle.H5" Class="fw-bold mt-2">@averageSelfRating.ToString("F1")</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Average Self-Rating</RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption">Out of 4.0</RadzenText>
                            </RadzenCard>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenCard Class="stat-card p-3 text-center h-100">
                                <RadzenIcon Icon="track_changes" Style="font-size: 2.5rem; color: var(--rz-success);" />
                                <RadzenText TextStyle="TextStyle.H5" Class="fw-bold mt-2">@averageGoalAchievement.ToString("F0")%</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">Avg. Goal Achievement</RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption">2023 Goals</RadzenText>
                            </RadzenCard>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenCard Class="stat-card p-3 text-center h-100">
                                <RadzenIcon Icon="flag" Style="font-size: 2.5rem; color: var(--rz-warning);" />
                                <RadzenText TextStyle="TextStyle.H5" Class="fw-bold mt-2">@NewGoals.Count</RadzenText>
                                <RadzenText TextStyle="TextStyle.Body2" Class="text-muted">2024 Goals Set</RadzenText>
                                <RadzenText TextStyle="TextStyle.Caption">@NewGoals.Sum(g => g.WeightingPercentage).ToString("F0")% Total Weight</RadzenText>
                            </RadzenCard>
                        </RadzenColumn>
                    </RadzenRow>
                </div>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Self-Assessment">
                <div class="self-assessment-summary p-3">
                    <RadzenChart>
                        <RadzenDonutSeries Data="@competencyChartData" 
                                          CategoryProperty="Competency" 
                                          ValueProperty="Rating" 
                                          Title="Competency Ratings" />
                    </RadzenChart>

                    <div class="competency-list mt-4">
                        @foreach (var competency in SelfAssessment.OrderByDescending(c => c.Value.Rating))
                        {
                            <div class="competency-item d-flex justify-content-between align-items-center mb-2">
                                <RadzenText TextStyle="TextStyle.Body2">@GetCompetencyName(competency.Key)</RadzenText>
                                <div class="d-flex align-items-center">
                                    <RadzenRating Value="@competency.Value.Rating" ReadOnly="true" Stars="4" Size="24px" Class="me-2" />
                                    <RadzenText TextStyle="TextStyle.Caption">@competency.Value.Rating/4</RadzenText>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </RadzenTabsItem>

            <RadzenTabsItem Text="Goal Review">
                <div class="goal-review-summary p-3">
                    @if (GoalAchievements.Count > 0)
                    {
                        @foreach (var goal in GoalAchievements)
                        {
                            <RadzenCard Class="goal-summary-card mb-3 p-3">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" Class="fw-bold">@goal.Description</RadzenText>
                                    <RadzenBadge Text="@($"{goal.AchievementPercentage}%")" 
                                               BadgeStyle="@GetAchievementBadgeStyle(goal.AchievementPercentage)" />
                                </div>
                                <RadzenProgressBar Value="@goal.AchievementPercentage" 
                                                 Max="100" 
                                                 ProgressBarStyle="@GetProgressBarStyle(goal.AchievementPercentage)"
                                                 Class="mb-2" />
                                @if (!string.IsNullOrWhiteSpace(goal.EmployeeJustification))
                                {
                                    <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                        @(goal.EmployeeJustification.Length > 100 ? 
                                          goal.EmployeeJustification.Substring(0, 100) + "..." : 
                                          goal.EmployeeJustification)
                                    </RadzenText>
                                }
                            </RadzenCard>
                        }
                    }
                    else
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Info" ShowIcon="true">
                            <RadzenText TextStyle="TextStyle.Body2">No 2023 goals were reviewed.</RadzenText>
                        </RadzenAlert>
                    }
                </div>
            </RadzenTabsItem>

            <RadzenTabsItem Text="2024 Goals">
                <div class="new-goals-summary p-3">
                    @if (NewGoals.Count > 0)
                    {
                        @foreach (var goal in NewGoals)
                        {
                            <RadzenCard Class="new-goal-card mb-3 p-3 border-start border-primary border-3">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" Class="fw-bold">@goal.Description</RadzenText>
                                    <RadzenBadge Text="@($"{goal.WeightingPercentage:F0}%")" 
                                               BadgeStyle="BadgeStyle.Primary" />
                                </div>
                                
                                <RadzenText TextStyle="TextStyle.Body2" Class="mb-2">
                                    <RadzenIcon Icon="schedule" Class="me-1" />
                                    @goal.StartDate?.ToString("dd/MM/yyyy") - @goal.EndDate?.ToString("dd/MM/yyyy")
                                </RadzenText>
                                
                                <RadzenText TextStyle="TextStyle.Caption" Class="text-muted">
                                    <strong>Measurement:</strong> @goal.MeasurementCriteria
                                </RadzenText>
                            </RadzenCard>
                        }
                    }
                    else
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Warning" ShowIcon="true">
                            <RadzenText TextStyle="TextStyle.Body2">No 2024 goals were set.</RadzenText>
                        </RadzenAlert>
                    }
                </div>
            </RadzenTabsItem>
        </Tabs>
    </RadzenTabs>

    <RadzenCard Class="next-steps-section mt-4 p-3 bg-primary text-white">
        <RadzenText TextStyle="TextStyle.Subtitle1" Class="fw-bold mb-3">
            <RadzenIcon Icon="next_plan" Class="me-2" />
            Next Steps
        </RadzenText>
        
        <div class="mb-3">
            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Additional Comments</RadzenText>
            <RadzenTextArea @bind-Value="@finalComments"
                          Placeholder="Any final thoughts, comments, or items for discussion..."
                          Rows="3"
                          Class="w-100" />
        </div>

        <div class="mb-3">
            <RadzenText TextStyle="TextStyle.Body1" Class="fw-bold mb-2">Follow-up Meeting Date</RadzenText>
            <RadzenDatePicker @bind-Value="@followUpDate"
                            ShowTime="false"
                            DateFormat="dd/MM/yyyy"
                            Class="w-100" />
        </div>

        <RadzenAlert AlertStyle="AlertStyle.Light" Class="mt-3" ShowIcon="true">
            <RadzenText TextStyle="TextStyle.Body2" Style="color: inherit;">
                <strong>Before the Meeting:</strong>
                <br />1. Please send this completed form to your supervisor
                <br />2. Your supervisor will complete their assessment sections
                <br />3. Schedule your performance review meeting to discuss all sections
            </RadzenText>
        </RadzenAlert>
    </RadzenCard>
</RadzenCard>

@code {
    [Parameter] public ParticipantInfo ParticipantInfo { get; set; } = new();
    [Parameter] public Dictionary<string, CompetencyRating> SelfAssessment { get; set; } = new();
    [Parameter] public List<GoalAchievement> GoalAchievements { get; set; } = new();
    [Parameter] public CareerPlan CareerPlans { get; set; } = new();
    [Parameter] public List<AnnualGoal> NewGoals { get; set; } = new();

    private string finalComments = string.Empty;
    private DateTime? followUpDate = DateTime.Now.AddDays(14);

    private double averageSelfRating => SelfAssessment.Count > 0 ? SelfAssessment.Average(s => s.Value.Rating) : 0;
    private double averageGoalAchievement => GoalAchievements.Count > 0 ? GoalAchievements.Average(g => g.AchievementPercentage) : 0;

    private List<CompetencyChartData> competencyChartData => SelfAssessment
        .Select(c => new CompetencyChartData { Competency = GetCompetencyName(c.Key), Rating = c.Value.Rating })
        .ToList();

    private string GetCompetencyName(string key)
    {
        return key switch
        {
            "expertise" => "Professional Knowledge",
            "quality" => "Work Quality",
            "reliability" => "Reliability",
            "resilience" => "Stress Resilience",
            "independence" => "Independence",
            "communication" => "Communication Skills",
            "proactivity" => "Proactivity & Initiative",
            "problem_solving" => "Problem-Solving Skills",
            "behavior" => "Professional Behavior",
            _ => key
        };
    }

    private BadgeStyle GetAchievementBadgeStyle(int percentage)
    {
        return percentage switch
        {
            >= 90 => BadgeStyle.Success,
            >= 70 => BadgeStyle.Info,
            >= 50 => BadgeStyle.Warning,
            _ => BadgeStyle.Danger
        };
    }

    private ProgressBarStyle GetProgressBarStyle(int percentage)
    {
        return percentage switch
        {
            >= 90 => ProgressBarStyle.Success,
            >= 70 => ProgressBarStyle.Info,
            >= 50 => ProgressBarStyle.Warning,
            _ => ProgressBarStyle.Danger
        };
    }

    public class CompetencyChartData
    {
        public string Competency { get; set; } = string.Empty;
        public int Rating { get; set; }
    }
}